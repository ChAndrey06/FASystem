{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { takeUntil } from 'rxjs';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { DestroyService } from '@core/services';\nimport { Loadable } from '@core/helpers';\nimport { TransactionTypesEnum } from '@features/transactions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@features/transactions\";\nimport * as i3 from \"@features/accounts\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/select\";\nimport * as i8 from \"@angular/material/core\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/material/button\";\nimport * as i11 from \"rxjs\";\nfunction TransactionDetailsComponent_mat_option_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const account_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", account_r2.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", account_r2.name, \" \");\n  }\n}\nfunction TransactionDetailsComponent_mat_option_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const category_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", category_r3.id);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", category_r3.name, \" \");\n  }\n}\nexport class TransactionDetailsComponent {\n  constructor(viewDestroyed$, formBuilder, transactionsService, accountsState, router, route) {\n    this.viewDestroyed$ = viewDestroyed$;\n    this.formBuilder = formBuilder;\n    this.transactionsService = transactionsService;\n    this.accountsState = accountsState;\n    this.router = router;\n    this.route = route;\n    this.typeId = null;\n    this.title = this.typeId ? TransactionTypesEnum[this.typeId] : 'Transaction';\n    this.accounts$ = this.accountsState.data$;\n    this.categories = new Loadable([], false);\n    this.transaction = new Loadable(null, false);\n    this.formGroup = this.formBuilder.group({\n      amount: [null, Validators.required],\n      description: [null, [Validators.required, Validators.maxLength(500)]],\n      typeId: [TransactionTypesEnum.expense, Validators.required],\n      categoryId: [null, [Validators.required]],\n      accountId: [null, [Validators.required]]\n    });\n  }\n  ngOnInit() {\n    const expenseId = this.route.snapshot.paramMap.get('id');\n    if (expenseId) {\n      if (isNaN(Number(expenseId))) {\n        this.router.navigate(['./']);\n      } else {\n        this.loadExpense(Number(expenseId));\n      }\n    }\n    this.loadCategories();\n  }\n  onSubmit(form) {\n    console.log(form);\n    if (this.transaction.data) {\n      this.updateExpense(this.transaction.data.id, form);\n    } else {\n      this.createExpense(form);\n    }\n  }\n  onNewClicked() {\n    this.transaction.setData(null);\n    this.formGroup.reset({\n      typeId: TransactionTypesEnum.expense\n    });\n  }\n  onViewAllClicked() {\n    this.router.navigate(['expenses']);\n  }\n  loadCategories() {\n    this.categories.isLoading = true;\n    this.transactionsService.getCategories(TransactionTypesEnum.expense).pipe(takeUntil(this.viewDestroyed$)).subscribe({\n      next: data => this.categories.setData(data),\n      error: error => this.categories.setError(error)\n    });\n  }\n  loadExpense(id) {\n    this.transaction.isLoading = true;\n    this.transactionsService.getExpenseById(id).pipe(takeUntil(this.viewDestroyed$)).subscribe(expense => {\n      this.transaction.setData(expense);\n      this.formGroup.reset(expense);\n    });\n  }\n  createExpense(expense) {\n    this.transaction.isLoading = true;\n    this.transactionsService.create(expense).pipe(takeUntil(this.viewDestroyed$)).subscribe(expense => {\n      this.transaction.setData(expense);\n      this.formGroup.reset(expense);\n    });\n  }\n  updateExpense(id, expense) {\n    this.transaction.isLoading = true;\n    this.transactionsService.updateById(id, expense).pipe(takeUntil(this.viewDestroyed$)).subscribe(expense => {\n      this.transaction.setData(expense);\n      this.formGroup.reset(expense);\n    });\n  }\n}\nTransactionDetailsComponent.ɵfac = function TransactionDetailsComponent_Factory(t) {\n  return new (t || TransactionDetailsComponent)(i0.ɵɵdirectiveInject(DestroyService), i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.TransactionsService), i0.ɵɵdirectiveInject(i3.AccountsState), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i4.ActivatedRoute));\n};\nTransactionDetailsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TransactionDetailsComponent,\n  selectors: [[\"app-transaction-details\"]],\n  inputs: {\n    typeId: \"typeId\"\n  },\n  standalone: true,\n  features: [i0.ɵɵStandaloneFeature],\n  decls: 29,\n  vars: 9,\n  consts: [[1, \"form\", 3, \"formGroup\", \"ngSubmit\"], [1, \"element\"], [\"matInput\", \"\", \"type\", \"number\", \"placeholder\", \"Amount\", \"formControlName\", \"amount\"], [\"formControlName\", \"accountId\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"formControlName\", \"categoryId\"], [\"matInput\", \"\", \"placeholder\", \"Description...\", \"formControlName\", \"description\"], [1, \"sbumit\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"button\", 3, \"disabled\", \"click\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\"], [3, \"value\"]],\n  template: function TransactionDetailsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function TransactionDetailsComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit(ctx.formGroup.value);\n      });\n      i0.ɵɵelementStart(3, \"mat-form-field\", 1)(4, \"mat-label\");\n      i0.ɵɵtext(5, \"Amount\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(6, \"input\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"mat-form-field\", 1)(8, \"mat-label\");\n      i0.ɵɵtext(9, \"Account\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"mat-select\", 3);\n      i0.ɵɵtemplate(11, TransactionDetailsComponent_mat_option_11_Template, 2, 2, \"mat-option\", 4);\n      i0.ɵɵpipe(12, \"async\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"mat-form-field\", 1)(14, \"mat-label\");\n      i0.ɵɵtext(15, \"Category\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"mat-select\", 5);\n      i0.ɵɵtemplate(17, TransactionDetailsComponent_mat_option_17_Template, 2, 2, \"mat-option\", 4);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(18, \"mat-form-field\", 1)(19, \"mat-label\");\n      i0.ɵɵtext(20, \"Description\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(21, \"textarea\", 6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"div\", 7)(23, \"button\", 8);\n      i0.ɵɵlistener(\"click\", function TransactionDetailsComponent_Template_button_click_23_listener() {\n        return ctx.onNewClicked();\n      });\n      i0.ɵɵtext(24, \" New \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(25, \"button\", 9);\n      i0.ɵɵtext(26, \" Save \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(27, \"button\", 8);\n      i0.ɵɵlistener(\"click\", function TransactionDetailsComponent_Template_button_click_27_listener() {\n        return ctx.onViewAllClicked();\n      });\n      i0.ɵɵtext(28, \" View all \");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.title);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.formGroup);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(12, 7, ctx.accounts$));\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngForOf\", ctx.categories.data);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"disabled\", ctx.formGroup.dirty);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", !ctx.formGroup.valid || !ctx.formGroup.dirty);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.formGroup.dirty);\n    }\n  },\n  dependencies: [CommonModule, i5.NgForOf, i5.AsyncPipe, FormsModule, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, ReactiveFormsModule, i1.FormGroupDirective, i1.FormControlName, MatFormFieldModule, i6.MatFormField, i6.MatLabel, MatSelectModule, i7.MatSelect, i8.MatOption, MatInputModule, i9.MatInput, MatButtonModule, i10.MatButton],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["CommonModule","FormsModule","ReactiveFormsModule","Validators","takeUntil","MatFormFieldModule","MatSelectModule","MatInputModule","MatButtonModule","DestroyService","Loadable","TransactionTypesEnum","i0","TransactionDetailsComponent","constructor","viewDestroyed$","formBuilder","transactionsService","accountsState","router","route","typeId","data$","group","amount","required","description","maxLength","expense","categoryId","accountId","ngOnInit","expenseId","snapshot","paramMap","get","isNaN","Number","navigate","loadExpense","loadCategories","onSubmit","form","console","log","transaction","data","updateExpense","id","createExpense","onNewClicked","setData","formGroup","reset","onViewAllClicked","categories","isLoading","getCategories","pipe","subscribe","next","error","setError","getExpenseById","create","updateById","selectors","inputs","standalone","features","decls","vars","consts","template","ctx","styles"],"sourceRoot":"","sources":["/home/eagold/MyFiles/FASystem/FASystemClient/src/app/features/transactions/components/transaction-details/transaction-details.component.ts","/home/eagold/MyFiles/FASystem/FASystemClient/src/app/features/transactions/components/transaction-details/transaction-details.component.html"],"sourcesContent":["import { Component, Inject, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\n\nimport { Observable, takeUntil } from 'rxjs';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { DestroyService } from '@core/services';\nimport { AccountsState } from '@features/accounts';\nimport { Loadable } from '@core/helpers';\nimport {\n  TransactionCategoryInterface,\n  TransactionCreateInterface,\n  TransactionReadInterface,\n  TransactionsService,\n  TransactionTypesEnum\n} from '@features/transactions';\n\n@Component({\n  selector: 'app-transaction-details',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n\n    MatFormFieldModule,\n    MatSelectModule,\n    MatInputModule,\n    MatButtonModule\n  ],\n  templateUrl: './transaction-details.component.html',\n  styleUrls: ['./transaction-details.component.scss']\n})\nexport class TransactionDetailsComponent {\n  @Input() typeId: TransactionTypesEnum | null = null;\n  title = this.typeId ? TransactionTypesEnum[this.typeId] : 'Transaction';\n  accounts$ = this.accountsState.data$;\n  categories = new Loadable<TransactionCategoryInterface[]>([], false);\n  transaction = new Loadable<TransactionReadInterface | null>(null, false);\n\n  formGroup: FormGroup = this.formBuilder.group({\n    amount: [null, Validators.required],\n    description: [null, [Validators.required, Validators.maxLength(500)]],\n    typeId: [TransactionTypesEnum.expense, Validators.required],\n    categoryId: [null, [Validators.required]],\n    accountId: [null, [Validators.required]]\n  });\n\n  constructor(\n    @Inject(DestroyService) private readonly viewDestroyed$: Observable<void>,\n    private readonly formBuilder: FormBuilder,\n    private readonly transactionsService: TransactionsService,\n    private readonly accountsState: AccountsState,\n    private readonly router: Router,\n    private readonly route: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    const expenseId = this.route.snapshot.paramMap.get('id');\n\n    if (expenseId) {\n      if (isNaN(Number(expenseId))) {\n        this.router.navigate(['./']);\n      } else {\n        this.loadExpense(Number(expenseId));\n      }\n    }\n\n    this.loadCategories();\n  }\n\n  onSubmit(form: any): void {\n    console.log(form)\n    if (this.transaction.data) {\n      this.updateExpense(this.transaction.data.id, form);\n    } else {\n      this.createExpense(form);\n    }\n  }\n\n  onNewClicked(): void {\n    this.transaction.setData(null);\n    this.formGroup.reset({ typeId: TransactionTypesEnum.expense });\n  }\n\n  onViewAllClicked(): void {\n    this.router.navigate(['expenses']);\n  }\n\n  loadCategories(): void {\n    this.categories.isLoading = true;\n    this.transactionsService.getCategories(TransactionTypesEnum.expense)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe({\n        next: data => this.categories.setData(data),\n        error: error => this.categories.setError(error)\n      });\n  }\n\n  loadExpense(id: number): void {\n    this.transaction.isLoading = true;\n    this.transactionsService.getExpenseById(id)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe(expense => {\n        this.transaction.setData(expense);\n        this.formGroup.reset(expense);\n      });\n  }\n\n  createExpense(expense: TransactionCreateInterface): void {\n    this.transaction.isLoading = true;\n    this.transactionsService.create(expense)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe(expense => {\n        this.transaction.setData(expense);\n        this.formGroup.reset(expense);\n      });\n  }\n\n  updateExpense(id: number, expense: TransactionCreateInterface): void {\n    this.transaction.isLoading = true;\n    this.transactionsService.updateById(id, expense)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe(expense => {\n        this.transaction.setData(expense);\n        this.formGroup.reset(expense);\n      });\n  }\n}\n","<h1>{{title}}</h1>\n\n<form [formGroup]=\"formGroup\" (ngSubmit)=\"onSubmit(formGroup.value)\" class=\"form\">\n  <mat-form-field class=\"element\">\n    <mat-label>Amount</mat-label>\n    <input matInput type=\"number\" placeholder=\"Amount\" formControlName=\"amount\">\n  </mat-form-field>\n\n  <mat-form-field class=\"element\">\n    <mat-label>Account</mat-label>\n    <mat-select formControlName=\"accountId\">\n      <mat-option *ngFor=\"let account of accounts$ | async\" [value]=\"account.id\">\n        {{account.name}}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n\n  <mat-form-field class=\"element\">\n    <mat-label>Category</mat-label>\n    <mat-select formControlName=\"categoryId\">\n      <mat-option *ngFor=\"let category of categories.data\" [value]=\"category.id\">\n        {{category.name}}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n\n  <mat-form-field class=\"element\">\n    <mat-label>Description</mat-label>\n    <textarea matInput placeholder=\"Description...\" formControlName=\"description\"></textarea>\n  </mat-form-field>\n\n  <div class=\"sbumit\">\n    <button \n      mat-raised-button\n      color=\"primary\" \n      type=\"button\" \n      (click)=\"onNewClicked()\"\n      [disabled]=\"formGroup.dirty\"\n    >\n      New\n    </button>\n    <button \n      mat-raised-button \n      color=\"primary\" \n      type=\"submit\" \n      [disabled]=\"!formGroup.valid || !formGroup.dirty\"\n    >\n      Save\n    </button>    \n    <button \n      mat-raised-button\n      color=\"primary\" \n      type=\"button\"\n      (click)=\"onViewAllClicked()\"\n      [disabled]=\"formGroup.dirty\"\n    >\n      View all\n    </button>    \n  </div>\n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}