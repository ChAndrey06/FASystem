{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, Inject, ViewChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AgGridModule } from 'ag-grid-angular';\nimport { takeUntil } from 'rxjs';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { Loadable } from '@core/helpers';\nimport { DestroyService } from '@core/services';\nimport { TemplateRendererComponent } from '@shared';\nlet ExpensesComponent = class ExpensesComponent {\n  constructor(viewDestroyed$, transactionsService, router, route) {\n    this.viewDestroyed$ = viewDestroyed$;\n    this.transactionsService = transactionsService;\n    this.router = router;\n    this.route = route;\n    this.expenses = new Loadable([], false);\n    this.selected = [];\n    this.defaultColDef = {\n      resizable: true,\n      sortable: true,\n      filter: true\n    };\n    this.gridOptions = {\n      suppressRowClickSelection: true,\n      rowHeight: 48\n    };\n  }\n  ngOnInit() {\n    this.setCoumnDefs();\n    this.updateExpenses();\n  }\n  setCoumnDefs() {\n    this.columnDefs = [{\n      field: 'id',\n      headerCheckboxSelection: true,\n      checkboxSelection: true\n    }, {\n      field: 'amount'\n    }, {\n      field: 'description'\n    }, {\n      field: 'categoryName',\n      headerName: 'Category'\n    }, {\n      field: 'accountName',\n      headerName: 'Account'\n    }, {\n      headerName: 'Controls',\n      pinned: 'right',\n      cellRenderer: TemplateRendererComponent,\n      cellRendererParams: {\n        template: this.controlsTemplate\n      }\n    }];\n  }\n  onGridReady(params) {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n  }\n  onFirstDataRendered() {\n    this.gridColumnApi.autoSizeAllColumns();\n  }\n  onSelectionChanged(event) {\n    this.selected = event.api.getSelectedRows();\n  }\n  onNewClicked() {\n    this.router.navigate(['expenses']);\n  }\n  onDeleteClicked() {\n    // this.deleteMany(this.selected);\n    // this.resetSelected();\n  }\n  onRowDeleteClicked(expense) {\n    // this.deleteMany([expense]);\n  }\n  onRowClicked(expense) {\n    // this.openDetails(bike);\n  }\n  onRowEditClicked(expense) {\n    // this.openDetails(bike);\n  }\n  // onDetailsSave(bike: BikeInterface): void {\n  //   if (bike.id) {\n  //     this.bikesService.update(bike, bike.id)\n  //       .subscribe({\n  //         next: () => this.updateBikes()\n  //       });\n  //   }\n  //   else {\n  //     this.bikesService.create(bike)\n  //       .subscribe();\n  //   }\n  // }\n  resetSelected() {\n    this.selected = [];\n  }\n  // openDetails(transaction: TransactionReadInterface): void {\n  //   const dialogRef = this.dialog.open(BikeDetailsFormComponent, { maxHeight: '80vh', width: '80vw', maxWidth: '500px' });\n  //   const instance = dialogRef.componentInstance;\n  //   instance.bike = bike;\n  //   instance.saveEvent.subscribe(b => {\n  //     dialogRef.close();\n  //     this.onDetailsSave(b);\n  //   });\n  // }\n  updateExpenses() {\n    this.expenses.isLoading = true;\n    this.transactionsService.getAll().pipe(takeUntil(this.viewDestroyed$)).subscribe({\n      next: data => this.expenses.setData(data),\n      error: error => this.expenses.setError(error)\n    });\n  }\n};\n__decorate([ViewChild('controlsTemplate', {\n  static: true\n})], ExpensesComponent.prototype, \"controlsTemplate\", void 0);\nExpensesComponent = __decorate([Component({\n  selector: 'app-expenses',\n  standalone: true,\n  imports: [CommonModule, AgGridModule, MatButtonModule, MatIconModule],\n  providers: [DestroyService],\n  templateUrl: 'expenses.component.html',\n  styleUrls: ['expenses.component.scss']\n}), __param(0, Inject(DestroyService))], ExpensesComponent);\nexport { ExpensesComponent };","map":{"version":3,"mappings":"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","names":["Component","Inject","ViewChild","CommonModule","AgGridModule","takeUntil","MatButtonModule","MatIconModule","Loadable","DestroyService","TemplateRendererComponent","ExpensesComponent","constructor","viewDestroyed$","transactionsService","router","route","resizable","sortable","filter","suppressRowClickSelection","rowHeight","ngOnInit","setCoumnDefs","updateExpenses","columnDefs","field","headerCheckboxSelection","checkboxSelection","headerName","pinned","cellRenderer","cellRendererParams","template","controlsTemplate","onGridReady","params","gridApi","api","gridColumnApi","columnApi","onFirstDataRendered","autoSizeAllColumns","onSelectionChanged","event","selected","getSelectedRows","onNewClicked","navigate","onDeleteClicked","onRowDeleteClicked","expense","onRowClicked","onRowEditClicked","resetSelected","expenses","isLoading","getAll","pipe","subscribe","next","data","setData","error","setError","__decorate","static","selector","standalone","imports","providers","templateUrl","styleUrls","__param"],"sourceRoot":"","sources":["/home/eagold/MyFiles/FASystem/FASystemClient/src/app/pages/expenses/expenses.component.ts"],"sourcesContent":["import { Component, Inject, TemplateRef, ViewChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { Router } from '@angular/router';\n\nimport { AgGridModule } from 'ag-grid-angular';\nimport { ColDef, ColumnApi, GridApi, GridReadyEvent, SelectionChangedEvent } from 'ag-grid-community';\n\nimport { Observable, takeUntil } from 'rxjs';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { Loadable } from '@core/helpers';\nimport { DestroyService } from '@core/services';\nimport { TemplateRendererComponent } from '@shared';\nimport { TransactionReadInterface, TransactionsService } from '@features/transactions';\n\n@Component({\n  selector: 'app-expenses',\n  standalone: true,\n  imports: [\n    CommonModule,\n\n    AgGridModule,\n\n    MatButtonModule,\n    MatIconModule,\n  ],\n  providers: [\n    DestroyService\n  ],\n  templateUrl: 'expenses.component.html',\n  styleUrls: ['expenses.component.scss']\n})\nexport class ExpensesComponent {\n  @ViewChild('controlsTemplate', { static: true }) controlsTemplate!: TemplateRef<any>;\n  expenses = new Loadable<TransactionReadInterface[]>([], false);\n  selected: TransactionReadInterface[] = [];\n\n  gridApi!: GridApi;\n  gridColumnApi!: ColumnApi;\n\n  columnDefs!: ColDef[];\n  defaultColDef = {\n    resizable: true,\n    sortable: true,\n    filter: true\n  };\n  gridOptions = {\n    suppressRowClickSelection: true,\n    rowHeight: 48\n  };\n\n  constructor(\n    @Inject(DestroyService) private readonly viewDestroyed$: Observable<void>,\n    private readonly transactionsService: TransactionsService,\n    private readonly router: Router,\n    private route:ActivatedRoute,\n  ) { }\n\n  ngOnInit(): void {\n    this.setCoumnDefs();\n    this.updateExpenses();\n  }\n\n  setCoumnDefs(): void {\n    this.columnDefs = [\n      {\n        field: 'id',\n        headerCheckboxSelection: true,\n        checkboxSelection: true,\n      },\n      { field: 'amount' },\n      { field: 'description' },\n      { \n        field: 'categoryName',\n        headerName: 'Category'\n      },\n      { \n        field: 'accountName',\n        headerName: 'Account'\n      },\n      {\n        headerName: 'Controls',\n        pinned: 'right',\n        cellRenderer: TemplateRendererComponent,\n        cellRendererParams: {\n          template: this.controlsTemplate\n        }\n      }\n    ]\n  }\n\n  onGridReady(params: GridReadyEvent): void {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n  }\n\n  onFirstDataRendered(): void {\n    this.gridColumnApi.autoSizeAllColumns();\n  }\n\n  onSelectionChanged(event: SelectionChangedEvent) {\n    this.selected = event.api.getSelectedRows();\n  }\n\n  onNewClicked() {\n    this.router.navigate(['expenses']);\n  }\n\n  onDeleteClicked() {\n    // this.deleteMany(this.selected);\n    // this.resetSelected();\n  }\n\n  onRowDeleteClicked(expense: TransactionReadInterface): void {\n    // this.deleteMany([expense]);\n  }\n\n  onRowClicked(expense: TransactionReadInterface): void {\n    // this.openDetails(bike);\n  }\n\n  onRowEditClicked(expense: TransactionReadInterface): void {\n    // this.openDetails(bike);\n  }\n\n  // onDetailsSave(bike: BikeInterface): void {\n  //   if (bike.id) {\n  //     this.bikesService.update(bike, bike.id)\n  //       .subscribe({\n  //         next: () => this.updateBikes()\n  //       });\n  //   }\n  //   else {\n  //     this.bikesService.create(bike)\n  //       .subscribe();\n  //   }\n  // }\n\n  resetSelected(): void {\n    this.selected = [];\n  }\n\n  // openDetails(transaction: TransactionReadInterface): void {\n  //   const dialogRef = this.dialog.open(BikeDetailsFormComponent, { maxHeight: '80vh', width: '80vw', maxWidth: '500px' });\n  //   const instance = dialogRef.componentInstance;\n\n  //   instance.bike = bike;\n  //   instance.saveEvent.subscribe(b => {\n  //     dialogRef.close();\n  //     this.onDetailsSave(b);\n  //   });\n  // }\n\n  updateExpenses(): void {\n    this.expenses.isLoading = true;\n    this.transactionsService.getAll()\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe({\n        next: data => this.expenses.setData(data),\n        error: error => this.expenses.setError(error)\n      });\n  }\n\n  // deleteMany(bike: BikeInterface[]): void {\n  //   this.bikesService.deleteMany(bike.map(b => b.id))\n  //     .pipe(takeUntil(this.viewDestroyed$))\n  //     .subscribe({\n  //       next: () => this.updateBikes()\n  //     });\n  // }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}