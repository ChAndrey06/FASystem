{"ast":null,"code":"import { catchError, map, tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@core/services\";\nimport * as i2 from \"../states\";\nexport class AuthService {\n  constructor(apiService, userState) {\n    this.apiService = apiService;\n    this.userState = userState;\n    this.ACCESS_TOKEN = 'ACCESS_TOKEN';\n    this.REFRESH_TOKEN = 'REFRESH_TOKEN';\n  }\n  update() {\n    return this.apiService.get('users/me').pipe(tap(response => this.doLogin(response)), map(() => true), catchError(() => of(false)));\n  }\n  login(login) {\n    return this.apiService.post('users/login', login).pipe(tap(response => this.doLogin(response)), map(() => true), catchError(() => of(false)));\n  }\n  logout() {\n    return this.apiService.post('users/logout', {\n      refreshToken: this.getRefreshToken()\n    }).pipe(tap(() => this.doLogout()), map(() => true), catchError(() => of(false)));\n  }\n  refreshToken() {\n    return this.apiService.post('refresh', {\n      refreshToken: this.getRefreshToken()\n    }).pipe(tap(tokens => {\n      this.storeAccessToken(tokens.accessToken);\n    }));\n  }\n  get isLoggedIn() {\n    return !!this.getAccessToken();\n  }\n  doLogin({\n    user,\n    tokens\n  }) {\n    this.userState.set(user);\n    this.storeTokens(tokens);\n  }\n  doLogout() {\n    this.userState.clear();\n    this.removeTokens();\n  }\n  getAccessToken() {\n    return localStorage.getItem(this.ACCESS_TOKEN);\n  }\n  getRefreshToken() {\n    return localStorage.getItem(this.REFRESH_TOKEN);\n  }\n  storeAccessToken(accessToken) {\n    localStorage.setItem(this.ACCESS_TOKEN, accessToken);\n  }\n  storeTokens(tokens) {\n    localStorage.setItem(this.ACCESS_TOKEN, tokens.accessToken);\n    localStorage.setItem(this.REFRESH_TOKEN, tokens.refreshToken);\n  }\n  removeTokens() {\n    localStorage.removeItem(this.ACCESS_TOKEN);\n    localStorage.removeItem(this.REFRESH_TOKEN);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.UserState));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["catchError","map","tap","of","AuthService","constructor","apiService","userState","update","get","pipe","response","doLogin","login","post","logout","refreshToken","getRefreshToken","doLogout","tokens","storeAccessToken","accessToken","isLoggedIn","getAccessToken","user","set","storeTokens","clear","removeTokens","localStorage","getItem","ACCESS_TOKEN","REFRESH_TOKEN","setItem","removeItem","factory","providedIn"],"sourceRoot":"","sources":["/home/eagold/MyFiles/FASystem/FASystemClient/src/app/features/users/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { catchError, map, tap } from 'rxjs/operators';\nimport { of, Observable } from 'rxjs';\n\nimport { ApiService } from '@core/services';\nimport { LoginInterface, TokensInterface, UserInterface } from '../interfaces';\nimport { UserState } from '../states';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private readonly ACCESS_TOKEN = 'ACCESS_TOKEN';\n  private readonly REFRESH_TOKEN = 'REFRESH_TOKEN';\n\n  constructor(\n    private readonly apiService: ApiService,\n    private readonly userState: UserState\n  ) {}\n\n  public update() {\n    return this.apiService.get<UserInterface>('users/me')\n      .pipe(\n        tap(response => this.doLogin(response)),\n        map(() => true),\n        catchError(() => of(false))\n      );\n  }\n\n  public login(login: LoginInterface): Observable<boolean> {\n    return this.apiService.post<{ tokens: TokensInterface, user: UserInterface}>('users/login', login)\n      .pipe(\n        tap(response => this.doLogin(response)),\n        map(() => true),\n        catchError(() => of(false))\n      );\n  }\n\n  public logout(): Observable<boolean> {\n    return this.apiService.post('users/logout', {\n      refreshToken: this.getRefreshToken()\n    }).pipe(\n      tap(() => this.doLogout()),\n      map(() => true),\n      catchError(() => of(false))\n    );\n  }\n  \n  public refreshToken(): Observable<TokensInterface> {\n    return this.apiService.post<TokensInterface>('refresh', {\n      refreshToken: this.getRefreshToken()\n    }).pipe(tap((tokens: TokensInterface) => {\n      this.storeAccessToken(tokens.accessToken);\n    }));\n  }\n  \n  public get isLoggedIn() {\n    return !!this.getAccessToken();\n  }\n\n  private doLogin({ user, tokens }: { user: UserInterface, tokens: TokensInterface }): void {\n    this.userState.set(user);\n    this.storeTokens(tokens);\n  }\n\n  private doLogout(): void {\n    this.userState.clear();\n    this.removeTokens();\n  }\n\n  public getAccessToken(): string | null {\n    return localStorage.getItem(this.ACCESS_TOKEN);\n  }\n\n  private getRefreshToken(): string | null {\n    return localStorage.getItem(this.REFRESH_TOKEN);\n  }\n\n  private storeAccessToken(accessToken: string): void {\n    localStorage.setItem(this.ACCESS_TOKEN, accessToken);\n  }\n\n  private storeTokens(tokens: TokensInterface): void {\n    localStorage.setItem(this.ACCESS_TOKEN, tokens.accessToken);\n    localStorage.setItem(this.REFRESH_TOKEN, tokens.refreshToken);\n  }\n\n  private removeTokens(): void {\n    localStorage.removeItem(this.ACCESS_TOKEN);\n    localStorage.removeItem(this.REFRESH_TOKEN);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}