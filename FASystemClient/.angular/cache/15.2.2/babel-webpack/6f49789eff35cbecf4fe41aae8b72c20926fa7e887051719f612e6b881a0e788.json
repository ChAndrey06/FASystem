{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@features/users\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n  }\n  canActivate(state) {\n    return this.canLoad();\n  }\n  canLoad(state) {\n    if (!this.authService.isLoggedIn) {\n      this.router.navigate(['login'], {\n        queryParams: {\n          returnUrl: state.url\n        }\n      });\n    }\n    return this.authService.isLoggedIn;\n  }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;AAOA,OAAM,MAAOA,SAAS;EACpBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,gBAAW,GAAXD,WAAW;IAAuB,WAAM,GAANC,MAAM;EAAY;EAExEC,WAAW,CAACC,KAA0B;IACpC,OAAO,IAAI,CAACC,OAAO,EAAE;EACvB;EAEAA,OAAO,CAACD,KAA0B;IAChC,IAAI,CAAC,IAAI,CAACH,WAAW,CAACK,UAAU,EAAE;MAChC,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAAC,CAAC,OAAO,CAAC,EAAE;QAAEC,WAAW,EAAE;UAAEC,SAAS,EAAEL,KAAK,CAACM;QAAG;MAAE,CAAC,CAAC;;IAG3E,OAAO,IAAI,CAACT,WAAW,CAACK,UAAU;EACpC;;AAbWP,SAAS;mBAATA,SAAS;AAAA;AAATA,SAAS;SAATA,SAAS;EAAAY,SAATZ,SAAS;EAAAa,YAFR;AAAM","names":["AuthGuard","constructor","authService","router","canActivate","state","canLoad","isLoggedIn","navigate","queryParams","returnUrl","url","factory","providedIn"],"sourceRoot":"","sources":["/home/eagold/MyFiles/FASystem/FASystemClient/src/app/core/guards/auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from '@features/users';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard {\n  constructor(private authService: AuthService, private router: Router) { }\n\n  canActivate(state: RouterStateSnapshot) {\n    return this.canLoad();\n  }\n\n  canLoad(state: RouterStateSnapshot) {\n    if (!this.authService.isLoggedIn) {\n      this.router.navigate(['login'], { queryParams: { returnUrl: state.url }});\n    }\n\n    return this.authService.isLoggedIn;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}