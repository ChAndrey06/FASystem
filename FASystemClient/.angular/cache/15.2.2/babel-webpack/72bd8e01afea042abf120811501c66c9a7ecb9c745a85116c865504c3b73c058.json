{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, Inject, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { takeUntil } from 'rxjs';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatIconModule } from '@angular/material/icon';\nimport { DestroyService } from '@core/services';\nimport { Loadable } from '@core/helpers';\nimport { TransactionTypesEnum } from '@features/transactions';\nlet TransactionDetailsComponent = class TransactionDetailsComponent {\n  constructor(viewDestroyed$, formBuilder, transactionsService, accountsState, router, route) {\n    this.viewDestroyed$ = viewDestroyed$;\n    this.formBuilder = formBuilder;\n    this.transactionsService = transactionsService;\n    this.accountsState = accountsState;\n    this.router = router;\n    this.route = route;\n    this.typeId = null;\n    this.title = 'Transaction';\n    this.accounts$ = this.accountsState.data$;\n    this.categories = new Loadable([], false);\n    this.transaction = new Loadable(null, false);\n    this.transactionTypes = [{\n      id: TransactionTypesEnum.expense,\n      name: 'Expense'\n    }, {\n      id: TransactionTypesEnum.income,\n      name: 'Income'\n    }];\n    this.formGroup = this.formBuilder.group({\n      amount: [null, Validators.required],\n      description: [null, [Validators.required, Validators.maxLength(500)]],\n      typeId: [null, Validators.required],\n      categoryId: [null, [Validators.required]],\n      categoryName: [null, [Validators.required]],\n      accountId: [null, [Validators.required]]\n    });\n  }\n  ngOnInit() {\n    const id = this.route.snapshot.paramMap.get('id');\n    if (id) {\n      if (isNaN(Number(id))) {\n        this.router.navigate(['./']);\n      } else {\n        this.loadTransaction(Number(id));\n      }\n    }\n    this.resetForm();\n    this.loadCategories();\n    if (!this.typeId) {\n      this.subscribeToTypeId();\n    }\n  }\n  onSubmit(form) {\n    if (this.transaction.data) {\n      this.updateTransaction(this.transaction.data.id, form);\n    } else {\n      this.createTransaction(form);\n    }\n  }\n  onNewClicked() {\n    this.resetForm();\n    this.transaction.setData(null);\n  }\n  onViewAllClicked() {\n    this.router.navigate(['..'], {\n      relativeTo: this.route\n    });\n  }\n  onClearCategoryClicked() {\n    this.formGroup.patchValue({\n      ...this.formGroup.value,\n      categoryId: null,\n      categoryName: null\n    });\n  }\n  onCategorySelected(event) {\n    const c = event.option.value;\n    this.formGroup.patchValue({\n      categoryId: c.id,\n      categoryName: c.name\n    });\n    console.log(event);\n  }\n  loadCategories() {\n    const typeId = this.typeId || this.formGroup.value.typeId;\n    this.categories.isLoading = true;\n    this.transactionsService.getCategories(typeId).pipe(takeUntil(this.viewDestroyed$)).subscribe({\n      next: data => this.categories.setData(data),\n      error: error => this.categories.setError(error)\n    });\n  }\n  loadTransaction(id) {\n    this.transaction.isLoading = true;\n    this.transactionsService.getById(id).pipe(takeUntil(this.viewDestroyed$)).subscribe(t => {\n      this.transaction.setData(t);\n      this.formGroup.reset(t);\n    });\n  }\n  createTransaction(t) {\n    this.transaction.isLoading = true;\n    this.transactionsService.create(t).pipe(takeUntil(this.viewDestroyed$)).subscribe(t => {\n      this.transaction.setData(t);\n      this.formGroup.reset(t);\n    });\n  }\n  updateTransaction(id, t) {\n    this.transaction.isLoading = true;\n    this.transactionsService.updateById(id, t).pipe(takeUntil(this.viewDestroyed$)).subscribe(t => {\n      this.transaction.setData(t);\n      this.formGroup.reset(t);\n    });\n  }\n  resetForm() {\n    this.formGroup.reset({\n      typeId: this.typeId\n    });\n  }\n  subscribeToTypeId() {\n    this.formGroup.get('typeId')?.valueChanges.subscribe(() => {\n      this.formGroup.get('categoryId')?.reset();\n      this.loadCategories();\n    });\n  }\n};\n__decorate([Input()], TransactionDetailsComponent.prototype, \"typeId\", void 0);\n__decorate([Input()], TransactionDetailsComponent.prototype, \"title\", void 0);\nTransactionDetailsComponent = __decorate([Component({\n  selector: 'app-transaction-details',\n  standalone: true,\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, MatFormFieldModule, MatSelectModule, MatInputModule, MatButtonModule, MatAutocompleteModule, MatIconModule],\n  providers: [DestroyService],\n  templateUrl: './transaction-details.component.html',\n  styleUrls: ['./transaction-details.component.scss']\n}), __param(0, Inject(DestroyService))], TransactionDetailsComponent);\nexport { TransactionDetailsComponent };","map":{"version":3,"mappings":"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","names":["Component","Inject","Input","CommonModule","FormsModule","ReactiveFormsModule","Validators","takeUntil","MatFormFieldModule","MatSelectModule","MatInputModule","MatButtonModule","MatAutocompleteModule","MatIconModule","DestroyService","Loadable","TransactionTypesEnum","TransactionDetailsComponent","constructor","viewDestroyed$","formBuilder","transactionsService","accountsState","router","route","data$","id","expense","name","income","group","amount","required","description","maxLength","typeId","categoryId","categoryName","accountId","ngOnInit","snapshot","paramMap","get","isNaN","Number","navigate","loadTransaction","resetForm","loadCategories","subscribeToTypeId","onSubmit","form","transaction","data","updateTransaction","createTransaction","onNewClicked","setData","onViewAllClicked","relativeTo","onClearCategoryClicked","formGroup","patchValue","value","onCategorySelected","event","c","option","console","log","categories","isLoading","getCategories","pipe","subscribe","next","error","setError","getById","t","reset","create","updateById","valueChanges","__decorate","selector","standalone","imports","providers","templateUrl","styleUrls","__param"],"sourceRoot":"","sources":["/home/eagold/MyFiles/FASystem/FASystemClient/src/app/features/transactions/components/transaction-details/transaction-details.component.ts"],"sourcesContent":["import { Component, Inject, Input, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\n\nimport { Observable, takeUntil, tap } from 'rxjs';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatAutocompleteModule, MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { DestroyService } from '@core/services';\nimport { AccountsState } from '@features/accounts';\nimport { Loadable } from '@core/helpers';\nimport {\n  TransactionCategoryReadInterface,\n  TransactionCreateInterface,\n  TransactionReadInterface,\n  TransactionsService,\n  TransactionTypesEnum\n} from '@features/transactions';\n\n@Component({\n  selector: 'app-transaction-details',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n\n    MatFormFieldModule,\n    MatSelectModule,\n    MatInputModule,\n    MatButtonModule,\n    MatAutocompleteModule,\n    MatIconModule\n  ],\n  providers: [\n    DestroyService\n  ],\n  templateUrl: './transaction-details.component.html',\n  styleUrls: ['./transaction-details.component.scss']\n})\nexport class TransactionDetailsComponent implements OnInit {\n  @Input() typeId: TransactionTypesEnum | null = null;\n  @Input() title = 'Transaction';\n  accounts$ = this.accountsState.data$;\n  categories = new Loadable<TransactionCategoryReadInterface[]>([], false);\n  transaction = new Loadable<TransactionReadInterface | null>(null, false);\n  transactionTypes = [{\n    id: TransactionTypesEnum.expense,\n    name: 'Expense'\n  }, {\n    id: TransactionTypesEnum.income,\n    name: 'Income'\n  }]\n\n  formGroup: FormGroup = this.formBuilder.group({\n    amount: [null, Validators.required],\n    description: [null, [Validators.required, Validators.maxLength(500)]],\n    typeId: [null, Validators.required],\n    categoryId: [null, [Validators.required]],\n    categoryName: [null, [Validators.required]],\n    accountId: [null, [Validators.required]]\n  });\n\n  constructor(\n    @Inject(DestroyService) private readonly viewDestroyed$: Observable<void>,\n    private readonly formBuilder: FormBuilder,\n    private readonly transactionsService: TransactionsService,\n    private readonly accountsState: AccountsState,\n    private readonly router: Router,\n    private readonly route: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    const id = this.route.snapshot.paramMap.get('id');\n    if (id) {\n      if (isNaN(Number(id))) {\n        this.router.navigate(['./']);\n      } else {\n        this.loadTransaction(Number(id));\n      }\n    }\n\n    this.resetForm();\n    this.loadCategories();\n\n    if (!this.typeId) {\n      this.subscribeToTypeId();\n    }\n  }\n\n  onSubmit(form: any): void {\n    if (this.transaction.data) {\n      this.updateTransaction(this.transaction.data.id, form);\n    } else {\n      this.createTransaction(form);\n    }\n  }\n\n  onNewClicked(): void {\n    this.resetForm();\n    this.transaction.setData(null);\n  }\n\n  onViewAllClicked(): void {\n    this.router.navigate(['..'], { relativeTo: this.route });\n  }\n\n  onClearCategoryClicked(): void {\n    this.formGroup.patchValue({ ...this.formGroup.value, categoryId: null, categoryName: null });\n  }\n\n  onCategorySelected(event: MatAutocompleteSelectedEvent): void {\n    const c = event.option.value;\n    this.formGroup.patchValue({ categoryId: c.id, categoryName: c.name });\n    console.log(event);\n  }\n\n  loadCategories(): void {\n    const typeId = this.typeId || this.formGroup.value.typeId;\n    this.categories.isLoading = true;\n    this.transactionsService.getCategories(typeId)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe({\n        next: data => this.categories.setData(data),\n        error: error => this.categories.setError(error)\n      });\n  }\n\n  loadTransaction(id: number): void {\n    this.transaction.isLoading = true;\n    this.transactionsService.getById(id)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe(t => {\n        this.transaction.setData(t);\n        this.formGroup.reset(t);\n      });\n  }\n\n  createTransaction(t: TransactionCreateInterface): void {\n    this.transaction.isLoading = true;\n    this.transactionsService.create(t)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe(t => {\n        this.transaction.setData(t);\n        this.formGroup.reset(t);\n      });\n  }\n\n  updateTransaction(id: number, t: TransactionCreateInterface): void {\n    this.transaction.isLoading = true;\n    this.transactionsService.updateById(id, t)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe(t => {\n        this.transaction.setData(t);\n        this.formGroup.reset(t);\n      });\n  }\n\n  resetForm(): void {\n    this.formGroup.reset({ typeId: this.typeId });\n  }\n\n  subscribeToTypeId(): void {\n    this.formGroup.get('typeId')?.valueChanges\n      .subscribe(() => {\n        this.formGroup.get('categoryId')?.reset();\n        this.loadCategories();\n      });\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}