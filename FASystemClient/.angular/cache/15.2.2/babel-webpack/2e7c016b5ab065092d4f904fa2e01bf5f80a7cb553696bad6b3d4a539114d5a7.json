{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, Inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { takeUntil } from 'rxjs';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { DestroyService } from '@core/services';\nimport { Loadable } from '@core/helpers';\nimport { TransactionTypesEnum } from '@features/transactions';\nlet DetailsComponent = class DetailsComponent {\n  constructor(viewDestroyed$, formBuilder, transactionsService, accountsState, accountsService, router, route) {\n    this.viewDestroyed$ = viewDestroyed$;\n    this.formBuilder = formBuilder;\n    this.transactionsService = transactionsService;\n    this.accountsState = accountsState;\n    this.accountsService = accountsService;\n    this.router = router;\n    this.route = route;\n    this.accounts$ = this.accountsState.data$;\n    this.categories = new Loadable([], false);\n    this.expense = new Loadable(null, false);\n    this.formGroup = this.formBuilder.group({\n      amount: [null, Validators.required],\n      description: [null, [Validators.required, Validators.maxLength(500)]],\n      typeId: [TransactionTypesEnum.expense, Validators.required],\n      categoryId: [null, [Validators.required]],\n      accountId: [null, [Validators.required]]\n    });\n  }\n  ngOnInit() {\n    const expenseId = this.route.snapshot.paramMap.get('id');\n    if (expenseId) {\n      if (isNaN(Number(expenseId))) {\n        this.router.navigate(['./']);\n      } else {\n        this.loadExpense(Number(expenseId));\n      }\n    }\n    this.loadCategories();\n  }\n  onSubmit(form) {\n    if (this.expense.data) {\n      this.updateExpense(this.expense.data.id, form);\n    } else {\n      this.createExpense(form);\n    }\n  }\n  loadCategories() {\n    this.categories.isLoading = true;\n    this.transactionsService.getCategories(TransactionTypesEnum.expense).pipe(takeUntil(this.viewDestroyed$)).subscribe({\n      next: data => this.categories.setData(data),\n      error: error => this.categories.setError(error)\n    });\n  }\n  loadExpense(id) {\n    this.expense.isLoading = true;\n    this.transactionsService.getExpenseById(id).pipe(takeUntil(this.viewDestroyed$)).subscribe(expense => {\n      this.expense.setData(expense);\n      this.formGroup.reset(expense);\n    });\n  }\n  createExpense(expense) {\n    this.expense.isLoading = true;\n    this.transactionsService.create(expense).pipe(takeUntil(this.viewDestroyed$)).subscribe(expense => {\n      this.expense.setData(expense);\n      this.formGroup.reset(expense);\n    });\n  }\n  updateExpense(id, expense) {\n    this.expense.isLoading = true;\n    this.transactionsService.updateById(id, expense).pipe(takeUntil(this.viewDestroyed$)).subscribe(expense => {\n      this.expense.setData(expense);\n      this.formGroup.reset(expense);\n    });\n  }\n};\nDetailsComponent = __decorate([Component({\n  selector: 'app-details',\n  standalone: true,\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, MatFormFieldModule, MatSelectModule, MatInputModule, MatButtonModule],\n  templateUrl: './details.component.html',\n  styleUrls: ['./details.component.scss']\n}), __param(0, Inject(DestroyService))], DetailsComponent);\nexport { DetailsComponent };","map":{"version":3,"mappings":"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","names":["Component","Inject","CommonModule","FormsModule","ReactiveFormsModule","Validators","takeUntil","MatFormFieldModule","MatSelectModule","MatInputModule","MatButtonModule","DestroyService","Loadable","TransactionTypesEnum","DetailsComponent","constructor","viewDestroyed$","formBuilder","transactionsService","accountsState","accountsService","router","route","data$","group","amount","required","description","maxLength","typeId","expense","categoryId","accountId","ngOnInit","expenseId","snapshot","paramMap","get","isNaN","Number","navigate","loadExpense","loadCategories","onSubmit","form","data","updateExpense","id","createExpense","categories","isLoading","getCategories","pipe","subscribe","next","setData","error","setError","getExpenseById","formGroup","reset","create","updateById","selector","standalone","imports","templateUrl","styleUrls","__param"],"sourceRoot":"","sources":["/home/eagold/MyFiles/FASystem/FASystemClient/src/app/pages/expenses/details/details.component.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\n\nimport { Observable, takeUntil, filter } from 'rxjs';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { DestroyService } from '@core/services';\nimport { AccountsState, AccountsService } from '@features/accounts';\nimport { Loadable } from '@core/helpers';\nimport {\n  TransactionCategoryInterface,\n  TransactionCreateInterface,\n  TransactionReadInterface,\n  TransactionsService,\n  TransactionTypesEnum\n} from '@features/transactions';\n\n@Component({\n  selector: 'app-details',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n\n    MatFormFieldModule,\n    MatSelectModule,\n    MatInputModule,\n    MatButtonModule\n  ],\n  templateUrl: './details.component.html',\n  styleUrls: ['./details.component.scss']\n})\nexport class DetailsComponent {\n  accounts$ = this.accountsState.data$;\n  categories = new Loadable<TransactionCategoryInterface[]>([], false);\n  expense = new Loadable<TransactionReadInterface | null>(null, false);\n\n  formGroup: FormGroup = this.formBuilder.group({\n    amount: [null, Validators.required],\n    description: [null, [Validators.required, Validators.maxLength(500)]],\n    typeId: [TransactionTypesEnum.expense, Validators.required],\n    categoryId: [null, [Validators.required]],\n    accountId: [null, [Validators.required]]\n  });\n\n  constructor(\n    @Inject(DestroyService) private readonly viewDestroyed$: Observable<void>,\n    private readonly formBuilder: FormBuilder,\n    private readonly transactionsService: TransactionsService,\n    private readonly accountsState: AccountsState,\n    private readonly accountsService: AccountsService,\n    private readonly router: Router,\n    private readonly route: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    const expenseId = this.route.snapshot.paramMap.get('id');\n\n    if (expenseId) {\n      if (isNaN(Number(expenseId))) {\n        this.router.navigate(['./']);\n      } else {\n        this.loadExpense(Number(expenseId));\n      }\n    }\n\n    this.loadCategories();\n  }\n\n  onSubmit(form: any): void {\n    if (this.expense.data) {\n      this.updateExpense(this.expense.data.id, form);\n    } else {\n      this.createExpense(form);\n    }\n  }\n\n  loadCategories(): void {\n    this.categories.isLoading = true;\n    this.transactionsService.getCategories(TransactionTypesEnum.expense)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe({\n        next: data => this.categories.setData(data),\n        error: error => this.categories.setError(error)\n      });\n  }\n\n  loadExpense(id: number): void {\n    this.expense.isLoading = true;\n    this.transactionsService.getExpenseById(id)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe(expense => {\n        this.expense.setData(expense);\n        this.formGroup.reset(expense);\n      });\n  }\n\n  createExpense(expense: TransactionCreateInterface): void {\n    this.expense.isLoading = true;\n    this.transactionsService.create(expense)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe(expense => {\n        this.expense.setData(expense);\n        this.formGroup.reset(expense);\n      });\n  }\n\n  updateExpense(id: number, expense: TransactionCreateInterface): void {\n    this.expense.isLoading = true;\n    this.transactionsService.updateById(id, expense)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe(expense => {\n        this.expense.setData(expense);\n        this.formGroup.reset(expense);\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}