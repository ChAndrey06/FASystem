{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { AgGridModule } from 'ag-grid-angular';\nimport { takeUntil } from 'rxjs';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { Loadable } from '@core/helpers';\nimport { DestroyService } from '@core/services';\nimport { TemplateRendererComponent } from '@shared';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@features/transactions\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ag-grid-angular\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/icon\";\nimport * as i6 from \"rxjs\";\nconst _c0 = [\"controlsTemplate\"];\nfunction ExpensesComponent_ng_template_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵlistener(\"click\", function ExpensesComponent_ng_template_12_Template_div_click_0_listener($event) {\n      return $event.stopPropagation();\n    });\n    i0.ɵɵelementStart(1, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function ExpensesComponent_ng_template_12_Template_button_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const rowData_r2 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onRowEditClicked(rowData_r2));\n    });\n    i0.ɵɵelementStart(2, \"mat-icon\");\n    i0.ɵɵtext(3, \"edit\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(4, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function ExpensesComponent_ng_template_12_Template_button_click_4_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const rowData_r2 = restoredCtx.$implicit;\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.onRowDeleteClicked(rowData_r2));\n    });\n    i0.ɵɵelementStart(5, \"mat-icon\");\n    i0.ɵɵtext(6, \"delete\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nexport class ExpensesComponent {\n  constructor(viewDestroyed$, transactionsService, router, route) {\n    this.viewDestroyed$ = viewDestroyed$;\n    this.transactionsService = transactionsService;\n    this.router = router;\n    this.route = route;\n    this.expenses = new Loadable(null, false);\n    this.selected = [];\n    this.defaultColDef = {\n      resizable: true,\n      sortable: true,\n      filter: true\n    };\n    this.gridOptions = {\n      suppressRowClickSelection: true,\n      rowHeight: 48\n    };\n  }\n  ngOnInit() {\n    this.setCoumnDefs();\n    this.updateExpenses();\n  }\n  setCoumnDefs() {\n    this.columnDefs = [{\n      field: 'id',\n      headerCheckboxSelection: true,\n      checkboxSelection: true\n    }, {\n      field: 'amount'\n    }, {\n      field: 'description'\n    }, {\n      field: 'categoryName',\n      headerName: 'Category'\n    }, {\n      field: 'accountName',\n      headerName: 'Account'\n    }, {\n      headerName: 'Controls',\n      pinned: 'right',\n      cellRenderer: TemplateRendererComponent,\n      cellRendererParams: {\n        template: this.controlsTemplate\n      }\n    }];\n  }\n  onGridReady(params) {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n  }\n  onFirstDataRendered() {\n    this.gridColumnApi.autoSizeAllColumns();\n  }\n  onSelectionChanged(event) {\n    this.selected = event.api.getSelectedRows();\n  }\n  onNewClicked() {\n    this.router.navigate(['new'], {\n      relativeTo: this.route\n    });\n  }\n  onDeleteClicked() {\n    // this.deleteMany(this.selected);\n    // this.resetSelected();\n  }\n  onRowDeleteClicked(expense) {\n    // this.deleteMany([expense]);\n  }\n  onRowClicked(expense) {\n    this.router.navigateByUrl(`./${expense.id}`, {\n      relativeTo: this.activatedRoute\n    });\n  }\n  onRowEditClicked(expense) {}\n  // onDetailsSave(bike: BikeInterface): void {\n  //   if (bike.id) {\n  //     this.bikesService.update(bike, bike.id)\n  //       .subscribe({\n  //         next: () => this.updateBikes()\n  //       });\n  //   }\n  //   else {\n  //     this.bikesService.create(bike)\n  //       .subscribe();\n  //   }\n  // }\n  resetSelected() {\n    this.selected = [];\n  }\n  // openDetails(transaction: TransactionReadInterface): void {\n  //   const dialogRef = this.dialog.open(BikeDetailsFormComponent, { maxHeight: '80vh', width: '80vw', maxWidth: '500px' });\n  //   const instance = dialogRef.componentInstance;\n  //   instance.bike = bike;\n  //   instance.saveEvent.subscribe(b => {\n  //     dialogRef.close();\n  //     this.onDetailsSave(b);\n  //   });\n  // }\n  updateExpenses() {\n    this.expenses.isLoading = true;\n    this.transactionsService.getAll().pipe(takeUntil(this.viewDestroyed$)).subscribe({\n      next: data => {\n        this.expenses.setData(data);\n      },\n      error: error => this.expenses.setError(error)\n    });\n  }\n}\nExpensesComponent.ɵfac = function ExpensesComponent_Factory(t) {\n  return new (t || ExpensesComponent)(i0.ɵɵdirectiveInject(DestroyService), i0.ɵɵdirectiveInject(i1.TransactionsService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\nExpensesComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ExpensesComponent,\n  selectors: [[\"app-expenses\"]],\n  viewQuery: function ExpensesComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.controlsTemplate = _t.first);\n    }\n  },\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([DestroyService]), i0.ɵɵStandaloneFeature],\n  decls: 14,\n  vars: 5,\n  consts: [[1, \"container\"], [1, \"header\"], [1, \"table-controls\"], [\"mat-fab\", \"\", \"color\", \"primary\", 3, \"click\"], [\"mat-fab\", \"\", \"color\", \"primary\", 3, \"disabled\", \"click\"], [\"rowSelection\", \"multiple\", 1, \"ag-theme-alpine\", \"grid\", 3, \"rowData\", \"columnDefs\", \"defaultColDef\", \"gridOptions\", \"rowClicked\", \"gridReady\", \"firstDataRendered\", \"selectionChanged\"], [\"controlsTemplate\", \"\"], [1, \"row-controls\", 3, \"click\"], [\"mat-icon-button\", \"\", \"color\", \"primary\", 3, \"click\"]],\n  template: function ExpensesComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function ExpensesComponent_Template_button_click_3_listener() {\n        return ctx.onNewClicked();\n      });\n      i0.ɵɵelementStart(4, \"mat-icon\");\n      i0.ɵɵtext(5, \"add\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function ExpensesComponent_Template_button_click_6_listener() {\n        return ctx.onDeleteClicked();\n      });\n      i0.ɵɵelementStart(7, \"mat-icon\");\n      i0.ɵɵtext(8, \"delete\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(9, \"h1\");\n      i0.ɵɵtext(10, \"Expenses\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(11, \"ag-grid-angular\", 5);\n      i0.ɵɵlistener(\"rowClicked\", function ExpensesComponent_Template_ag_grid_angular_rowClicked_11_listener($event) {\n        return ctx.onRowClicked($event.data);\n      })(\"gridReady\", function ExpensesComponent_Template_ag_grid_angular_gridReady_11_listener($event) {\n        return ctx.onGridReady($event);\n      })(\"firstDataRendered\", function ExpensesComponent_Template_ag_grid_angular_firstDataRendered_11_listener() {\n        return ctx.onFirstDataRendered();\n      })(\"selectionChanged\", function ExpensesComponent_Template_ag_grid_angular_selectionChanged_11_listener($event) {\n        return ctx.onSelectionChanged($event);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(12, ExpensesComponent_ng_template_12_Template, 7, 0, \"ng-template\", null, 6, i0.ɵɵtemplateRefExtractor);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"disabled\", !ctx.selected.length);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"rowData\", ctx.expenses.data)(\"columnDefs\", ctx.columnDefs)(\"defaultColDef\", ctx.defaultColDef)(\"gridOptions\", ctx.gridOptions);\n    }\n  },\n  dependencies: [CommonModule, AgGridModule, i3.AgGridAngular, MatButtonModule, i4.MatIconButton, i4.MatFabButton, MatIconModule, i5.MatIcon],\n  styles: [\".container[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 20px;\\n  padding: 20px;\\n  box-sizing: border-box;\\n  max-height: calc(100vh - 75px);\\n}\\n.container[_ngcontent-%COMP%]    > .header[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n}\\n.container[_ngcontent-%COMP%]    > .header[_ngcontent-%COMP%]    > .table-controls[_ngcontent-%COMP%] {\\n  display: flex;\\n  gap: 10px;\\n}\\n.container[_ngcontent-%COMP%]    > .header[_ngcontent-%COMP%]    > h1[_ngcontent-%COMP%] {\\n  margin: 0;\\n  font-weight: bold;\\n}\\n.container[_ngcontent-%COMP%]    > .grid[_ngcontent-%COMP%] {\\n  height: 100vh;\\n}\\n.container[_ngcontent-%COMP%]   .row-controls[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  height: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvZXhwZW5zZXMvZXhwZW5zZXMuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxTQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsOEJBQUE7QUFDRjtBQUNJO0VBQ0EsYUFBQTtFQUNBLDhCQUFBO0VBQ0EsbUJBQUE7QUFDSjtBQUNJO0VBQ0UsYUFBQTtFQUNBLFNBQUE7QUFDTjtBQUVJO0VBQ0UsU0FBQTtFQUNBLGlCQUFBO0FBQU47QUFJRTtFQUNFLGFBQUE7QUFGSjtBQUtFO0VBQ0UsYUFBQTtFQUNBLHVCQUFBO0VBQ0EsbUJBQUE7RUFDQSxZQUFBO0FBSEoiLCJzb3VyY2VzQ29udGVudCI6WyIuY29udGFpbmVyIHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZ2FwOiAyMHB4O1xuICBwYWRkaW5nOiAyMHB4O1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICBtYXgtaGVpZ2h0OiBjYWxjKDEwMHZoIC0gNzVweCk7XG5cbiAgICA+IC5oZWFkZXIge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cbiAgICA+IC50YWJsZS1jb250cm9scyB7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAgZ2FwOiAxMHB4O1xuICAgIH1cblxuICAgID4gaDEge1xuICAgICAgbWFyZ2luOiAwO1xuICAgICAgZm9udC13ZWlnaHQ6IGJvbGQ7XG4gICAgfVxuICB9XG5cbiAgPiAuZ3JpZCB7XG4gICAgaGVpZ2h0OiAxMDB2aDtcbiAgfVxuXG4gIC5yb3ctY29udHJvbHMge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gIH1cbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["CommonModule","AgGridModule","takeUntil","MatButtonModule","MatIconModule","Loadable","DestroyService","TemplateRendererComponent","i0","$event","ExpensesComponent","constructor","viewDestroyed$","transactionsService","router","route","resizable","sortable","filter","suppressRowClickSelection","rowHeight","ngOnInit","setCoumnDefs","updateExpenses","columnDefs","field","headerCheckboxSelection","checkboxSelection","headerName","pinned","cellRenderer","cellRendererParams","template","controlsTemplate","onGridReady","params","gridApi","api","gridColumnApi","columnApi","onFirstDataRendered","autoSizeAllColumns","onSelectionChanged","event","selected","getSelectedRows","onNewClicked","navigate","relativeTo","onDeleteClicked","onRowDeleteClicked","expense","onRowClicked","navigateByUrl","id","activatedRoute","onRowEditClicked","resetSelected","expenses","isLoading","getAll","pipe","subscribe","next","data","setData","error","setError","selectors","viewQuery","decls","vars","consts","ctx","styles"],"sourceRoot":"","sources":["/home/eagold/MyFiles/FASystem/FASystemClient/src/app/pages/expenses/expenses.component.ts","/home/eagold/MyFiles/FASystem/FASystemClient/src/app/pages/expenses/expenses.component.html"],"sourcesContent":["import { Component, Inject, TemplateRef, ViewChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { AgGridModule } from 'ag-grid-angular';\nimport { ColDef, ColumnApi, GridApi, GridReadyEvent, SelectionChangedEvent } from 'ag-grid-community';\n\nimport { Observable, takeUntil } from 'rxjs';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { Loadable } from '@core/helpers';\nimport { DestroyService } from '@core/services';\nimport { TemplateRendererComponent } from '@shared';\nimport { TransactionReadInterface, TransactionsService } from '@features/transactions';\n\n@Component({\n  selector: 'app-expenses',\n  standalone: true,\n  imports: [\n    CommonModule,\n\n    AgGridModule,\n\n    MatButtonModule,\n    MatIconModule,\n  ],\n  providers: [\n    DestroyService\n  ],\n  templateUrl: 'expenses.component.html',\n  styleUrls: ['expenses.component.scss']\n})\nexport class ExpensesComponent {\n  @ViewChild('controlsTemplate', { static: true }) controlsTemplate!: TemplateRef<any>;\n  expenses = new Loadable<TransactionReadInterface[] | null>(null, false);\n  selected: TransactionReadInterface[] = [];\n\n  gridApi!: GridApi;\n  gridColumnApi!: ColumnApi;\n\n  columnDefs!: ColDef[];\n  defaultColDef = {\n    resizable: true,\n    sortable: true,\n    filter: true\n  };\n  gridOptions = {\n    suppressRowClickSelection: true,\n    rowHeight: 48\n  };\n\n  constructor(\n    @Inject(DestroyService) private readonly viewDestroyed$: Observable<void>,\n    private readonly transactionsService: TransactionsService,\n    private readonly router: Router,\n    private route: ActivatedRoute,\n  ) { }\n\n  ngOnInit(): void {\n    this.setCoumnDefs();\n    this.updateExpenses();\n  }\n\n  setCoumnDefs(): void {\n    this.columnDefs = [\n      {\n        field: 'id',\n        headerCheckboxSelection: true,\n        checkboxSelection: true,\n      },\n      { field: 'amount' },\n      { field: 'description' },\n      { \n        field: 'categoryName',\n        headerName: 'Category'\n      },\n      { \n        field: 'accountName',\n        headerName: 'Account'\n      },\n      {\n        headerName: 'Controls',\n        pinned: 'right',\n        cellRenderer: TemplateRendererComponent,\n        cellRendererParams: {\n          template: this.controlsTemplate\n        }\n      }\n    ]\n  }\n\n  onGridReady(params: GridReadyEvent): void {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n  }\n\n  onFirstDataRendered(): void {\n    this.gridColumnApi.autoSizeAllColumns();\n  }\n\n  onSelectionChanged(event: SelectionChangedEvent) {\n    this.selected = event.api.getSelectedRows();\n  }\n\n  onNewClicked() {\n    this.router.navigate(['new'], { relativeTo: this.route });\n  }\n\n  onDeleteClicked() {\n    // this.deleteMany(this.selected);\n    // this.resetSelected();\n  }\n\n  onRowDeleteClicked(expense: TransactionReadInterface): void {\n    // this.deleteMany([expense]);\n  }\n\n  onRowClicked(expense: TransactionReadInterface): void {\n    this.router.navigateByUrl(`./${expense.id}`, {relativeTo: this.activatedRoute});\n  }\n\n  onRowEditClicked(expense: TransactionReadInterface): void {\n    \n  }\n\n  // onDetailsSave(bike: BikeInterface): void {\n  //   if (bike.id) {\n  //     this.bikesService.update(bike, bike.id)\n  //       .subscribe({\n  //         next: () => this.updateBikes()\n  //       });\n  //   }\n  //   else {\n  //     this.bikesService.create(bike)\n  //       .subscribe();\n  //   }\n  // }\n\n  resetSelected(): void {\n    this.selected = [];\n  }\n\n  // openDetails(transaction: TransactionReadInterface): void {\n  //   const dialogRef = this.dialog.open(BikeDetailsFormComponent, { maxHeight: '80vh', width: '80vw', maxWidth: '500px' });\n  //   const instance = dialogRef.componentInstance;\n\n  //   instance.bike = bike;\n  //   instance.saveEvent.subscribe(b => {\n  //     dialogRef.close();\n  //     this.onDetailsSave(b);\n  //   });\n  // }\n\n  updateExpenses(): void {\n    this.expenses.isLoading = true;\n    this.transactionsService.getAll()\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe({\n        next: data => {\n          this.expenses.setData(data);\n        },\n        error: error => this.expenses.setError(error)\n      });\n  }\n\n  // deleteMany(bike: BikeInterface[]): void {\n  //   this.bikesService.deleteMany(bike.map(b => b.id))\n  //     .pipe(takeUntil(this.viewDestroyed$))\n  //     .subscribe({\n  //       next: () => this.updateBikes()\n  //     });\n  // }\n}\n","<div class=\"container\">\n  <div class=\"header\">\n    <div class=\"table-controls\">\n      <button mat-fab color=\"primary\" (click)=\"onNewClicked()\">\n        <mat-icon>add</mat-icon>\n      </button>\n      <button mat-fab color=\"primary\" (click)=\"onDeleteClicked()\" [disabled]=\"!selected.length\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </div>\n    <h1>Expenses</h1>\n  </div>\n\n  <ag-grid-angular \n    class=\"ag-theme-alpine grid\" \n    [rowData]=\"expenses.data\" \n    [columnDefs]=\"columnDefs\" \n    (rowClicked)=\"onRowClicked($event.data)\"\n    [defaultColDef]=\"defaultColDef\" \n    [gridOptions]=\"gridOptions\"\n    (gridReady)=\"onGridReady($event)\"\n    (firstDataRendered)=\"onFirstDataRendered()\" \n    (selectionChanged)=\"onSelectionChanged($event)\" \n    rowSelection=\"multiple\">\n  </ag-grid-angular>\n</div>\n\n<ng-template #controlsTemplate let-rowData>\n  <div class=\"row-controls\" (click)=\"$event.stopPropagation()\">\n    <button mat-icon-button color=\"primary\" (click)=\"onRowEditClicked(rowData)\">\n      <mat-icon>edit</mat-icon>\n    </button>\n    <button mat-icon-button color=\"primary\" (click)=\"onRowDeleteClicked(rowData)\">\n      <mat-icon>delete</mat-icon>\n    </button>\n  </div>\n</ng-template>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}