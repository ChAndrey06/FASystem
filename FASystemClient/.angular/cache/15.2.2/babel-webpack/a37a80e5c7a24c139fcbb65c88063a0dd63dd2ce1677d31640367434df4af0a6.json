{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nlet TransactionDetailsComponent = class TransactionDetailsComponent {\n  constructor(viewDestroyed$, formBuilder, transactionsService, accountsState, router, route) {\n    this.viewDestroyed$ = viewDestroyed$;\n    this.formBuilder = formBuilder;\n    this.transactionsService = transactionsService;\n    this.accountsState = accountsState;\n    this.router = router;\n    this.route = route;\n    this.accounts$ = this.accountsState.data$;\n    this.categories = new Loadable([], false);\n    this.expense = new Loadable(null, false);\n    this.formGroup = this.formBuilder.group({\n      amount: [null, Validators.required],\n      description: [null, [Validators.required, Validators.maxLength(500)]],\n      typeId: [TransactionTypesEnum.expense, Validators.required],\n      categoryId: [null, [Validators.required]],\n      accountId: [null, [Validators.required]]\n    });\n  }\n  ngOnInit() {\n    const expenseId = this.route.snapshot.paramMap.get('id');\n    if (expenseId) {\n      if (isNaN(Number(expenseId))) {\n        this.router.navigate(['./']);\n      } else {\n        this.loadExpense(Number(expenseId));\n      }\n    }\n    this.loadCategories();\n  }\n  onSubmit(form) {\n    console.log(form);\n    if (this.expense.data) {\n      this.updateExpense(this.expense.data.id, form);\n    } else {\n      this.createExpense(form);\n    }\n  }\n  onNewClicked() {\n    this.expense.setData(null);\n    this.formGroup.reset({\n      typeId: TransactionTypesEnum.expense\n    });\n  }\n  onViewAllClicked() {\n    this.router.navigate(['expenses']);\n  }\n  loadCategories() {\n    this.categories.isLoading = true;\n    this.transactionsService.getCategories(TransactionTypesEnum.expense).pipe(takeUntil(this.viewDestroyed$)).subscribe({\n      next: data => this.categories.setData(data),\n      error: error => this.categories.setError(error)\n    });\n  }\n  loadExpense(id) {\n    this.expense.isLoading = true;\n    this.transactionsService.getExpenseById(id).pipe(takeUntil(this.viewDestroyed$)).subscribe(expense => {\n      this.expense.setData(expense);\n      this.formGroup.reset(expense);\n    });\n  }\n  createExpense(expense) {\n    this.expense.isLoading = true;\n    this.transactionsService.create(expense).pipe(takeUntil(this.viewDestroyed$)).subscribe(expense => {\n      this.expense.setData(expense);\n      this.formGroup.reset(expense);\n    });\n  }\n  updateExpense(id, expense) {\n    this.expense.isLoading = true;\n    this.transactionsService.updateById(id, expense).pipe(takeUntil(this.viewDestroyed$)).subscribe(expense => {\n      this.expense.setData(expense);\n      this.formGroup.reset(expense);\n    });\n  }\n};\nTransactionDetailsComponent = __decorate([Component({\n  selector: 'app-transaction-details',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './transaction-details.component.html',\n  styleUrls: ['./transaction-details.component.scss']\n}), __param(0, Inject(DestroyService))], TransactionDetailsComponent);\nexport { TransactionDetailsComponent };","map":{"version":3,"mappings":"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","names":["Component","CommonModule","TransactionDetailsComponent","constructor","viewDestroyed$","formBuilder","transactionsService","accountsState","router","route","data$","Loadable","group","amount","Validators","required","description","maxLength","typeId","TransactionTypesEnum","expense","categoryId","accountId","ngOnInit","expenseId","snapshot","paramMap","get","isNaN","Number","navigate","loadExpense","loadCategories","onSubmit","form","console","log","data","updateExpense","id","createExpense","onNewClicked","setData","formGroup","reset","onViewAllClicked","categories","isLoading","getCategories","pipe","takeUntil","subscribe","next","error","setError","getExpenseById","create","updateById","selector","standalone","imports","templateUrl","styleUrls","__param","DestroyService"],"sourceRoot":"","sources":["/home/eagold/MyFiles/FASystem/FASystemClient/src/app/features/transactions/components/transaction-details/transaction-details.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-transaction-details',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './transaction-details.component.html',\n  styleUrls: ['./transaction-details.component.scss']\n})\nexport class TransactionDetailsComponent {\n  accounts$ = this.accountsState.data$;\n  categories = new Loadable<TransactionCategoryInterface[]>([], false);\n  expense = new Loadable<TransactionReadInterface | null>(null, false);\n\n  formGroup: FormGroup = this.formBuilder.group({\n    amount: [null, Validators.required],\n    description: [null, [Validators.required, Validators.maxLength(500)]],\n    typeId: [TransactionTypesEnum.expense, Validators.required],\n    categoryId: [null, [Validators.required]],\n    accountId: [null, [Validators.required]]\n  });\n\n  constructor(\n    @Inject(DestroyService) private readonly viewDestroyed$: Observable<void>,\n    private readonly formBuilder: FormBuilder,\n    private readonly transactionsService: TransactionsService,\n    private readonly accountsState: AccountsState,\n    private readonly router: Router,\n    private readonly route: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    const expenseId = this.route.snapshot.paramMap.get('id');\n\n    if (expenseId) {\n      if (isNaN(Number(expenseId))) {\n        this.router.navigate(['./']);\n      } else {\n        this.loadExpense(Number(expenseId));\n      }\n    }\n\n    this.loadCategories();\n  }\n\n  onSubmit(form: any): void {\n    console.log(form)\n    if (this.expense.data) {\n      this.updateExpense(this.expense.data.id, form);\n    } else {\n      this.createExpense(form);\n    }\n  }\n\n  onNewClicked(): void {\n    this.expense.setData(null);\n    this.formGroup.reset({ typeId: TransactionTypesEnum.expense });\n  }\n\n  onViewAllClicked(): void {\n    this.router.navigate(['expenses']);\n  }\n\n  loadCategories(): void {\n    this.categories.isLoading = true;\n    this.transactionsService.getCategories(TransactionTypesEnum.expense)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe({\n        next: data => this.categories.setData(data),\n        error: error => this.categories.setError(error)\n      });\n  }\n\n  loadExpense(id: number): void {\n    this.expense.isLoading = true;\n    this.transactionsService.getExpenseById(id)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe(expense => {\n        this.expense.setData(expense);\n        this.formGroup.reset(expense);\n      });\n  }\n\n  createExpense(expense: TransactionCreateInterface): void {\n    this.expense.isLoading = true;\n    this.transactionsService.create(expense)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe(expense => {\n        this.expense.setData(expense);\n        this.formGroup.reset(expense);\n      });\n  }\n\n  updateExpense(id: number, expense: TransactionCreateInterface): void {\n    this.expense.isLoading = true;\n    this.transactionsService.updateById(id, expense)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe(expense => {\n        this.expense.setData(expense);\n        this.formGroup.reset(expense);\n      });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}