{"ast":null,"code":"import { tap } from 'rxjs';\nimport { TransactionTypesEnum } from '../enums';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@core/services\";\nimport * as i2 from \"@features/accounts\";\nimport * as i3 from \"@angular/router\";\nexport class TransactionsService {\n  constructor(apiService, accountsService, router) {\n    this.apiService = apiService;\n    this.accountsService = accountsService;\n    this.router = router;\n  }\n  getAll(typeId) {\n    return this.apiService.get(`transactions?typeId=${typeId || ''}`);\n  }\n  getCategories(typeId, filter) {\n    const url = `transactions/categories?transactionTypeId=${typeId || ''}&filter=${filter}`;\n    return this.apiService.get(url);\n  }\n  create(transaction) {\n    return this.apiService.post('transactions', transaction).pipe(tap(() => this.accountsService.update().subscribe()));\n  }\n  getById(id, typeId) {\n    const url = `transactions/${id}?typeId=${typeId || ''}`;\n    return this.apiService.get(url.toString());\n  }\n  getExpenseById(id) {\n    return this.getById(id, TransactionTypesEnum.expense);\n  }\n  getIncomeById(id) {\n    return this.getById(id, TransactionTypesEnum.income);\n  }\n  updateById(id, transaction) {\n    return this.apiService.put(`transactions/${id}`, transaction).pipe(tap(() => this.accountsService.update().subscribe()));\n  }\n}\nTransactionsService.ɵfac = function TransactionsService_Factory(t) {\n  return new (t || TransactionsService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.AccountsService), i0.ɵɵinject(i3.Router));\n};\nTransactionsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TransactionsService,\n  factory: TransactionsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,GAAG,QAAQ,MAAM;AAI1B,SAASC,oBAAoB,QAAQ,UAAU;;;;;AAM/C,OAAM,MAAOC,mBAAmB;EAC9BC,YACmBC,UAAsB,EACtBC,eAAgC,EACzCC,MAAc;IAFL,eAAU,GAAVF,UAAU;IACV,oBAAe,GAAfC,eAAe;IACxB,WAAM,GAANC,MAAM;EACZ;EAEGC,MAAM,CAACC,MAAmC;IAC/C,OAAO,IAAI,CAACJ,UAAU,CAACK,GAAG,CAA6B,uBAAuBD,MAAM,IAAI,EAAE,EAAE,CAAC;EAC/F;EAEOE,aAAa,CAACF,MAAmC,EAAEG,MAAe;IACvE,MAAMC,GAAG,GAAG,6CAA6CJ,MAAM,IAAI,EAAE,WAAWG,MAAO,EAAE;IACzF,OAAO,IAAI,CAACP,UAAU,CAACK,GAAG,CAAqCG,GAAG,CAAC;EACrE;EAEOC,MAAM,CAACC,WAAuC;IACnD,OAAO,IAAI,CAACV,UAAU,CAACW,IAAI,CAA2B,cAAc,EAAED,WAAW,CAAC,CAC/EE,IAAI,CAAChB,GAAG,CAAC,MAAM,IAAI,CAACK,eAAe,CAACY,MAAM,EAAE,CAACC,SAAS,EAAE,CAAC,CAAC;EAC/D;EAEOC,OAAO,CAACC,EAAU,EAAEZ,MAA6B;IACtD,MAAMI,GAAG,GAAG,gBAAgBQ,EAAE,WAAWZ,MAAM,IAAI,EAAE,EAAE;IACvD,OAAO,IAAI,CAACJ,UAAU,CAACK,GAAG,CAA2BG,GAAG,CAACS,QAAQ,EAAE,CAAC;EACtE;EAEOC,cAAc,CAACF,EAAU;IAC9B,OAAO,IAAI,CAACD,OAAO,CAACC,EAAE,EAAEnB,oBAAoB,CAACsB,OAAO,CAAC;EACvD;EAEOC,aAAa,CAACJ,EAAU;IAC7B,OAAO,IAAI,CAACD,OAAO,CAACC,EAAE,EAAEnB,oBAAoB,CAACwB,MAAM,CAAC;EACtD;EAEOC,UAAU,CAACN,EAAU,EAAEN,WAAuC;IACnE,OAAO,IAAI,CAACV,UAAU,CAACuB,GAAG,CAA2B,gBAAgBP,EAAE,EAAE,EAAEN,WAAW,CAAC,CACpFE,IAAI,CAAChB,GAAG,CAAC,MAAM,IAAI,CAACK,eAAe,CAACY,MAAM,EAAE,CAACC,SAAS,EAAE,CAAC,CAAC;EAC/D;;AArCWhB,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAA0B,SAAnB1B,mBAAmB;EAAA2B,YAFlB;AAAM","names":["tap","TransactionTypesEnum","TransactionsService","constructor","apiService","accountsService","router","getAll","typeId","get","getCategories","filter","url","create","transaction","post","pipe","update","subscribe","getById","id","toString","getExpenseById","expense","getIncomeById","income","updateById","put","factory","providedIn"],"sourceRoot":"","sources":["/home/eagold/MyFiles/FASystem/FASystemClient/src/app/features/transactions/services/transactions.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { tap } from 'rxjs';\n\nimport { ApiService } from '@core/services';\nimport { AccountsService } from '@features/accounts';\nimport { TransactionTypesEnum } from '../enums';\nimport { TransactionCategoryReadInterface, TransactionCreateInterface, TransactionReadInterface } from '../interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransactionsService {\n  constructor(\n    private readonly apiService: ApiService,\n    private readonly accountsService: AccountsService,\n    private router: Router\n  ) { }\n\n  public getAll(typeId: TransactionTypesEnum | null) {\n    return this.apiService.get<TransactionReadInterface[]>(`transactions?typeId=${typeId || ''}`);\n  }\n\n  public getCategories(typeId: TransactionTypesEnum | null, filter?: string) {\n    const url = `transactions/categories?transactionTypeId=${typeId || ''}&filter=${filter }`\n    return this.apiService.get<TransactionCategoryReadInterface[]>(url);\n  }\n\n  public create(transaction: TransactionCreateInterface) {\n    return this.apiService.post<TransactionReadInterface>('transactions', transaction)\n      .pipe(tap(() => this.accountsService.update().subscribe()));\n  }\n\n  public getById(id: number, typeId?: TransactionTypesEnum) {\n    const url = `transactions/${id}?typeId=${typeId || ''}`\n    return this.apiService.get<TransactionReadInterface>(url.toString());\n  }\n\n  public getExpenseById(id: number) {\n    return this.getById(id, TransactionTypesEnum.expense);\n  }\n\n  public getIncomeById(id: number) {\n    return this.getById(id, TransactionTypesEnum.income);\n  }\n\n  public updateById(id: number, transaction: TransactionCreateInterface) {\n    return this.apiService.put<TransactionReadInterface>(`transactions/${id}`, transaction)\n      .pipe(tap(() => this.accountsService.update().subscribe()));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}