{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { takeUntil } from 'rxjs';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { DestroyService } from '@core/services';\nimport { Loadable } from '@core/helpers';\nimport { TransactionDetailsComponent, TransactionTypesEnum } from '@features/transactions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@features/transactions\";\nimport * as i3 from \"@features/accounts\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"rxjs\";\nexport class DetailsComponent {\n  constructor(viewDestroyed$, formBuilder, transactionsService, accountsState, router, route) {\n    this.viewDestroyed$ = viewDestroyed$;\n    this.formBuilder = formBuilder;\n    this.transactionsService = transactionsService;\n    this.accountsState = accountsState;\n    this.router = router;\n    this.route = route;\n    this.typeId = TransactionTypesEnum.expense;\n    this.accounts$ = this.accountsState.data$;\n    this.categories = new Loadable([], false);\n    this.expense = new Loadable(null, false);\n    this.formGroup = this.formBuilder.group({\n      amount: [null, Validators.required],\n      description: [null, [Validators.required, Validators.maxLength(500)]],\n      typeId: [TransactionTypesEnum.expense, Validators.required],\n      categoryId: [null, [Validators.required]],\n      accountId: [null, [Validators.required]]\n    });\n  }\n  ngOnInit() {\n    const expenseId = this.route.snapshot.paramMap.get('id');\n    if (expenseId) {\n      if (isNaN(Number(expenseId))) {\n        this.router.navigate(['./']);\n      } else {\n        this.loadExpense(Number(expenseId));\n      }\n    }\n    this.loadCategories();\n  }\n  onSubmit(form) {\n    console.log(form);\n    if (this.expense.data) {\n      this.updateExpense(this.expense.data.id, form);\n    } else {\n      this.createExpense(form);\n    }\n  }\n  onNewClicked() {\n    this.expense.setData(null);\n    this.formGroup.reset({\n      typeId: TransactionTypesEnum.expense\n    });\n  }\n  onViewAllClicked() {\n    this.router.navigate(['expenses']);\n  }\n  loadCategories() {\n    this.categories.isLoading = true;\n    this.transactionsService.getCategories(TransactionTypesEnum.expense).pipe(takeUntil(this.viewDestroyed$)).subscribe({\n      next: data => this.categories.setData(data),\n      error: error => this.categories.setError(error)\n    });\n  }\n  loadExpense(id) {\n    this.expense.isLoading = true;\n    this.transactionsService.getExpenseById(id).pipe(takeUntil(this.viewDestroyed$)).subscribe(expense => {\n      this.expense.setData(expense);\n      this.formGroup.reset(expense);\n    });\n  }\n  createExpense(expense) {\n    this.expense.isLoading = true;\n    this.transactionsService.create(expense).pipe(takeUntil(this.viewDestroyed$)).subscribe(expense => {\n      this.expense.setData(expense);\n      this.formGroup.reset(expense);\n    });\n  }\n  updateExpense(id, expense) {\n    this.expense.isLoading = true;\n    this.transactionsService.updateById(id, expense).pipe(takeUntil(this.viewDestroyed$)).subscribe(expense => {\n      this.expense.setData(expense);\n      this.formGroup.reset(expense);\n    });\n  }\n}\nDetailsComponent.ɵfac = function DetailsComponent_Factory(t) {\n  return new (t || DetailsComponent)(i0.ɵɵdirectiveInject(DestroyService), i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.TransactionsService), i0.ɵɵdirectiveInject(i3.AccountsState), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i4.ActivatedRoute));\n};\nDetailsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DetailsComponent,\n  selectors: [[\"app-details\"]],\n  standalone: true,\n  features: [i0.ɵɵStandaloneFeature],\n  decls: 1,\n  vars: 0,\n  consts: [[3, \"typeId\"]],\n  template: function DetailsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"app-transaction-details\", 0);\n    }\n  },\n  dependencies: [CommonModule, FormsModule, ReactiveFormsModule, MatFormFieldModule, MatSelectModule, MatInputModule, MatButtonModule, TransactionDetailsComponent],\n  styles: [\".form[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  margin: auto;\\n  align-items: center;\\n  max-width: 400px;\\n}\\n.form[_ngcontent-%COMP%]    > .element[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n.form[_ngcontent-%COMP%]    > .sbumit[_ngcontent-%COMP%] {\\n  width: 100%;\\n  display: flex;\\n  justify-content: center;\\n  gap: 10px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvZXhwZW5zZXMvZGV0YWlscy9kZXRhaWxzLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsWUFBQTtFQUNBLG1CQUFBO0VBQ0EsZ0JBQUE7QUFDRjtBQUNFO0VBQ0UsV0FBQTtBQUNKO0FBRUU7RUFDRSxXQUFBO0VBQ0EsYUFBQTtFQUNBLHVCQUFBO0VBQ0EsU0FBQTtBQUFKIiwic291cmNlc0NvbnRlbnQiOlsiLmZvcm0ge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBtYXJnaW46IGF1dG87XG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gIG1heC13aWR0aDogNDAwcHg7XG5cbiAgPiAuZWxlbWVudCB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cblxuICA+IC5zYnVtaXQge1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgZ2FwOiAxMHB4O1xuICB9XG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["CommonModule","FormsModule","ReactiveFormsModule","Validators","takeUntil","MatFormFieldModule","MatSelectModule","MatInputModule","MatButtonModule","DestroyService","Loadable","TransactionDetailsComponent","TransactionTypesEnum","DetailsComponent","constructor","viewDestroyed$","formBuilder","transactionsService","accountsState","router","route","expense","data$","group","amount","required","description","maxLength","typeId","categoryId","accountId","ngOnInit","expenseId","snapshot","paramMap","get","isNaN","Number","navigate","loadExpense","loadCategories","onSubmit","form","console","log","data","updateExpense","id","createExpense","onNewClicked","setData","formGroup","reset","onViewAllClicked","categories","isLoading","getCategories","pipe","subscribe","next","error","setError","getExpenseById","create","updateById","selectors","standalone","features","decls","vars","consts","template","i0","styles"],"sourceRoot":"","sources":["/home/eagold/MyFiles/FASystem/FASystemClient/src/app/pages/expenses/details/details.component.ts","/home/eagold/MyFiles/FASystem/FASystemClient/src/app/pages/expenses/details/details.component.html"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\n\nimport { Observable, takeUntil } from 'rxjs';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { DestroyService } from '@core/services';\nimport { AccountsState } from '@features/accounts';\nimport { Loadable } from '@core/helpers';\nimport {\n  TransactionCategoryInterface,\n  TransactionCreateInterface,\n  TransactionDetailsComponent,\n  TransactionReadInterface,\n  TransactionsService,\n  TransactionTypesEnum\n} from '@features/transactions';\n\n@Component({\n  selector: 'app-details',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n\n    MatFormFieldModule,\n    MatSelectModule,\n    MatInputModule,\n    MatButtonModule,\n\n    TransactionDetailsComponent\n  ],\n  templateUrl: './details.component.html',\n  styleUrls: ['./details.component.scss']\n})\nexport class DetailsComponent {\n  typeId = TransactionTypesEnum.expense;\n  accounts$ = this.accountsState.data$;\n  categories = new Loadable<TransactionCategoryInterface[]>([], false);\n  expense = new Loadable<TransactionReadInterface | null>(null, false);\n\n  formGroup: FormGroup = this.formBuilder.group({\n    amount: [null, Validators.required],\n    description: [null, [Validators.required, Validators.maxLength(500)]],\n    typeId: [TransactionTypesEnum.expense, Validators.required],\n    categoryId: [null, [Validators.required]],\n    accountId: [null, [Validators.required]]\n  });\n\n  constructor(\n    @Inject(DestroyService) private readonly viewDestroyed$: Observable<void>,\n    private readonly formBuilder: FormBuilder,\n    private readonly transactionsService: TransactionsService,\n    private readonly accountsState: AccountsState,\n    private readonly router: Router,\n    private readonly route: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    const expenseId = this.route.snapshot.paramMap.get('id');\n\n    if (expenseId) {\n      if (isNaN(Number(expenseId))) {\n        this.router.navigate(['./']);\n      } else {\n        this.loadExpense(Number(expenseId));\n      }\n    }\n\n    this.loadCategories();\n  }\n\n  onSubmit(form: any): void {\n    console.log(form)\n    if (this.expense.data) {\n      this.updateExpense(this.expense.data.id, form);\n    } else {\n      this.createExpense(form);\n    }\n  }\n\n  onNewClicked(): void {\n    this.expense.setData(null);\n    this.formGroup.reset({ typeId: TransactionTypesEnum.expense });\n  }\n\n  onViewAllClicked(): void {\n    this.router.navigate(['expenses']);\n  }\n\n  loadCategories(): void {\n    this.categories.isLoading = true;\n    this.transactionsService.getCategories(TransactionTypesEnum.expense)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe({\n        next: data => this.categories.setData(data),\n        error: error => this.categories.setError(error)\n      });\n  }\n\n  loadExpense(id: number): void {\n    this.expense.isLoading = true;\n    this.transactionsService.getExpenseById(id)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe(expense => {\n        this.expense.setData(expense);\n        this.formGroup.reset(expense);\n      });\n  }\n\n  createExpense(expense: TransactionCreateInterface): void {\n    this.expense.isLoading = true;\n    this.transactionsService.create(expense)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe(expense => {\n        this.expense.setData(expense);\n        this.formGroup.reset(expense);\n      });\n  }\n\n  updateExpense(id: number, expense: TransactionCreateInterface): void {\n    this.expense.isLoading = true;\n    this.transactionsService.updateById(id, expense)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe(expense => {\n        this.expense.setData(expense);\n        this.formGroup.reset(expense);\n      });\n  }\n}\n","<!-- <form [formGroup]=\"formGroup\" (ngSubmit)=\"onSubmit(formGroup.value)\" class=\"form\">\n  <mat-form-field class=\"element\">\n    <mat-label>Amount</mat-label>\n    <input matInput type=\"number\" placeholder=\"Amount\" formControlName=\"amount\">\n  </mat-form-field>\n\n  <mat-form-field class=\"element\">\n    <mat-label>Account</mat-label>\n    <mat-select formControlName=\"accountId\">\n      <mat-option *ngFor=\"let account of accounts$ | async\" [value]=\"account.id\">\n        {{account.name}}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n\n  <mat-form-field class=\"element\">\n    <mat-label>Category</mat-label>\n    <mat-select formControlName=\"categoryId\">\n      <mat-option *ngFor=\"let category of categories.data\" [value]=\"category.id\">\n        {{category.name}}\n      </mat-option>\n    </mat-select>\n  </mat-form-field>\n\n  <mat-form-field class=\"element\">\n    <mat-label>Description</mat-label>\n    <textarea matInput placeholder=\"Description...\" formControlName=\"description\"></textarea>\n  </mat-form-field>\n\n  <div class=\"sbumit\">\n    <button \n      mat-raised-button\n      color=\"primary\" \n      type=\"button\" \n      (click)=\"onNewClicked()\"\n      [disabled]=\"formGroup.dirty\"\n    >\n      New\n    </button>\n    <button \n      mat-raised-button \n      color=\"primary\" \n      type=\"submit\" \n      [disabled]=\"!formGroup.valid || !formGroup.dirty\"\n    >\n      Save\n    </button>    \n    <button \n      mat-raised-button\n      color=\"primary\" \n      type=\"button\"\n      (click)=\"onViewAllClicked()\"\n      [disabled]=\"formGroup.dirty\"\n    >\n      View all\n    </button>    \n  </div>\n</form> -->\n\n<app-transaction-details [typeId]></app-transaction-details>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}