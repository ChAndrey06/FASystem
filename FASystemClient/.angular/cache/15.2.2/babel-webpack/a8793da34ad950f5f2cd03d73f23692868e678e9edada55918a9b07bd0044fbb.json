{"ast":null,"code":"import { tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@core/services\";\nimport * as i2 from \"../states\";\nexport class AccountsService {\n  constructor(apiService, accountsState) {\n    this.apiService = apiService;\n    this.accountsState = accountsState;\n  }\n  update() {\n    return this.apiService.get('accounts').pipe(tap(users => this.accountsState.set(users.reduce((prev, next) => {\n      prev.set(next.id, next);\n      return prev;\n    }, new Array()))));\n  }\n}\nAccountsService.ɵfac = function AccountsService_Factory(t) {\n  return new (t || AccountsService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.AccountsState));\n};\nAccountsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AccountsService,\n  factory: AccountsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,GAAG,QAAQ,MAAM;;;;AAQ1B,OAAM,MAAOC,eAAe;EAC1BC,YACmBC,UAAsB,EACtBC,aAA4B;IAD5B,eAAU,GAAVD,UAAU;IACV,kBAAa,GAAbC,aAAa;EAC5B;EAEGC,MAAM;IACX,OAAO,IAAI,CAACF,UAAU,CAACG,GAAG,CAAqB,UAAU,CAAC,CACvDC,IAAI,CACHP,GAAG,CAACQ,KAAK,IAAI,IAAI,CAACJ,aAAa,CAACK,GAAG,CAACD,KAAK,CAACE,MAAM,CAAC,CAACC,IAAI,EAAEC,IAAI,KAAI;MAC9DD,IAAI,CAACF,GAAG,CAACG,IAAI,CAACC,EAAE,EAAED,IAAI,CAAC;MACvB,OAAOD,IAAI;IACb,CAAC,EAAE,IAAIG,KAAK,EAAE,CAAC,CAAC,CAAC,CAClB;EACL;;AAdWb,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;SAAfA,eAAe;EAAAc,SAAfd,eAAe;EAAAe,YAFd;AAAM","names":["tap","AccountsService","constructor","apiService","accountsState","update","get","pipe","users","set","reduce","prev","next","id","Array","factory","providedIn"],"sourceRoot":"","sources":["/home/eagold/MyFiles/FASystem/FASystemClient/src/app/features/accounts/services/accounts.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ApiService } from '@core/services';\nimport { tap } from 'rxjs';\nimport { AccountInterface } from '../interfaces';\n\nimport { AccountsState } from '../states';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AccountsService {\n  constructor(\n    private readonly apiService: ApiService,\n    private readonly accountsState: AccountsState\n  ) { }\n\n  public update() {\n    return this.apiService.get<AccountInterface[]>('accounts')\n      .pipe(\n        tap(users => this.accountsState.set(users.reduce((prev, next) => {\n          prev.set(next.id, next);\n          return prev;\n        }, new Array())))\n      );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}