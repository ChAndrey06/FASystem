{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { AgGridModule } from 'ag-grid-angular';\nimport { takeUntil } from 'rxjs';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { Loadable } from '@core/helpers';\nimport { DestroyService } from '@core/services';\nimport { TemplateRendererComponent } from '@shared';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@features/transactions\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"rxjs\";\nconst _c0 = [\"controlsTemplate\"];\nexport class TransactionsComponent {\n  constructor(viewDestroyed$, transactionsService, router, route) {\n    this.viewDestroyed$ = viewDestroyed$;\n    this.transactionsService = transactionsService;\n    this.router = router;\n    this.route = route;\n    this.expenses = new Loadable(null, false);\n    this.selected = [];\n    this.defaultColDef = {\n      resizable: true,\n      sortable: true,\n      filter: true\n    };\n    this.gridOptions = {\n      suppressRowClickSelection: true,\n      rowHeight: 48\n    };\n  }\n  ngOnInit() {\n    this.setCoumnDefs();\n    this.updateExpenses();\n  }\n  setCoumnDefs() {\n    this.columnDefs = [{\n      field: 'id',\n      headerCheckboxSelection: true,\n      checkboxSelection: true\n    }, {\n      field: 'amount'\n    }, {\n      field: 'description'\n    }, {\n      field: 'categoryName',\n      headerName: 'Category'\n    }, {\n      field: 'accountName',\n      headerName: 'Account'\n    }, {\n      field: 'typeId',\n      headerName: 'Type Id',\n      hide: true\n    }, {\n      headerName: 'Controls',\n      pinned: 'right',\n      cellRenderer: TemplateRendererComponent,\n      cellRendererParams: {\n        template: this.controlsTemplate\n      }\n    }];\n  }\n  onGridReady(params) {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n  }\n  onFirstDataRendered() {\n    this.gridColumnApi.autoSizeAllColumns();\n  }\n  onSelectionChanged(event) {\n    this.selected = event.api.getSelectedRows();\n  }\n  onNewClicked() {\n    this.router.navigate(['new'], {\n      relativeTo: this.route\n    });\n  }\n  onRowClicked(expense) {}\n  onRowEditClicked(expense) {\n    this.router.navigate([expense.id], {\n      relativeTo: this.route\n    });\n  }\n  resetSelected() {\n    this.selected = [];\n  }\n  updateExpenses() {\n    this.expenses.isLoading = true;\n    this.transactionsService.getAll().pipe(takeUntil(this.viewDestroyed$)).subscribe({\n      next: data => {\n        this.expenses.setData(data);\n      },\n      error: error => this.expenses.setError(error)\n    });\n  }\n}\nTransactionsComponent.ɵfac = function TransactionsComponent_Factory(t) {\n  return new (t || TransactionsComponent)(i0.ɵɵdirectiveInject(DestroyService), i0.ɵɵdirectiveInject(i1.TransactionsService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\nTransactionsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TransactionsComponent,\n  selectors: [[\"app-transactions\"]],\n  viewQuery: function TransactionsComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.controlsTemplate = _t.first);\n    }\n  },\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([DestroyService]), i0.ɵɵStandaloneFeature],\n  decls: 2,\n  vars: 0,\n  template: function TransactionsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"transactions works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  dependencies: [CommonModule, AgGridModule, MatButtonModule, MatIconModule],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["CommonModule","AgGridModule","takeUntil","MatButtonModule","MatIconModule","Loadable","DestroyService","TemplateRendererComponent","TransactionsComponent","constructor","viewDestroyed$","transactionsService","router","route","resizable","sortable","filter","suppressRowClickSelection","rowHeight","ngOnInit","setCoumnDefs","updateExpenses","columnDefs","field","headerCheckboxSelection","checkboxSelection","headerName","hide","pinned","cellRenderer","cellRendererParams","template","controlsTemplate","onGridReady","params","gridApi","api","gridColumnApi","columnApi","onFirstDataRendered","autoSizeAllColumns","onSelectionChanged","event","selected","getSelectedRows","onNewClicked","navigate","relativeTo","onRowClicked","expense","onRowEditClicked","id","resetSelected","expenses","isLoading","getAll","pipe","subscribe","next","data","setData","error","setError","selectors","viewQuery","decls","vars","i0","styles"],"sourceRoot":"","sources":["/home/eagold/MyFiles/FASystem/FASystemClient/src/app/features/transactions/components/transactions/transactions.component.ts","/home/eagold/MyFiles/FASystem/FASystemClient/src/app/features/transactions/components/transactions/transactions.component.html"],"sourcesContent":["import { Component, Inject, TemplateRef, ViewChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { AgGridModule } from 'ag-grid-angular';\nimport { ColDef, ColumnApi, GridApi, GridReadyEvent, SelectionChangedEvent } from 'ag-grid-community';\n\nimport { Observable, takeUntil } from 'rxjs';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { Loadable } from '@core/helpers';\nimport { DestroyService } from '@core/services';\nimport { TemplateRendererComponent } from '@shared';\nimport { TransactionReadInterface, TransactionsService } from '@features/transactions';\n\n@Component({\n  selector: 'app-transactions',\n  standalone: true,\n  imports: [\n    CommonModule,\n\n    AgGridModule,\n\n    MatButtonModule,\n    MatIconModule,\n  ],\n  providers: [\n    DestroyService\n  ],\n  templateUrl: './transactions.component.html',\n  styleUrls: ['./transactions.component.scss']\n})\nexport class TransactionsComponent {\n  @ViewChild('controlsTemplate', { static: true }) controlsTemplate!: TemplateRef<any>;\n  expenses = new Loadable<TransactionReadInterface[] | null>(null, false);\n  selected: TransactionReadInterface[] = [];\n\n  gridApi!: GridApi;\n  gridColumnApi!: ColumnApi;\n\n  columnDefs!: ColDef[];\n  defaultColDef = {\n    resizable: true,\n    sortable: true,\n    filter: true\n  };\n  gridOptions = {\n    suppressRowClickSelection: true,\n    rowHeight: 48\n  };\n\n  constructor(\n    @Inject(DestroyService) private readonly viewDestroyed$: Observable<void>,\n    private readonly transactionsService: TransactionsService,\n    private readonly router: Router,\n    private route: ActivatedRoute,\n  ) { }\n\n  ngOnInit(): void {\n    this.setCoumnDefs();\n    this.updateExpenses();\n  }\n\n  setCoumnDefs(): void {\n    this.columnDefs = [\n      {\n        field: 'id',\n        headerCheckboxSelection: true,\n        checkboxSelection: true,\n      },\n      { field: 'amount' },\n      { field: 'description' },\n      { \n        field: 'categoryName',\n        headerName: 'Category'\n      },\n      { \n        field: 'accountName',\n        headerName: 'Account'\n      },\n      { \n        field: 'typeId',\n        headerName: 'Type Id',\n        hide: true\n      },\n      {\n        headerName: 'Controls',\n        pinned: 'right',\n        cellRenderer: TemplateRendererComponent,\n        cellRendererParams: {\n          template: this.controlsTemplate\n        }\n      }\n    ]\n  }\n\n  onGridReady(params: GridReadyEvent): void {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n  }\n\n  onFirstDataRendered(): void {\n    this.gridColumnApi.autoSizeAllColumns();\n  }\n\n  onSelectionChanged(event: SelectionChangedEvent) {\n    this.selected = event.api.getSelectedRows();\n  }\n\n  onNewClicked() {\n    this.router.navigate(['new'], { relativeTo: this.route });\n  }\n\n  onRowClicked(expense: TransactionReadInterface): void {\n\n  }\n\n  onRowEditClicked(expense: TransactionReadInterface): void {\n    this.router.navigate([expense.id], { relativeTo: this.route });\n  }\n\n  resetSelected(): void {\n    this.selected = [];\n  }\n\n  updateExpenses(): void {\n    this.expenses.isLoading = true;\n    this.transactionsService.getAll()\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe({\n        next: data => {\n          this.expenses.setData(data);\n        },\n        error: error => this.expenses.setError(error)\n      });\n  }\n}\n","<p>transactions works!</p>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}