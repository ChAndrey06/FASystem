{"ast":null,"code":"import { tap } from 'rxjs';\nimport { TransactionTypesEnum } from '../enums';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@core/services\";\nimport * as i2 from \"@features/accounts\";\nimport * as i3 from \"@angular/router\";\nexport class TransactionsService {\n  constructor(apiService, accountsService, router) {\n    this.apiService = apiService;\n    this.accountsService = accountsService;\n    this.router = router;\n  }\n  getAll() {\n    return this.apiService.get('transactions');\n  }\n  getCategories(typeId) {\n    return this.apiService.get(`transactions/categories/${typeId}`);\n  }\n  create(transaction) {\n    return this.apiService.post('transactions', transaction).pipe(tap(() => this.accountsService.update().subscribe()));\n  }\n  getById(id) {\n    return this.apiService.get(`transactions/${id}`);\n  }\n  getById(id, d) {\n    return this.apiService.get(`transactions/${id}`);\n  }\n  getExpenseById(id) {\n    const url = this.router.createUrlTree(['transactions', id], {\n      queryParams: {\n        typeId: TransactionTypesEnum.expense\n      }\n    });\n    return this.apiService.get(url.toString());\n  }\n  getIncomeById(id) {\n    const url = this.router.createUrlTree(['transactions', id], {\n      queryParams: {\n        typeId: TransactionTypesEnum.expense\n      }\n    });\n    return this.apiService.get(url.toString());\n  }\n}\nTransactionsService.ɵfac = function TransactionsService_Factory(t) {\n  return new (t || TransactionsService)(i0.ɵɵinject(i1.ApiService), i0.ɵɵinject(i2.AccountsService), i0.ɵɵinject(i3.Router));\n};\nTransactionsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TransactionsService,\n  factory: TransactionsService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,GAAG,QAAQ,MAAM;AAI1B,SAASC,oBAAoB,QAAQ,UAAU;;;;;AAM/C,OAAM,MAAOC,mBAAmB;EAC9BC,YACmBC,UAAsB,EACtBC,eAAgC,EACzCC,MAAc;IAFL,eAAU,GAAVF,UAAU;IACV,oBAAe,GAAfC,eAAe;IACxB,WAAM,GAANC,MAAM;EACZ;EAEGC,MAAM;IACX,OAAO,IAAI,CAACH,UAAU,CAACI,GAAG,CAA6B,cAAc,CAAC;EACxE;EAEOC,aAAa,CAACC,MAA4B;IAC/C,OAAO,IAAI,CAACN,UAAU,CAACI,GAAG,CAAiC,2BAA2BE,MAAM,EAAE,CAAC;EACjG;EAEOC,MAAM,CAACC,WAAuC;IACnD,OAAO,IAAI,CAACR,UAAU,CAACS,IAAI,CAAiC,cAAc,EAAED,WAAW,CAAC,CACrFE,IAAI,CAACd,GAAG,CAAC,MAAM,IAAI,CAACK,eAAe,CAACU,MAAM,EAAE,CAACC,SAAS,EAAE,CAAC,CAAC;EAC/D;EAEOC,OAAO,CAACC,EAAU;IACvB,OAAO,IAAI,CAACd,UAAU,CAACI,GAAG,CAAiC,gBAAgBU,EAAE,EAAE,CAAC;EAClF;EAEOD,OAAO,CAACC,EAAU,EAAEC,CAAoB;IAC7C,OAAO,IAAI,CAACf,UAAU,CAACI,GAAG,CAAiC,gBAAgBU,EAAE,EAAE,CAAC;EAClF;EAEOE,cAAc,CAACF,EAAU;IAC9B,MAAMG,GAAG,GAAG,IAAI,CAACf,MAAM,CAACgB,aAAa,CAAC,CAAC,cAAc,EAAEJ,EAAE,CAAC,EAAE;MAAEK,WAAW,EAAE;QAAEb,MAAM,EAAET,oBAAoB,CAACuB;MAAO;IAAE,CAAE,CAAC;IACtH,OAAO,IAAI,CAACpB,UAAU,CAACI,GAAG,CAAiCa,GAAG,CAACI,QAAQ,EAAE,CAAC;EAC5E;EAEOC,aAAa,CAACR,EAAU;IAC7B,MAAMG,GAAG,GAAG,IAAI,CAACf,MAAM,CAACgB,aAAa,CAAC,CAAC,cAAc,EAAEJ,EAAE,CAAC,EAAE;MAAEK,WAAW,EAAE;QAAEb,MAAM,EAAET,oBAAoB,CAACuB;MAAO;IAAE,CAAE,CAAC;IACtH,OAAO,IAAI,CAACpB,UAAU,CAACI,GAAG,CAAiCa,GAAG,CAACI,QAAQ,EAAE,CAAC;EAC5E;;AApCWvB,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;SAAnBA,mBAAmB;EAAAyB,SAAnBzB,mBAAmB;EAAA0B,YAFlB;AAAM","names":["tap","TransactionTypesEnum","TransactionsService","constructor","apiService","accountsService","router","getAll","get","getCategories","typeId","create","transaction","post","pipe","update","subscribe","getById","id","d","getExpenseById","url","createUrlTree","queryParams","expense","toString","getIncomeById","factory","providedIn"],"sourceRoot":"","sources":["/home/eagold/MyFiles/FASystem/FASystemClient/src/app/features/transactions/services/transactions.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\nimport { tap } from 'rxjs';\n\nimport { ApiService } from '@core/services';\nimport { AccountsService } from '@features/accounts';\nimport { TransactionTypesEnum } from '../enums';\nimport { TransactionCategoryInterface, TransactionCreateInterface, TransactionReadInterface } from '../interfaces';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TransactionsService {\n  constructor(\n    private readonly apiService: ApiService,\n    private readonly accountsService: AccountsService,\n    private router: Router\n  ) { }\n\n  public getAll() {\n    return this.apiService.get<TransactionReadInterface[]>('transactions');\n  }\n\n  public getCategories(typeId: TransactionTypesEnum) {\n    return this.apiService.get<TransactionCategoryInterface[]>(`transactions/categories/${typeId}`);\n  }\n\n  public create(transaction: TransactionCreateInterface) {\n    return this.apiService.post<TransactionCategoryInterface[]>('transactions', transaction)\n      .pipe(tap(() => this.accountsService.update().subscribe()));\n  }\n\n  public getById(id: number) {\n    return this.apiService.get<TransactionCategoryInterface[]>(`transactions/${id}`);\n  }\n\n  public getById(id: number, d: NumberConstructor) {\n    return this.apiService.get<TransactionCategoryInterface[]>(`transactions/${id}`);\n  }\n  \n  public getExpenseById(id: number) {\n    const url = this.router.createUrlTree(['transactions', id], { queryParams: { typeId: TransactionTypesEnum.expense } });\n    return this.apiService.get<TransactionCategoryInterface[]>(url.toString());\n  }\n\n  public getIncomeById(id: number) {\n    const url = this.router.createUrlTree(['transactions', id], { queryParams: { typeId: TransactionTypesEnum.expense } });\n    return this.apiService.get<TransactionCategoryInterface[]>(url.toString());\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}