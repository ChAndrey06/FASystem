{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { AgGridModule } from 'ag-grid-angular';\nimport { takeUntil } from 'rxjs';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { Loadable } from '@core/helpers';\nimport { DestroyService } from '@core/services';\nimport { TemplateRendererComponent } from '@shared';\nimport { TransactionTypesEnum } from '@features/transactions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@features/transactions\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"ag-grid-angular\";\nimport * as i4 from \"@angular/material/button\";\nimport * as i5 from \"@angular/material/icon\";\nimport * as i6 from \"rxjs\";\nconst _c0 = [\"controlsTemplate\"];\nfunction TransactionsComponent_ng_template_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵlistener(\"click\", function TransactionsComponent_ng_template_9_Template_div_click_0_listener($event) {\n      return $event.stopPropagation();\n    });\n    i0.ɵɵelementStart(1, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function TransactionsComponent_ng_template_9_Template_button_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r5);\n      const rowData_r2 = restoredCtx.$implicit;\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onRowEditClicked(rowData_r2));\n    });\n    i0.ɵɵelementStart(2, \"mat-icon\");\n    i0.ɵɵtext(3, \"edit\");\n    i0.ɵɵelementEnd()()();\n  }\n}\nexport class TransactionsComponent {\n  constructor(viewDestroyed$, transactionsService, router, route) {\n    this.viewDestroyed$ = viewDestroyed$;\n    this.transactionsService = transactionsService;\n    this.router = router;\n    this.route = route;\n    this.transactions = new Loadable(null, false);\n    this.selected = [];\n    this.defaultColDef = {\n      resizable: true,\n      sortable: true,\n      filter: true\n    };\n    this.gridOptions = {\n      suppressRowClickSelection: true,\n      rowHeight: 48\n    };\n  }\n  ngOnInit() {\n    this.setCoumnDefs();\n    this.loadTransactions();\n  }\n  setCoumnDefs() {\n    this.columnDefs = [{\n      field: 'id',\n      headerCheckboxSelection: true,\n      checkboxSelection: true\n    }, {\n      field: 'amount'\n    }, {\n      field: 'description'\n    }, {\n      field: 'categoryName',\n      headerName: 'Category'\n    }, {\n      field: 'accountName',\n      headerName: 'Account'\n    }, {\n      field: 'typeId',\n      headerName: 'Type',\n      hide: this.typeId != null,\n      valueFormatter: params => {\n        switch (params.value) {\n          case TransactionTypesEnum.expense:\n            {\n              return 'Expense';\n            }\n          case TransactionTypesEnum.income:\n            {\n              return 'income';\n            }\n        }\n      }\n    }, {\n      headerName: 'Controls',\n      pinned: 'right',\n      cellRenderer: TemplateRendererComponent,\n      cellRendererParams: {\n        template: this.controlsTemplate\n      }\n    }];\n  }\n  onGridReady(params) {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n  }\n  onFirstDataRendered() {\n    this.gridColumnApi.autoSizeAllColumns();\n  }\n  onSelectionChanged(event) {\n    this.selected = event.api.getSelectedRows();\n  }\n  onNewClicked() {\n    this.router.navigate(['new'], {\n      relativeTo: this.route\n    });\n  }\n  onRowClicked(expense) {}\n  onRowEditClicked(expense) {\n    this.router.navigate([expense.id], {\n      relativeTo: this.route\n    });\n  }\n  resetSelected() {\n    this.selected = [];\n  }\n  loadTransactions() {\n    this.transactions.isLoading = true;\n    this.transactionsService.getAll(this.typeId).pipe(takeUntil(this.viewDestroyed$)).subscribe({\n      next: data => {\n        this.transactions.setData(data);\n      },\n      error: error => this.transactions.setError(error)\n    });\n  }\n}\nTransactionsComponent.ɵfac = function TransactionsComponent_Factory(t) {\n  return new (t || TransactionsComponent)(i0.ɵɵdirectiveInject(DestroyService), i0.ɵɵdirectiveInject(i1.TransactionsService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\nTransactionsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TransactionsComponent,\n  selectors: [[\"app-transactions\"]],\n  viewQuery: function TransactionsComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.controlsTemplate = _t.first);\n    }\n  },\n  inputs: {\n    typeId: \"typeId\"\n  },\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([DestroyService]), i0.ɵɵStandaloneFeature],\n  decls: 11,\n  vars: 5,\n  consts: [[1, \"container\"], [1, \"header\"], [1, \"table-controls\"], [\"mat-fab\", \"\", \"color\", \"primary\", 3, \"click\"], [\"rowSelection\", \"multiple\", 1, \"ag-theme-alpine\", \"grid\", 3, \"rowData\", \"columnDefs\", \"defaultColDef\", \"gridOptions\", \"rowClicked\", \"gridReady\", \"firstDataRendered\", \"selectionChanged\"], [\"controlsTemplate\", \"\"], [1, \"row-controls\", 3, \"click\"], [\"mat-icon-button\", \"\", \"color\", \"primary\", 3, \"click\"]],\n  template: function TransactionsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function TransactionsComponent_Template_button_click_3_listener() {\n        return ctx.onNewClicked();\n      });\n      i0.ɵɵelementStart(4, \"mat-icon\");\n      i0.ɵɵtext(5, \"add\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(6, \"h1\");\n      i0.ɵɵtext(7);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(8, \"ag-grid-angular\", 4);\n      i0.ɵɵlistener(\"rowClicked\", function TransactionsComponent_Template_ag_grid_angular_rowClicked_8_listener($event) {\n        return ctx.onRowClicked($event.data);\n      })(\"gridReady\", function TransactionsComponent_Template_ag_grid_angular_gridReady_8_listener($event) {\n        return ctx.onGridReady($event);\n      })(\"firstDataRendered\", function TransactionsComponent_Template_ag_grid_angular_firstDataRendered_8_listener() {\n        return ctx.onFirstDataRendered();\n      })(\"selectionChanged\", function TransactionsComponent_Template_ag_grid_angular_selectionChanged_8_listener($event) {\n        return ctx.onSelectionChanged($event);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(9, TransactionsComponent_ng_template_9_Template, 4, 0, \"ng-template\", null, 5, i0.ɵɵtemplateRefExtractor);\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(7);\n      i0.ɵɵtextInterpolate(ctx.title);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"rowData\", ctx.transactions.data)(\"columnDefs\", ctx.columnDefs)(\"defaultColDef\", ctx.defaultColDef)(\"gridOptions\", ctx.gridOptions);\n    }\n  },\n  dependencies: [CommonModule, AgGridModule, i3.AgGridAngular, MatButtonModule, i4.MatIconButton, i4.MatFabButton, MatIconModule, i5.MatIcon],\n  styles: [\".container[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  gap: 20px;\\n  padding: 20px;\\n  box-sizing: border-box;\\n  max-height: calc(100vh - 75px);\\n}\\n.container[_ngcontent-%COMP%]    > .header[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n}\\n.container[_ngcontent-%COMP%]    > .header[_ngcontent-%COMP%]    > .table-controls[_ngcontent-%COMP%] {\\n  display: flex;\\n  gap: 10px;\\n}\\n.container[_ngcontent-%COMP%]    > .header[_ngcontent-%COMP%]    > h1[_ngcontent-%COMP%] {\\n  margin: 0;\\n  font-weight: bold;\\n}\\n.container[_ngcontent-%COMP%]    > .grid[_ngcontent-%COMP%] {\\n  height: 100vh;\\n}\\n.container[_ngcontent-%COMP%]   .row-controls[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n  height: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZmVhdHVyZXMvdHJhbnNhY3Rpb25zL2NvbXBvbmVudHMvdHJhbnNhY3Rpb25zL3RyYW5zYWN0aW9ucy5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQUE7RUFDQSxzQkFBQTtFQUNBLFNBQUE7RUFDQSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSw4QkFBQTtBQUNGO0FBQ0k7RUFDQSxhQUFBO0VBQ0EsOEJBQUE7RUFDQSxtQkFBQTtBQUNKO0FBQ0k7RUFDRSxhQUFBO0VBQ0EsU0FBQTtBQUNOO0FBRUk7RUFDRSxTQUFBO0VBQ0EsaUJBQUE7QUFBTjtBQUlFO0VBQ0UsYUFBQTtBQUZKO0FBS0U7RUFDRSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtFQUNBLFlBQUE7QUFISiIsInNvdXJjZXNDb250ZW50IjpbIi5jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuICBnYXA6IDIwcHg7XG4gIHBhZGRpbmc6IDIwcHg7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIG1heC1oZWlnaHQ6IGNhbGMoMTAwdmggLSA3NXB4KTtcblxuICAgID4gLmhlYWRlciB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcblxuICAgID4gLnRhYmxlLWNvbnRyb2xzIHtcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBnYXA6IDEwcHg7XG4gICAgfVxuXG4gICAgPiBoMSB7XG4gICAgICBtYXJnaW46IDA7XG4gICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICB9XG4gIH1cblxuICA+IC5ncmlkIHtcbiAgICBoZWlnaHQ6IDEwMHZoO1xuICB9XG5cbiAgLnJvdy1jb250cm9scyB7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGhlaWdodDogMTAwJTtcbiAgfVxufSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["CommonModule","AgGridModule","takeUntil","MatButtonModule","MatIconModule","Loadable","DestroyService","TemplateRendererComponent","TransactionTypesEnum","i0","$event","TransactionsComponent","constructor","viewDestroyed$","transactionsService","router","route","resizable","sortable","filter","suppressRowClickSelection","rowHeight","ngOnInit","setCoumnDefs","loadTransactions","columnDefs","field","headerCheckboxSelection","checkboxSelection","headerName","hide","typeId","valueFormatter","params","value","expense","income","pinned","cellRenderer","cellRendererParams","template","controlsTemplate","onGridReady","gridApi","api","gridColumnApi","columnApi","onFirstDataRendered","autoSizeAllColumns","onSelectionChanged","event","selected","getSelectedRows","onNewClicked","navigate","relativeTo","onRowClicked","onRowEditClicked","id","resetSelected","transactions","isLoading","getAll","pipe","subscribe","next","data","setData","error","setError","selectors","viewQuery","decls","vars","consts","ctx","styles"],"sourceRoot":"","sources":["/home/eagold/MyFiles/FASystem/FASystemClient/src/app/features/transactions/components/transactions/transactions.component.ts","/home/eagold/MyFiles/FASystem/FASystemClient/src/app/features/transactions/components/transactions/transactions.component.html"],"sourcesContent":["import { Component, Inject, Input, TemplateRef, ViewChild } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute, Router } from '@angular/router';\n\nimport { AgGridModule } from 'ag-grid-angular';\nimport { ColDef, ColumnApi, GridApi, GridReadyEvent, SelectionChangedEvent, ValueFormatterParams } from 'ag-grid-community';\n\nimport { Observable, takeUntil } from 'rxjs';\n\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { Loadable } from '@core/helpers';\nimport { DestroyService } from '@core/services';\nimport { TemplateRendererComponent } from '@shared';\nimport { TransactionReadInterface, TransactionsService, TransactionTypesEnum } from '@features/transactions';\n\n@Component({\n  selector: 'app-transactions',\n  standalone: true,\n  imports: [\n    CommonModule,\n\n    AgGridModule,\n\n    MatButtonModule,\n    MatIconModule,\n  ],\n  providers: [\n    DestroyService\n  ],\n  templateUrl: './transactions.component.html',\n  styleUrls: ['./transactions.component.scss']\n})\nexport class TransactionsComponent {\n  @Input() typeId!: TransactionTypesEnum | null;\n  @ViewChild('controlsTemplate', { static: true }) controlsTemplate!: TemplateRef<any>;\n  transactions = new Loadable<TransactionReadInterface[] | null>(null, false);\n  selected: TransactionReadInterface[] = [];\n\n  gridApi!: GridApi;\n  gridColumnApi!: ColumnApi;\n\n  columnDefs!: ColDef[];\n  defaultColDef = {\n    resizable: true,\n    sortable: true,\n    filter: true\n  };\n  gridOptions = {\n    suppressRowClickSelection: true,\n    rowHeight: 48\n  };\n\n  constructor(\n    @Inject(DestroyService) private readonly viewDestroyed$: Observable<void>,\n    private readonly transactionsService: TransactionsService,\n    private readonly router: Router,\n    private route: ActivatedRoute,\n  ) { }\n\n  ngOnInit(): void {\n    this.setCoumnDefs();\n    this.loadTransactions();\n  }\n\n  setCoumnDefs(): void {\n    this.columnDefs = [\n      {\n        field: 'id',\n        headerCheckboxSelection: true,\n        checkboxSelection: true,\n      },\n      { field: 'amount' },\n      { field: 'description' },\n      { \n        field: 'categoryName',\n        headerName: 'Category'\n      },\n      { \n        field: 'accountName',\n        headerName: 'Account'\n      },\n      { \n        field: 'typeId',\n        headerName: 'Type',\n        hide: this.typeId != null,\n        valueFormatter: (params: ValueFormatterParams): any => {\n          switch (params.value) {\n            case TransactionTypesEnum.expense: {\n              return 'Expense';\n            }\n            case TransactionTypesEnum.income: {\n              return 'income';\n            }\n          }\n        }\n      },\n      {\n        headerName: 'Controls',\n        pinned: 'right',\n        cellRenderer: TemplateRendererComponent,\n        cellRendererParams: {\n          template: this.controlsTemplate\n        }\n      }\n    ]\n  }\n\n  onGridReady(params: GridReadyEvent): void {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n  }\n\n  onFirstDataRendered(): void {\n    this.gridColumnApi.autoSizeAllColumns();\n  }\n\n  onSelectionChanged(event: SelectionChangedEvent) {\n    this.selected = event.api.getSelectedRows();\n  }\n\n  onNewClicked() {\n    this.router.navigate(['new'], { relativeTo: this.route });\n  }\n\n  onRowClicked(expense: TransactionReadInterface): void {\n\n  }\n\n  onRowEditClicked(expense: TransactionReadInterface): void {\n    this.router.navigate([expense.id], { relativeTo: this.route });\n  }\n\n  resetSelected(): void {\n    this.selected = [];\n  }\n\n  loadTransactions(): void {\n    this.transactions.isLoading = true;\n    this.transactionsService.getAll(this.typeId)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe({\n        next: data => {\n          this.transactions.setData(data);\n        },\n        error: error => this.transactions.setError(error)\n      });\n  }\n}\n","<div class=\"container\">\n  <div class=\"header\">\n    <div class=\"table-controls\">\n      <button mat-fab color=\"primary\" (click)=\"onNewClicked()\">\n        <mat-icon>add</mat-icon>\n      </button>\n    </div>\n    <h1>{{title}}</h1>\n  </div>\n\n  <ag-grid-angular \n    class=\"ag-theme-alpine grid\" \n    [rowData]=\"transactions.data\" \n    [columnDefs]=\"columnDefs\" \n    (rowClicked)=\"onRowClicked($event.data)\"\n    [defaultColDef]=\"defaultColDef\" \n    [gridOptions]=\"gridOptions\"\n    (gridReady)=\"onGridReady($event)\"\n    (firstDataRendered)=\"onFirstDataRendered()\" \n    (selectionChanged)=\"onSelectionChanged($event)\" \n    rowSelection=\"multiple\">\n  </ag-grid-angular>\n</div>\n\n<ng-template #controlsTemplate let-rowData>\n  <div class=\"row-controls\" (click)=\"$event.stopPropagation()\">\n    <button mat-icon-button color=\"primary\" (click)=\"onRowEditClicked(rowData)\">\n      <mat-icon>edit</mat-icon>\n    </button>\n  </div>\n</ng-template>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}