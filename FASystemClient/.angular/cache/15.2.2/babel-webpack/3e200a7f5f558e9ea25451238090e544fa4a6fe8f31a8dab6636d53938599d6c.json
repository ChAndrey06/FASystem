{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { takeUntil } from 'rxjs';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { DestroyService } from '@core/services';\nimport { Loadable } from '@core/helpers';\nimport { TransactionTypesEnum } from '@features/transactions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@features/transactions\";\nimport * as i3 from \"@features/accounts\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"rxjs\";\nexport class TransactionDetailsComponent {\n  constructor(viewDestroyed$, formBuilder, transactionsService, accountsState, router, route) {\n    this.viewDestroyed$ = viewDestroyed$;\n    this.formBuilder = formBuilder;\n    this.transactionsService = transactionsService;\n    this.accountsState = accountsState;\n    this.router = router;\n    this.route = route;\n    this.typeId = null;\n    this.title = accounts$ = this.accountsState.data$;\n    this.categories = new Loadable([], false);\n    this.transaction = new Loadable(null, false);\n    this.formGroup = this.formBuilder.group({\n      amount: [null, Validators.required],\n      description: [null, [Validators.required, Validators.maxLength(500)]],\n      typeId: [TransactionTypesEnum.expense, Validators.required],\n      categoryId: [null, [Validators.required]],\n      accountId: [null, [Validators.required]]\n    });\n  }\n  ngOnInit() {\n    const expenseId = this.route.snapshot.paramMap.get('id');\n    if (expenseId) {\n      if (isNaN(Number(expenseId))) {\n        this.router.navigate(['./']);\n      } else {\n        this.loadExpense(Number(expenseId));\n      }\n    }\n    this.loadCategories();\n  }\n  onSubmit(form) {\n    console.log(form);\n    if (this.transaction.data) {\n      this.updateExpense(this.transaction.data.id, form);\n    } else {\n      this.createExpense(form);\n    }\n  }\n  onNewClicked() {\n    this.transaction.setData(null);\n    this.formGroup.reset({\n      typeId: TransactionTypesEnum.expense\n    });\n  }\n  onViewAllClicked() {\n    this.router.navigate(['expenses']);\n  }\n  loadCategories() {\n    this.categories.isLoading = true;\n    this.transactionsService.getCategories(TransactionTypesEnum.expense).pipe(takeUntil(this.viewDestroyed$)).subscribe({\n      next: data => this.categories.setData(data),\n      error: error => this.categories.setError(error)\n    });\n  }\n  loadExpense(id) {\n    this.transaction.isLoading = true;\n    this.transactionsService.getExpenseById(id).pipe(takeUntil(this.viewDestroyed$)).subscribe(expense => {\n      this.transaction.setData(expense);\n      this.formGroup.reset(expense);\n    });\n  }\n  createExpense(expense) {\n    this.transaction.isLoading = true;\n    this.transactionsService.create(expense).pipe(takeUntil(this.viewDestroyed$)).subscribe(expense => {\n      this.transaction.setData(expense);\n      this.formGroup.reset(expense);\n    });\n  }\n  updateExpense(id, expense) {\n    this.transaction.isLoading = true;\n    this.transactionsService.updateById(id, expense).pipe(takeUntil(this.viewDestroyed$)).subscribe(expense => {\n      this.transaction.setData(expense);\n      this.formGroup.reset(expense);\n    });\n  }\n}\nTransactionDetailsComponent.ɵfac = function TransactionDetailsComponent_Factory(t) {\n  return new (t || TransactionDetailsComponent)(i0.ɵɵdirectiveInject(DestroyService), i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.TransactionsService), i0.ɵɵdirectiveInject(i3.AccountsState), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i4.ActivatedRoute));\n};\nTransactionDetailsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TransactionDetailsComponent,\n  selectors: [[\"app-transaction-details\"]],\n  inputs: {\n    typeId: \"typeId\"\n  },\n  standalone: true,\n  features: [i0.ɵɵStandaloneFeature],\n  decls: 2,\n  vars: 0,\n  template: function TransactionDetailsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"transaction-details works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  dependencies: [CommonModule, FormsModule, ReactiveFormsModule, MatFormFieldModule, MatSelectModule, MatInputModule, MatButtonModule],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["CommonModule","FormsModule","ReactiveFormsModule","Validators","takeUntil","MatFormFieldModule","MatSelectModule","MatInputModule","MatButtonModule","DestroyService","Loadable","TransactionTypesEnum","TransactionDetailsComponent","constructor","viewDestroyed$","formBuilder","transactionsService","accountsState","router","route","accounts$","data$","group","amount","required","description","maxLength","typeId","expense","categoryId","accountId","ngOnInit","expenseId","snapshot","paramMap","get","isNaN","Number","navigate","loadExpense","loadCategories","onSubmit","form","console","log","transaction","data","updateExpense","id","createExpense","onNewClicked","setData","formGroup","reset","onViewAllClicked","categories","isLoading","getCategories","pipe","subscribe","next","error","setError","getExpenseById","create","updateById","selectors","inputs","standalone","features","decls","vars","template","i0","styles"],"sourceRoot":"","sources":["/home/eagold/MyFiles/FASystem/FASystemClient/src/app/features/transactions/components/transaction-details/transaction-details.component.ts","/home/eagold/MyFiles/FASystem/FASystemClient/src/app/features/transactions/components/transaction-details/transaction-details.component.html"],"sourcesContent":["import { Component, Inject, Input } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\n\nimport { Observable, takeUntil } from 'rxjs';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\n\nimport { DestroyService } from '@core/services';\nimport { AccountsState } from '@features/accounts';\nimport { Loadable } from '@core/helpers';\nimport {\n  TransactionCategoryInterface,\n  TransactionCreateInterface,\n  TransactionReadInterface,\n  TransactionsService,\n  TransactionTypesEnum\n} from '@features/transactions';\n\n@Component({\n  selector: 'app-transaction-details',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n\n    MatFormFieldModule,\n    MatSelectModule,\n    MatInputModule,\n    MatButtonModule\n  ],\n  templateUrl: './transaction-details.component.html',\n  styleUrls: ['./transaction-details.component.scss']\n})\nexport class TransactionDetailsComponent {\n  @Input() typeId: TransactionTypesEnum | null = null;\n  title = \n  accounts$ = this.accountsState.data$;\n  categories = new Loadable<TransactionCategoryInterface[]>([], false);\n  transaction = new Loadable<TransactionReadInterface | null>(null, false);\n\n  formGroup: FormGroup = this.formBuilder.group({\n    amount: [null, Validators.required],\n    description: [null, [Validators.required, Validators.maxLength(500)]],\n    typeId: [TransactionTypesEnum.expense, Validators.required],\n    categoryId: [null, [Validators.required]],\n    accountId: [null, [Validators.required]]\n  });\n\n  constructor(\n    @Inject(DestroyService) private readonly viewDestroyed$: Observable<void>,\n    private readonly formBuilder: FormBuilder,\n    private readonly transactionsService: TransactionsService,\n    private readonly accountsState: AccountsState,\n    private readonly router: Router,\n    private readonly route: ActivatedRoute\n  ) { }\n\n  ngOnInit(): void {\n    const expenseId = this.route.snapshot.paramMap.get('id');\n\n    if (expenseId) {\n      if (isNaN(Number(expenseId))) {\n        this.router.navigate(['./']);\n      } else {\n        this.loadExpense(Number(expenseId));\n      }\n    }\n\n    this.loadCategories();\n  }\n\n  onSubmit(form: any): void {\n    console.log(form)\n    if (this.transaction.data) {\n      this.updateExpense(this.transaction.data.id, form);\n    } else {\n      this.createExpense(form);\n    }\n  }\n\n  onNewClicked(): void {\n    this.transaction.setData(null);\n    this.formGroup.reset({ typeId: TransactionTypesEnum.expense });\n  }\n\n  onViewAllClicked(): void {\n    this.router.navigate(['expenses']);\n  }\n\n  loadCategories(): void {\n    this.categories.isLoading = true;\n    this.transactionsService.getCategories(TransactionTypesEnum.expense)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe({\n        next: data => this.categories.setData(data),\n        error: error => this.categories.setError(error)\n      });\n  }\n\n  loadExpense(id: number): void {\n    this.transaction.isLoading = true;\n    this.transactionsService.getExpenseById(id)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe(expense => {\n        this.transaction.setData(expense);\n        this.formGroup.reset(expense);\n      });\n  }\n\n  createExpense(expense: TransactionCreateInterface): void {\n    this.transaction.isLoading = true;\n    this.transactionsService.create(expense)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe(expense => {\n        this.transaction.setData(expense);\n        this.formGroup.reset(expense);\n      });\n  }\n\n  updateExpense(id: number, expense: TransactionCreateInterface): void {\n    this.transaction.isLoading = true;\n    this.transactionsService.updateById(id, expense)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe(expense => {\n        this.transaction.setData(expense);\n        this.formGroup.reset(expense);\n      });\n  }\n}\n","<p>transaction-details works!</p>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}