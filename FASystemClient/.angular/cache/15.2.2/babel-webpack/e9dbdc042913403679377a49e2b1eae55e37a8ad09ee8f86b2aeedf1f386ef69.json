{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { takeUntil } from 'rxjs';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { DestroyService } from '@core/services';\nimport { Loadable } from '@core/helpers';\nimport { TransactionTypesEnum } from '@features/transactions';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@features/transactions\";\nimport * as i3 from \"@features/accounts\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"rxjs\";\nfunction DetailsComponent_mat_option_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\");\n    i0.ɵɵtext(1, \"Loading...\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DetailsComponent_ng_container_15_mat_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const bike_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", bike_r4);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" \", bike_r4.name, \" \", bike_r4.number, \" \");\n  }\n}\nfunction DetailsComponent_ng_container_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, DetailsComponent_ng_container_15_mat_option_1_Template, 2, 3, \"mat-option\", 9);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r2.bikes.data);\n  }\n}\nexport class DetailsComponent {\n  constructor(viewDestroyed$, formBuilder, transactionsService, accountsState, accountsService) {\n    this.viewDestroyed$ = viewDestroyed$;\n    this.formBuilder = formBuilder;\n    this.transactionsService = transactionsService;\n    this.accountsState = accountsState;\n    this.accountsService = accountsService;\n    this.accounts$ = this.accountsState.data$;\n    this.categories = new Loadable([], false);\n    this.formGroup = this.formBuilder.group({\n      amount: [null, Validators.required],\n      description: [null, [Validators.required, Validators.maxLength(500)]],\n      typeId: [TransactionTypesEnum.expense, Validators.required],\n      categoryId: [null, [Validators.required]],\n      accountId: [null, [Validators.required]]\n    });\n  }\n  ngOnInit() {\n    this.formGroup.reset(this.expense);\n    this.updateCategories();\n  }\n  onSubmit(form) {\n    this.transactionsService.create();\n  }\n  onBikeSelected(event) {\n    const bike = event.option.value;\n    this.formGroup.patchValue({\n      bikeId: bike.id,\n      bikeName: bike.name,\n      bikeNumber: bike.number\n    });\n  }\n  onClearBikeNameClicked() {\n    this.formGroup.patchValue({\n      typeId: ''\n    });\n  }\n  updateCategories() {\n    this.categories.isLoading = true;\n    this.transactionsService.getCategories(TransactionTypesEnum.expense).pipe(takeUntil(this.viewDestroyed$)).subscribe({\n      next: data => this.expenses.setData(data),\n      error: error => this.expenses.setError(error)\n    });\n  }\n}\nDetailsComponent.ɵfac = function DetailsComponent_Factory(t) {\n  return new (t || DetailsComponent)(i0.ɵɵdirectiveInject(DestroyService), i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.TransactionsService), i0.ɵɵdirectiveInject(i3.AccountsState), i0.ɵɵdirectiveInject(i3.AccountsService));\n};\nDetailsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DetailsComponent,\n  selectors: [[\"app-details\"]],\n  standalone: true,\n  features: [i0.ɵɵStandaloneFeature],\n  decls: 19,\n  vars: 5,\n  consts: [[1, \"form\", 3, \"formGroup\", \"ngSubmit\"], [1, \"element\"], [\"matInput\", \"\", \"placeholder\", \"First name\", \"formControlName\", \"firstName\"], [\"matInput\", \"\", \"placeholder\", \"Bike name\", \"formControlName\", \"bikeName\", 3, \"matAutocomplete\"], [\"type\", \"button\", \"matSuffix\", \"\", \"mat-icon-button\", \"\", \"aria-label\", \"Clear\", 3, \"click\"], [3, \"optionSelected\"], [\"autocomplete\", \"matAutocomplete\"], [4, \"ngIf\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 1, \"sbumit-button\", 3, \"disabled\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [3, \"value\"]],\n  template: function DetailsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function DetailsComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.onSubmit(ctx.formGroup.value);\n      });\n      i0.ɵɵelementStart(1, \"mat-form-field\", 1)(2, \"mat-label\");\n      i0.ɵɵtext(3, \"First name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 2);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"mat-form-field\", 1)(6, \"mat-label\");\n      i0.ɵɵtext(7, \"Bike name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 3);\n      i0.ɵɵelementStart(9, \"button\", 4);\n      i0.ɵɵlistener(\"click\", function DetailsComponent_Template_button_click_9_listener() {\n        return ctx.onClearBikeNameClicked();\n      });\n      i0.ɵɵelementStart(10, \"mat-icon\");\n      i0.ɵɵtext(11, \"close\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(12, \"mat-autocomplete\", 5, 6);\n      i0.ɵɵlistener(\"optionSelected\", function DetailsComponent_Template_mat_autocomplete_optionSelected_12_listener($event) {\n        return ctx.onBikeSelected($event);\n      });\n      i0.ɵɵtemplate(14, DetailsComponent_mat_option_14_Template, 2, 0, \"mat-option\", 7);\n      i0.ɵɵtemplate(15, DetailsComponent_ng_container_15_Template, 2, 1, \"ng-container\", 7);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(16, \"div\", 1)(17, \"button\", 8);\n      i0.ɵɵtext(18, \" Save \");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(13);\n      i0.ɵɵproperty(\"formGroup\", ctx.formGroup);\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"matAutocomplete\", _r0);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.bikes.isLoading);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !ctx.bikes.isLoading);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", !(ctx.formGroup.valid && ctx.formGroup.dirty));\n    }\n  },\n  dependencies: [CommonModule, i4.NgForOf, i4.NgIf, FormsModule, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, ReactiveFormsModule, i1.FormGroupDirective, i1.FormControlName, MatFormFieldModule, i5.MatFormField, i5.MatLabel, i5.MatSuffix],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["CommonModule","FormsModule","ReactiveFormsModule","Validators","takeUntil","MatFormFieldModule","DestroyService","Loadable","TransactionTypesEnum","i0","DetailsComponent","constructor","viewDestroyed$","formBuilder","transactionsService","accountsState","accountsService","data$","group","amount","required","description","maxLength","typeId","expense","categoryId","accountId","ngOnInit","formGroup","reset","updateCategories","onSubmit","form","create","onBikeSelected","event","bike","option","value","patchValue","bikeId","id","bikeName","name","bikeNumber","number","onClearBikeNameClicked","categories","isLoading","getCategories","pipe","subscribe","next","data","expenses","setData","error","setError","selectors","standalone","features","decls","vars","consts","template","ctx","styles"],"sourceRoot":"","sources":["/home/eagold/MyFiles/FASystem/FASystemClient/src/app/pages/expenses/details/details.component.ts","/home/eagold/MyFiles/FASystem/FASystemClient/src/app/pages/expenses/details/details.component.html"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\n\nimport { Observable, takeUntil } from 'rxjs';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\n\nimport { DestroyService } from '@core/services';\nimport { AccountInterface, AccountsState, AccountsService } from '@features/accounts';\nimport { Loadable } from '@core/helpers';\nimport {\n  TransactionCategoryInterface,\n  TransactionReadInterface,\n  TransactionsService,\n  TransactionTypesEnum\n} from '@features/transactions';\n\n@Component({\n  selector: 'app-details',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n\n    MatFormFieldModule\n  ],\n  templateUrl: './details.component.html',\n  styleUrls: ['./details.component.scss']\n})\nexport class DetailsComponent {\n  accounts$ = this.accountsState.data$;\n  categories = new Loadable<TransactionCategoryInterface[]>([], false);\n  expense!: TransactionReadInterface;\n\n  formGroup: FormGroup = this.formBuilder.group({\n    amount: [null, Validators.required],\n    description: [null, [Validators.required, Validators.maxLength(500)]],\n    typeId: [TransactionTypesEnum.expense, Validators.required],\n    categoryId: [null, [Validators.required]],\n    accountId: [null, [Validators.required]]\n  });\n\n  constructor(\n    @Inject(DestroyService) private readonly viewDestroyed$: Observable<void>,\n    private readonly formBuilder: FormBuilder,\n    private readonly transactionsService: TransactionsService,\n    private readonly accountsState: AccountsState,\n    private readonly accountsService: AccountsService\n  ) { }\n\n  ngOnInit(): void {\n    this.formGroup.reset(this.expense);\n    this.updateCategories();\n  }\n\n  onSubmit(form: any) {\n    this.transactionsService.create();\n  }\n\n  onBikeSelected(event: MatAutocompleteSelectedEvent): void {\n    const bike = event.option.value;\n    this.formGroup.patchValue({\n      bikeId: bike.id,\n      bikeName: bike.name,\n      bikeNumber: bike.number\n    });\n  }\n\n  onClearBikeNameClicked(): void {\n    this.formGroup.patchValue({ typeId: '' });\n  }\n\n  updateCategories(): void {\n    this.categories.isLoading = true;\n    this.transactionsService.getCategories(TransactionTypesEnum.expense)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe({\n        next: data => this.expenses.setData(data),\n        error: error => this.expenses.setError(error)\n      });\n  }\n}\n","<form [formGroup]=\"formGroup\" (ngSubmit)=\"onSubmit(formGroup.value)\" class=\"form\">\n  <mat-form-field class=\"element\">\n    <mat-label>First name</mat-label>\n    <input matInput placeholder=\"First name\" formControlName=\"firstName\">\n  </mat-form-field>\n\n  <mat-form-field class=\"element\">\n    <mat-label>Bike name</mat-label>\n    <input \n      matInput \n      placeholder=\"Bike name\" \n      formControlName=\"bikeName\"\n      [matAutocomplete]=\"autocomplete\"\n    >\n\n    <button type=\"button\" matSuffix mat-icon-button aria-label=\"Clear\" (click)=\"onClearBikeNameClicked()\">\n      <mat-icon>close</mat-icon>\n    </button>\n\n    <mat-autocomplete \n      #autocomplete=\"matAutocomplete\" \n      (optionSelected)=\"onBikeSelected($event)\"\n    >\n      <mat-option *ngIf=\"bikes.isLoading\">Loading...</mat-option>\n      <ng-container *ngIf=\"!bikes.isLoading\">\n        <mat-option *ngFor=\"let bike of bikes.data\" [value]=\"bike\">\n          {{bike.name}} {{bike.number}}\n        </mat-option>\n      </ng-container>\n    </mat-autocomplete>\n  </mat-form-field>\n\n  <div class=\"element\">\n    <button \n      mat-raised-button \n      class=\"sbumit-button\"\n      color=\"primary\" \n      type=\"submit\" \n      [disabled]=\"!(formGroup.valid && formGroup.dirty)\"\n    >\n      Save\n    </button>\n  </div>\n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}