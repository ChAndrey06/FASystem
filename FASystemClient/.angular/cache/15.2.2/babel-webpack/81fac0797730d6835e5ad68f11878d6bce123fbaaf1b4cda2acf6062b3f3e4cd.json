{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, inject, Inject, Optional, NgModule } from '@angular/core';\nimport { __decorate } from 'tslib';\nimport { BehaviorSubject, map, shareReplay, ReplaySubject } from 'rxjs';\nclass NgxBaseStateDevtoolsConfig {\n  constructor(params) {\n    this.isEnabled = false;\n    Object.assign(this, params);\n  }\n}\nconst NGX_BASE_STATE_DEVTOOLS_CONFIG = new InjectionToken('NGX_BASE_STATE_DEVTOOLS_CONFIG', {\n  providedIn: 'root',\n  factory: () => new NgxBaseStateDevtoolsConfig({\n    isEnabled: false\n  })\n});\nconst ɵNGX_STATE_DECORATOR_METADATA_FIELD = 'ɵNgxState';\nconst tryDoActionMethodName = 'tryDoAction';\nconst actionLikeInvokedMethodName = '_onActionLikeInvoked';\nconst actionLikeInvokeEndMethodName = '_onActionLikeInvokeEnd';\nfunction patchedActionFunction(actionName, actionFunction) {\n  return function innerFunction(...args) {\n    return this[tryDoActionMethodName](actionName, () => {\n      this[actionLikeInvokedMethodName](actionName);\n      const originalMethodResult = actionFunction.apply(this, args);\n      this[actionLikeInvokeEndMethodName]();\n      return originalMethodResult;\n    });\n  };\n}\nconst forbiddenMethodNamesToPatch = ['constructor', 'ngOnDestroy'];\nfunction NgxState() {\n  return function InnerFunction(targetClass) {\n    const prototype = targetClass.prototype;\n    markTargetClassWithMetadata(prototype);\n    Object.getOwnPropertyNames(prototype).forEach(fieldName => {\n      const isFieldNameForbidden = forbiddenMethodNamesToPatch.includes(fieldName);\n      if (!isFieldNameForbidden && isFieldHaveTypeFunction(prototype, fieldName)) {\n        markMethodOfStateAsAction(prototype, fieldName, prototype[fieldName]);\n      }\n    });\n  };\n}\nfunction markTargetClassWithMetadata(stateClass) {\n  stateClass[ɵNGX_STATE_DECORATOR_METADATA_FIELD] = true;\n}\nfunction markMethodOfStateAsAction(stateClass, fieldName, originalMethod) {\n  stateClass[fieldName] = patchedActionFunction(fieldName, originalMethod);\n}\nfunction isFieldHaveTypeFunction(stateClass, fieldName) {\n  return !Object.getOwnPropertyDescriptor(stateClass, fieldName)?.get && !Object.getOwnPropertyDescriptor(stateClass, fieldName)?.set && typeof stateClass[fieldName] === 'function';\n}\nfunction ɵAction(targetClass, fieldName, descriptor) {\n  const originalMethod = descriptor.value;\n  descriptor.value = patchedActionFunction(fieldName, originalMethod);\n}\nvar ɵMetadataKeyEnum;\n(function (ɵMetadataKeyEnum) {\n  ɵMetadataKeyEnum[\"DevtoolsEnabled\"] = \"__NGX_BASE_STATE_DEVTOOLS_ENABLED\";\n  ɵMetadataKeyEnum[\"MetadataOperation\"] = \"__NGX_BASE_STATE_METADATA_OPERATION\";\n})(ɵMetadataKeyEnum || (ɵMetadataKeyEnum = {}));\nvar ɵMetadataOperationTypeEnum;\n(function (ɵMetadataOperationTypeEnum) {\n  ɵMetadataOperationTypeEnum[ɵMetadataOperationTypeEnum[\"Init\"] = 1] = \"Init\";\n  ɵMetadataOperationTypeEnum[ɵMetadataOperationTypeEnum[\"Update\"] = 2] = \"Update\";\n  ɵMetadataOperationTypeEnum[ɵMetadataOperationTypeEnum[\"Destroy\"] = 3] = \"Destroy\";\n})(ɵMetadataOperationTypeEnum || (ɵMetadataOperationTypeEnum = {}));\nclass ɵMetadataStorage {\n  get window() {\n    return window;\n  }\n  get(key) {\n    return this.window[key];\n  }\n  set(key, data) {\n    this.window[key] = data;\n  }\n}\nɵMetadataStorage.ɵfac = function ɵMetadataStorage_Factory(t) {\n  return new (t || ɵMetadataStorage)();\n};\nɵMetadataStorage.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ɵMetadataStorage,\n  factory: ɵMetadataStorage.ɵfac,\n  providedIn: 'root'\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ɵMetadataStorage, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass ɵStackTrace {\n  static capture() {\n    // FIXME: Refactor and investigate\n    const stackTrace = new Error().stack;\n    const rawMethods = stackTrace.split('at ');\n    const methods = rawMethods.map(rawMethod => rawMethod.slice(0, rawMethod.indexOf(' ('))).filter(method => !method.startsWith('http'));\n    return methods;\n  }\n}\nconst INITIAL_DATA = new InjectionToken('__NGX_BASE_STATE_INITIAL_DATA');\nconst INITIAL_CONFIG = new InjectionToken('__NGX_BASE_STATE_INITIAL_CONFIG');\nconst CLASS_ID_FIELD = '_ɵID';\n/**\n *\t@class\n *\t@classdes This is a base class that used for creating hight level state classes\n */\nclass BaseState {\n  constructor( /** Initial data should be passed via the `super` method call. */\n  initialData = null, /** Initial config should be passed via the `super` method call. */\n  initialConfig = null) {\n    this.initialData = initialData;\n    this.initialConfig = initialConfig;\n    this._devtoolsConfig = inject(NGX_BASE_STATE_DEVTOOLS_CONFIG);\n    this._metadataStorage = inject(ɵMetadataStorage);\n    this._currentlyInvokedAction = null;\n    this._stackTraceOfCurrentlyInvokedAction = null;\n    this._data$ = new BehaviorSubject(this.initialData);\n    this.initClassIdIfAbsent();\n    this.showConsoleWarningIfClassHaveNotDecorator();\n    this.init();\n  }\n  /**\n   * \tGet `Observable` with state data.\n   *  @public\n   *\t@return {Generic} Observable with the state data.\n   */\n  get data$() {\n    return this._data$.asObservable();\n  }\n  /**\n   * \tGet state data.\n   *  @public\n   *\t@return {Generic} State data.\n   */\n  get data() {\n    return this._data$.value;\n  }\n  /**\n   *  Base implementation of `ngOnDestroy`.\n   *  Don't forget to call `super.ngOnDestroy` in case of override.\n   *  @public\n   */\n  ngOnDestroy() {\n    this.emitMetadataOperation(ɵMetadataOperationTypeEnum.Destroy);\n  }\n  /**\n   *  Set new value to state\n   *  @public\n   *\t@param {Generic} value - the value that should be set to update `BehaviorSubject`.\n   */\n  set(value) {\n    this.setNewValue(value);\n  }\n  /**\n   *  Clear state value. (Will be set `null`)\n   *  @public\n   */\n  clear() {\n    this.setNewValue(null);\n  }\n  /**\n   *  Restore initial data from constructor.\n   *  @public\n   */\n  restoreInitialData() {\n    this.setNewValue(this.initialData);\n  }\n  /**\n   *  Method for set data functionality. It may be expanded.\n   *  The idea is to process the creation of new instances of complex structures.\n   *  @protected\n   *\t@param {Generic | null} value - the value that should be set to update `BehaviorSubject`.\n   */\n  setNewValue(value) {\n    this._data$.next(value);\n    this.emitMetadataOperation(ɵMetadataOperationTypeEnum.Update);\n  }\n  /**\n   * \tMethod used for try to work out any method\n   *  @protected\n   *\t@param {string} actionName - Action you try to fire. Used to show in Error text when something went wrong.\n   *\t@param {Function} actionFunc - Callback with logic. When something goes wrong - Error will be created.\n   *\t@return {Generic} result of the callback call.\n   */\n  tryDoAction(actionName, actionFunc) {\n    try {\n      return actionFunc();\n    } catch (error) {\n      this.catchError(error, actionName);\n      return undefined;\n    }\n  }\n  /**\n   *  Method that\tprocessed error for user friendly error messages\n   *  @protected\n   *\t@param {Error} error - Error.\n   *\t@param {string} actionName - Name of the action where error happened.\n   */\n  catchError(error, actionName) {\n    throw new Error(`\\n${this.constructor.name} [${actionName}]: ${error.message}`);\n  }\n  init() {\n    this.emitMetadataOperation(ɵMetadataOperationTypeEnum.Init);\n  }\n  // Using by decorators\n  _onActionLikeInvoked(actionName) {\n    if (this._devtoolsConfig.isEnabled && !this._currentlyInvokedAction) {\n      this._currentlyInvokedAction = actionName;\n      this._stackTraceOfCurrentlyInvokedAction = ɵStackTrace.capture();\n    }\n  }\n  // Using by decorators\n  _onActionLikeInvokeEnd() {\n    if (this._devtoolsConfig.isEnabled) {\n      this._currentlyInvokedAction = null;\n      this._stackTraceOfCurrentlyInvokedAction = null;\n    }\n  }\n  showConsoleWarningIfClassHaveNotDecorator() {\n    if (this._devtoolsConfig.isEnabled && !this[ɵNGX_STATE_DECORATOR_METADATA_FIELD]) {\n      console.warn(`${this.constructor.name} class is missed @NgxState() decorator. ` + `Some features of DevTools will work incorrectly!`);\n    }\n  }\n  initClassIdIfAbsent() {\n    if (!this.constructor[CLASS_ID_FIELD]) {\n      this.constructor[CLASS_ID_FIELD] = Math.random();\n    }\n  }\n  /**\n   *  Emits information about state changes into `ReplaySubject` at the `window`.\n   *  Extension use this information to visually represent current state and history of states changes.\n   *  @private\n   */\n  emitMetadataOperation(type) {\n    if (this._devtoolsConfig.isEnabled) {\n      const operationEmitter$ = this._metadataStorage.get(ɵMetadataKeyEnum.MetadataOperation);\n      operationEmitter$.next({\n        type,\n        classId: this.constructor[CLASS_ID_FIELD],\n        className: this.constructor.name,\n        classContext: this.initialConfig?.context,\n        actionName: this._currentlyInvokedAction,\n        date: new Date().toJSON(),\n        data: this.data,\n        stackTrace: this._stackTraceOfCurrentlyInvokedAction\n      });\n    }\n  }\n}\nBaseState.ɵfac = function BaseState_Factory(t) {\n  return new (t || BaseState)(i0.ɵɵinject(INITIAL_DATA, 8), i0.ɵɵinject(INITIAL_CONFIG, 8));\n};\nBaseState.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: BaseState,\n  factory: BaseState.ɵfac\n});\n__decorate([ɵAction], BaseState.prototype, \"set\", null);\n__decorate([ɵAction], BaseState.prototype, \"clear\", null);\n__decorate([ɵAction], BaseState.prototype, \"restoreInitialData\", null);\n__decorate([ɵAction], BaseState.prototype, \"init\", null);\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseState, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [INITIAL_DATA]\n      }, {\n        type: Optional\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [INITIAL_CONFIG]\n      }, {\n        type: Optional\n      }]\n    }];\n  }, {\n    set: [],\n    clear: [],\n    restoreInitialData: [],\n    init: []\n  });\n})();\n\n/**\n *\t@class\n *\t@abstract\n *\t@classdes Array state class. Implementing base array functionality.\n */\nclass ArrayState extends BaseState {\n  /**\n   * \tReturn item by quired index.\n   *\t@public\n   *\t@param {Number} index - Quired index\n   *  @deprecated use `this.data[index]` instead\n   *\t@return {Generic} quired item.\n   */\n  getByIndex(index) {\n    const items = this.data;\n    return items[index];\n  }\n  /**\n   * \tUnshift item to array in state.\n   *\t@public\n   *\t@param {Generic} item - Item needs to unshift.\n   */\n  unshiftItem(item) {\n    const items = this.data;\n    items.unshift(item);\n    this.setNewValue(items);\n  }\n  /**\n   * \tShift array in state.\n   *\t@public\n   */\n  shift() {\n    const items = this.data;\n    items.shift();\n    this.setNewValue(items);\n  }\n  /**\n   * \tPop array in state.\n   *\t@public\n   */\n  pop() {\n    const items = this.data;\n    items.pop();\n    this.setNewValue(items);\n  }\n  /**\n   * \tConcat current state with another array.\n   *\t@param {T[]} array - Another array to concat with the current state.\n   *\t@public\n   */\n  concatWith(array) {\n    const items = this.data;\n    const newItems = items.concat(array);\n    this.setNewValue(newItems);\n  }\n  /**\n   * \tPush item to array in state.\n   *\t@public\n   *\t@param {Generic} item - Item needs to push\n   */\n  pushItem(item) {\n    const items = this.data;\n    items.push(item);\n    this.setNewValue(items);\n  }\n  /**\n   * \tInsert item in array by index.\n   *\t@public\n   *\t@param {number} index - Index where to insert new item.\n   *\t@param {Generic} item - Item need to insert.\n   */\n  insertItemByIndex(index, item) {\n    const items = this.data;\n    items.splice(index, 0, item);\n    this.setNewValue(items);\n  }\n  /**\n   * \tRemove item in array by item identify param (using `compareItems` method).\n   *\t@public\n   *\t@param {Generic} itemId - Id of item you want to remove.\n   */\n  removeItem(item) {\n    const index = this.data.findIndex(_item => this.compareItems(item, _item));\n    return this.removeItemByIndex(index);\n  }\n  /**\n   * \tRemove item in array by item id (using `getItemId` method).\n   *\t@public\n   *\t@param {Generic} itemId - Id of item you want to remove.\n   */\n  removeItemById(itemId) {\n    const index = this.data.findIndex(_item => itemId === this.getItemId(_item));\n    return this.removeItemByIndex(index);\n  }\n  /**\n   * \tRemove item in array by index.\n   *\t@public\n   *\t@param {number} index - Index of item you want to remove.\n   */\n  removeItemByIndex(index) {\n    const items = this.data;\n    const removedItem = this.data[index];\n    items.splice(index, 1);\n    this.setNewValue(items);\n    return removedItem;\n  }\n  /**\n   * \tUpdate item in array by item identify param (using `compareItems` method).\n   *\t@public\n  *\t@param {Generic} itemToUpdate - item that will be update.\n  */\n  updateItem(itemToUpdate) {\n    const items = this.data;\n    const newItemToUpdate = {\n      ...itemToUpdate\n    };\n    const itemIndex = items.findIndex(_currentItem => this.compareItems(_currentItem, newItemToUpdate));\n    items[itemIndex] = newItemToUpdate;\n    this.setNewValue(items);\n  }\n  /**\n   * \tUpdate item in array by index.\n   *\t@public\n   *\t@param {Generic} itemToUpdate - item that will be update.\n   *\t@param {Generic} index - index of item that need to update.\n   */\n  updateItemByIndex(itemToUpdate, index) {\n    const items = this.data;\n    items[index] = itemToUpdate;\n    this.setNewValue(items);\n  }\n  setNewValue(value) {\n    if (value) {\n      super.setNewValue([...value]);\n    } else {\n      super.setNewValue(null);\n    }\n  }\n  catchError(error, actionName) {\n    if (error instanceof TypeError) {\n      throw new Error(`\\n${this.constructor.name} [${actionName}]: ` + `Firstly set Array.\\n\\n${error.message}`);\n    }\n    super.catchError(error, actionName);\n  }\n  /**\n   *\tMust return identify param of item.\n   *\tMethod must be filled in child classes.\n   *\tUsed for compare two any items.\n   *  @protected\n   *\t@param {Generic} item - item of your state.\n   *\t@return {Generic} identify param of item.\n   */\n  getItemId(item) {\n    return item;\n  }\n  /**\n   * \tCompare two items via `getItemId`\n   *\t@private\n   *\t@param {Generic} itemToUpdate - item that will be update.\n   *\t@return {boolean} result of comparing two items via `getItemId`.\n   */\n  compareItems(firstItem, secondItem) {\n    return this.getItemId(firstItem) === this.getItemId(secondItem);\n  }\n}\n__decorate([ɵAction], ArrayState.prototype, \"unshiftItem\", null);\n__decorate([ɵAction], ArrayState.prototype, \"shift\", null);\n__decorate([ɵAction], ArrayState.prototype, \"pop\", null);\n__decorate([ɵAction], ArrayState.prototype, \"concatWith\", null);\n__decorate([ɵAction], ArrayState.prototype, \"pushItem\", null);\n__decorate([ɵAction], ArrayState.prototype, \"insertItemByIndex\", null);\n__decorate([ɵAction], ArrayState.prototype, \"removeItem\", null);\n__decorate([ɵAction], ArrayState.prototype, \"removeItemById\", null);\n__decorate([ɵAction], ArrayState.prototype, \"removeItemByIndex\", null);\n__decorate([ɵAction], ArrayState.prototype, \"updateItem\", null);\n__decorate([ɵAction], ArrayState.prototype, \"updateItemByIndex\", null);\n\n/**\n *\t@class\n *\t@classdes Object state class. Used for save state with Object type.\n */\nclass ObjectState extends BaseState {\n  /**\n   *  Updates state by merging new partial object with the existing one.\n   *  @public\n   *  @param {T | null} value - the value that should be set to update `BehaviorSubject`.\n   */\n  updateWithPartial(value) {\n    this.set({\n      ...this.data,\n      ...value\n    });\n  }\n  setNewValue(value) {\n    if (value) {\n      super.setNewValue({\n        ...value\n      });\n    } else {\n      super.setNewValue(null);\n    }\n  }\n  catchError(error, actionName) {\n    if (error instanceof TypeError) {\n      throw new Error(`\\n${this.constructor.name} [${actionName}]:` + `Firstly set Object.\\n\\n${error.message}`);\n    }\n    super.catchError(error, actionName);\n  }\n}\n__decorate([ɵAction], ObjectState.prototype, \"updateWithPartial\", null);\n\n/**\n *\t@class\n *\t@classdes Primitive state class. Used for save state with Primitive type (Like boolean, number or string).\n */\nclass PrimitiveState extends BaseState {}\n\n/**\n *\t@class\n *\t@classdes Record state class. Used for save state with Record type.\n */\nclass RecordState extends BaseState {\n  constructor() {\n    super(...arguments);\n    /**\n     *  Get `Observable` with all `keys` of your `Record` object state.\n     *  @public\n     */\n    this.keys$ = this.data$.pipe(map(() => this.keys), shareReplay(1));\n    /**\n     *  Get `Observable` with all `values` of your `Record` object state.\n     *  @public\n     */\n    this.values$ = this.data$.pipe(map(() => this.values), shareReplay(1));\n  }\n  /**\n   *  Get all `keys` of your `Record` object state.\n   *  @public\n   */\n  get keys() {\n    return this.data ? Object.keys(this.data) : [];\n  }\n  /**\n   *  Get all `values` of your `Record` object state.\n   *  @public\n   */\n  get values() {\n    return this.data ? Object.values(this.data) : [];\n  }\n  /**\n   * \tSet item to object in state.\n   *\t@public\n   *\t@param {TKey} key - Key to set into.\n   *\t@param {TValue} value - Value to set within `key`.\n   */\n  setItem(key, value) {\n    this.data[key] = value;\n    this.setNewValue(this.data);\n  }\n  /**\n   * \tRemove item from object in state.\n   *\t@public\n   *\t@param {TKey} key - Key to remove item within.\n   */\n  removeItem(key) {\n    delete this.data[key];\n    this.setNewValue(this.data);\n  }\n  /**\n   * \tRemove all items from object in state.\n   *\t@public\n   */\n  removeAllItems() {\n    this.set({});\n  }\n  setNewValue(value) {\n    if (value) {\n      super.setNewValue({\n        ...value\n      });\n    } else {\n      super.setNewValue(null);\n    }\n  }\n  catchError(error, actionName) {\n    if (error instanceof TypeError) {\n      throw new Error(`\\n${this.constructor.name} [${actionName}]: ` + `Firstly set Object [Record].\\n\\n${error.message}`);\n    }\n    super.catchError(error, actionName);\n  }\n}\n__decorate([ɵAction], RecordState.prototype, \"setItem\", null);\n__decorate([ɵAction], RecordState.prototype, \"removeItem\", null);\n__decorate([ɵAction], RecordState.prototype, \"removeAllItems\", null);\nclass NgxBaseStateDevtoolsModule {\n  constructor(config, metadataStorage) {\n    this.config = config;\n    this.metadataStorage = metadataStorage;\n    if (this.config.isEnabled) {\n      this.metadataStorage.set(ɵMetadataKeyEnum.DevtoolsEnabled, true);\n      this.metadataStorage.set(ɵMetadataKeyEnum.MetadataOperation, new ReplaySubject());\n    }\n  }\n}\nNgxBaseStateDevtoolsModule.ɵfac = function NgxBaseStateDevtoolsModule_Factory(t) {\n  return new (t || NgxBaseStateDevtoolsModule)(i0.ɵɵinject(NGX_BASE_STATE_DEVTOOLS_CONFIG), i0.ɵɵinject(ɵMetadataStorage));\n};\nNgxBaseStateDevtoolsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgxBaseStateDevtoolsModule\n});\nNgxBaseStateDevtoolsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxBaseStateDevtoolsModule, [{\n    type: NgModule,\n    args: [{}]\n  }], function () {\n    return [{\n      type: NgxBaseStateDevtoolsConfig,\n      decorators: [{\n        type: Inject,\n        args: [NGX_BASE_STATE_DEVTOOLS_CONFIG]\n      }]\n    }, {\n      type: ɵMetadataStorage\n    }];\n  }, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArrayState, BaseState, NGX_BASE_STATE_DEVTOOLS_CONFIG, NgxBaseStateDevtoolsConfig, NgxBaseStateDevtoolsModule, NgxState, ObjectState, PrimitiveState, RecordState };","map":{"version":3,"names":["i0","InjectionToken","Injectable","inject","Inject","Optional","NgModule","__decorate","BehaviorSubject","map","shareReplay","ReplaySubject","NgxBaseStateDevtoolsConfig","constructor","params","isEnabled","Object","assign","NGX_BASE_STATE_DEVTOOLS_CONFIG","providedIn","factory","ɵNGX_STATE_DECORATOR_METADATA_FIELD","tryDoActionMethodName","actionLikeInvokedMethodName","actionLikeInvokeEndMethodName","patchedActionFunction","actionName","actionFunction","innerFunction","args","originalMethodResult","apply","forbiddenMethodNamesToPatch","NgxState","InnerFunction","targetClass","prototype","markTargetClassWithMetadata","getOwnPropertyNames","forEach","fieldName","isFieldNameForbidden","includes","isFieldHaveTypeFunction","markMethodOfStateAsAction","stateClass","originalMethod","getOwnPropertyDescriptor","get","set","ɵAction","descriptor","value","ɵMetadataKeyEnum","ɵMetadataOperationTypeEnum","ɵMetadataStorage","window","key","data","ɵfac","ɵprov","type","ɵStackTrace","capture","stackTrace","Error","stack","rawMethods","split","methods","rawMethod","slice","indexOf","filter","method","startsWith","INITIAL_DATA","INITIAL_CONFIG","CLASS_ID_FIELD","BaseState","initialData","initialConfig","_devtoolsConfig","_metadataStorage","_currentlyInvokedAction","_stackTraceOfCurrentlyInvokedAction","_data$","initClassIdIfAbsent","showConsoleWarningIfClassHaveNotDecorator","init","data$","asObservable","ngOnDestroy","emitMetadataOperation","Destroy","setNewValue","clear","restoreInitialData","next","Update","tryDoAction","actionFunc","error","catchError","undefined","name","message","Init","_onActionLikeInvoked","_onActionLikeInvokeEnd","console","warn","Math","random","operationEmitter$","MetadataOperation","classId","className","classContext","context","date","Date","toJSON","decorators","ArrayState","getByIndex","index","items","unshiftItem","item","unshift","shift","pop","concatWith","array","newItems","concat","pushItem","push","insertItemByIndex","splice","removeItem","findIndex","_item","compareItems","removeItemByIndex","removeItemById","itemId","getItemId","removedItem","updateItem","itemToUpdate","newItemToUpdate","itemIndex","_currentItem","updateItemByIndex","TypeError","firstItem","secondItem","ObjectState","updateWithPartial","PrimitiveState","RecordState","arguments","keys$","pipe","keys","values$","values","setItem","removeAllItems","NgxBaseStateDevtoolsModule","config","metadataStorage","DevtoolsEnabled","ɵmod","ɵinj"],"sources":["/home/eagold/MyFiles/FASystem/FASystemClient/node_modules/ngx-base-state/fesm2020/ngx-base-state.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, inject, Inject, Optional, NgModule } from '@angular/core';\nimport { __decorate } from 'tslib';\nimport { BehaviorSubject, map, shareReplay, ReplaySubject } from 'rxjs';\n\nclass NgxBaseStateDevtoolsConfig {\n    constructor(params) {\n        this.isEnabled = false;\n        Object.assign(this, params);\n    }\n}\n\nconst NGX_BASE_STATE_DEVTOOLS_CONFIG = new InjectionToken('NGX_BASE_STATE_DEVTOOLS_CONFIG', {\n    providedIn: 'root',\n    factory: () => new NgxBaseStateDevtoolsConfig({\n        isEnabled: false\n    })\n});\n\nconst ɵNGX_STATE_DECORATOR_METADATA_FIELD = 'ɵNgxState';\n\nconst tryDoActionMethodName = 'tryDoAction';\nconst actionLikeInvokedMethodName = '_onActionLikeInvoked';\nconst actionLikeInvokeEndMethodName = '_onActionLikeInvokeEnd';\nfunction patchedActionFunction(actionName, actionFunction) {\n    return function innerFunction(...args) {\n        return this[tryDoActionMethodName](actionName, () => {\n            this[actionLikeInvokedMethodName](actionName);\n            const originalMethodResult = actionFunction.apply(this, args);\n            this[actionLikeInvokeEndMethodName]();\n            return originalMethodResult;\n        });\n    };\n}\n\nconst forbiddenMethodNamesToPatch = [\n    'constructor',\n    'ngOnDestroy'\n];\nfunction NgxState() {\n    return function InnerFunction(targetClass) {\n        const prototype = targetClass.prototype;\n        markTargetClassWithMetadata(prototype);\n        Object.getOwnPropertyNames(prototype).forEach((fieldName) => {\n            const isFieldNameForbidden = forbiddenMethodNamesToPatch.includes(fieldName);\n            if (!isFieldNameForbidden && isFieldHaveTypeFunction(prototype, fieldName)) {\n                markMethodOfStateAsAction(prototype, fieldName, prototype[fieldName]);\n            }\n        });\n    };\n}\nfunction markTargetClassWithMetadata(stateClass) {\n    stateClass[ɵNGX_STATE_DECORATOR_METADATA_FIELD] = true;\n}\nfunction markMethodOfStateAsAction(stateClass, fieldName, originalMethod) {\n    stateClass[fieldName] = patchedActionFunction(fieldName, originalMethod);\n}\nfunction isFieldHaveTypeFunction(stateClass, fieldName) {\n    return (!Object.getOwnPropertyDescriptor(stateClass, fieldName)?.get &&\n        !Object.getOwnPropertyDescriptor(stateClass, fieldName)?.set &&\n        (typeof stateClass[fieldName] === 'function'));\n}\n\nfunction ɵAction(targetClass, fieldName, descriptor) {\n    const originalMethod = descriptor.value;\n    descriptor.value = patchedActionFunction(fieldName, originalMethod);\n}\n\nvar ɵMetadataKeyEnum;\n(function (ɵMetadataKeyEnum) {\n    ɵMetadataKeyEnum[\"DevtoolsEnabled\"] = \"__NGX_BASE_STATE_DEVTOOLS_ENABLED\";\n    ɵMetadataKeyEnum[\"MetadataOperation\"] = \"__NGX_BASE_STATE_METADATA_OPERATION\";\n})(ɵMetadataKeyEnum || (ɵMetadataKeyEnum = {}));\n\nvar ɵMetadataOperationTypeEnum;\n(function (ɵMetadataOperationTypeEnum) {\n    ɵMetadataOperationTypeEnum[ɵMetadataOperationTypeEnum[\"Init\"] = 1] = \"Init\";\n    ɵMetadataOperationTypeEnum[ɵMetadataOperationTypeEnum[\"Update\"] = 2] = \"Update\";\n    ɵMetadataOperationTypeEnum[ɵMetadataOperationTypeEnum[\"Destroy\"] = 3] = \"Destroy\";\n})(ɵMetadataOperationTypeEnum || (ɵMetadataOperationTypeEnum = {}));\n\nclass ɵMetadataStorage {\n    get window() {\n        return window;\n    }\n    get(key) {\n        return this.window[key];\n    }\n    set(key, data) {\n        this.window[key] = data;\n    }\n}\nɵMetadataStorage.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.4\", ngImport: i0, type: ɵMetadataStorage, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nɵMetadataStorage.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.4\", ngImport: i0, type: ɵMetadataStorage, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.4\", ngImport: i0, type: ɵMetadataStorage, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }] });\n\nclass ɵStackTrace {\n    static capture() {\n        // FIXME: Refactor and investigate\n        const stackTrace = new Error().stack;\n        const rawMethods = stackTrace.split('at ');\n        const methods = rawMethods\n            .map((rawMethod) => rawMethod.slice(0, rawMethod.indexOf(' (')))\n            .filter((method) => !method.startsWith('http'));\n        return methods;\n    }\n}\n\nconst INITIAL_DATA = new InjectionToken('__NGX_BASE_STATE_INITIAL_DATA');\nconst INITIAL_CONFIG = new InjectionToken('__NGX_BASE_STATE_INITIAL_CONFIG');\nconst CLASS_ID_FIELD = '_ɵID';\n/**\n *\t@class\n *\t@classdes This is a base class that used for creating hight level state classes\n */\nclass BaseState {\n    constructor(\n    /** Initial data should be passed via the `super` method call. */\n    initialData = null, \n    /** Initial config should be passed via the `super` method call. */\n    initialConfig = null) {\n        this.initialData = initialData;\n        this.initialConfig = initialConfig;\n        this._devtoolsConfig = inject(NGX_BASE_STATE_DEVTOOLS_CONFIG);\n        this._metadataStorage = inject(ɵMetadataStorage);\n        this._currentlyInvokedAction = null;\n        this._stackTraceOfCurrentlyInvokedAction = null;\n        this._data$ = new BehaviorSubject(this.initialData);\n        this.initClassIdIfAbsent();\n        this.showConsoleWarningIfClassHaveNotDecorator();\n        this.init();\n    }\n    /**\n     * \tGet `Observable` with state data.\n     *  @public\n     *\t@return {Generic} Observable with the state data.\n     */\n    get data$() {\n        return this._data$.asObservable();\n    }\n    /**\n     * \tGet state data.\n     *  @public\n     *\t@return {Generic} State data.\n     */\n    get data() {\n        return this._data$.value;\n    }\n    /**\n     *  Base implementation of `ngOnDestroy`.\n     *  Don't forget to call `super.ngOnDestroy` in case of override.\n     *  @public\n     */\n    ngOnDestroy() {\n        this.emitMetadataOperation(ɵMetadataOperationTypeEnum.Destroy);\n    }\n    /**\n     *  Set new value to state\n     *  @public\n     *\t@param {Generic} value - the value that should be set to update `BehaviorSubject`.\n     */\n    set(value) {\n        this.setNewValue(value);\n    }\n    /**\n     *  Clear state value. (Will be set `null`)\n     *  @public\n     */\n    clear() {\n        this.setNewValue(null);\n    }\n    /**\n     *  Restore initial data from constructor.\n     *  @public\n     */\n    restoreInitialData() {\n        this.setNewValue(this.initialData);\n    }\n    /**\n     *  Method for set data functionality. It may be expanded.\n     *  The idea is to process the creation of new instances of complex structures.\n     *  @protected\n     *\t@param {Generic | null} value - the value that should be set to update `BehaviorSubject`.\n     */\n    setNewValue(value) {\n        this._data$.next(value);\n        this.emitMetadataOperation(ɵMetadataOperationTypeEnum.Update);\n    }\n    /**\n     * \tMethod used for try to work out any method\n     *  @protected\n     *\t@param {string} actionName - Action you try to fire. Used to show in Error text when something went wrong.\n     *\t@param {Function} actionFunc - Callback with logic. When something goes wrong - Error will be created.\n     *\t@return {Generic} result of the callback call.\n     */\n    tryDoAction(actionName, actionFunc) {\n        try {\n            return actionFunc();\n        }\n        catch (error) {\n            this.catchError(error, actionName);\n            return undefined;\n        }\n    }\n    /**\n     *  Method that\tprocessed error for user friendly error messages\n     *  @protected\n     *\t@param {Error} error - Error.\n     *\t@param {string} actionName - Name of the action where error happened.\n     */\n    catchError(error, actionName) {\n        throw new Error(`\\n${this.constructor.name} [${actionName}]: ${error.message}`);\n    }\n    init() {\n        this.emitMetadataOperation(ɵMetadataOperationTypeEnum.Init);\n    }\n    // Using by decorators\n    _onActionLikeInvoked(actionName) {\n        if (this._devtoolsConfig.isEnabled && !this._currentlyInvokedAction) {\n            this._currentlyInvokedAction = actionName;\n            this._stackTraceOfCurrentlyInvokedAction = ɵStackTrace.capture();\n        }\n    }\n    // Using by decorators\n    _onActionLikeInvokeEnd() {\n        if (this._devtoolsConfig.isEnabled) {\n            this._currentlyInvokedAction = null;\n            this._stackTraceOfCurrentlyInvokedAction = null;\n        }\n    }\n    showConsoleWarningIfClassHaveNotDecorator() {\n        if (this._devtoolsConfig.isEnabled && !this[ɵNGX_STATE_DECORATOR_METADATA_FIELD]) {\n            console.warn(`${this.constructor.name} class is missed @NgxState() decorator. ` +\n                `Some features of DevTools will work incorrectly!`);\n        }\n    }\n    initClassIdIfAbsent() {\n        if (!this.constructor[CLASS_ID_FIELD]) {\n            this.constructor[CLASS_ID_FIELD] = Math.random();\n        }\n    }\n    /**\n     *  Emits information about state changes into `ReplaySubject` at the `window`.\n     *  Extension use this information to visually represent current state and history of states changes.\n     *  @private\n     */\n    emitMetadataOperation(type) {\n        if (this._devtoolsConfig.isEnabled) {\n            const operationEmitter$ = this._metadataStorage\n                .get(ɵMetadataKeyEnum.MetadataOperation);\n            operationEmitter$.next({\n                type,\n                classId: this.constructor[CLASS_ID_FIELD],\n                className: this.constructor.name,\n                classContext: this.initialConfig?.context,\n                actionName: this._currentlyInvokedAction,\n                date: new Date().toJSON(),\n                data: this.data,\n                stackTrace: this._stackTraceOfCurrentlyInvokedAction\n            });\n        }\n    }\n}\nBaseState.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.4\", ngImport: i0, type: BaseState, deps: [{ token: INITIAL_DATA, optional: true }, { token: INITIAL_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });\nBaseState.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"14.2.4\", ngImport: i0, type: BaseState });\n__decorate([\n    ɵAction\n], BaseState.prototype, \"set\", null);\n__decorate([\n    ɵAction\n], BaseState.prototype, \"clear\", null);\n__decorate([\n    ɵAction\n], BaseState.prototype, \"restoreInitialData\", null);\n__decorate([\n    ɵAction\n], BaseState.prototype, \"init\", null);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.4\", ngImport: i0, type: BaseState, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [INITIAL_DATA]\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [INITIAL_CONFIG]\n                }, {\n                    type: Optional\n                }] }]; }, propDecorators: { set: [], clear: [], restoreInitialData: [], init: [] } });\n\n/**\n *\t@class\n *\t@abstract\n *\t@classdes Array state class. Implementing base array functionality.\n */\nclass ArrayState extends BaseState {\n    /**\n     * \tReturn item by quired index.\n     *\t@public\n     *\t@param {Number} index - Quired index\n     *  @deprecated use `this.data[index]` instead\n     *\t@return {Generic} quired item.\n     */\n    getByIndex(index) {\n        const items = this.data;\n        return items[index];\n    }\n    /**\n     * \tUnshift item to array in state.\n     *\t@public\n     *\t@param {Generic} item - Item needs to unshift.\n     */\n    unshiftItem(item) {\n        const items = this.data;\n        items.unshift(item);\n        this.setNewValue(items);\n    }\n    /**\n     * \tShift array in state.\n     *\t@public\n     */\n    shift() {\n        const items = this.data;\n        items.shift();\n        this.setNewValue(items);\n    }\n    /**\n     * \tPop array in state.\n     *\t@public\n     */\n    pop() {\n        const items = this.data;\n        items.pop();\n        this.setNewValue(items);\n    }\n    /**\n     * \tConcat current state with another array.\n     *\t@param {T[]} array - Another array to concat with the current state.\n     *\t@public\n     */\n    concatWith(array) {\n        const items = this.data;\n        const newItems = items.concat(array);\n        this.setNewValue(newItems);\n    }\n    /**\n     * \tPush item to array in state.\n     *\t@public\n     *\t@param {Generic} item - Item needs to push\n     */\n    pushItem(item) {\n        const items = this.data;\n        items.push(item);\n        this.setNewValue(items);\n    }\n    /**\n     * \tInsert item in array by index.\n     *\t@public\n     *\t@param {number} index - Index where to insert new item.\n     *\t@param {Generic} item - Item need to insert.\n     */\n    insertItemByIndex(index, item) {\n        const items = this.data;\n        items.splice(index, 0, item);\n        this.setNewValue(items);\n    }\n    /**\n     * \tRemove item in array by item identify param (using `compareItems` method).\n     *\t@public\n     *\t@param {Generic} itemId - Id of item you want to remove.\n     */\n    removeItem(item) {\n        const index = this.data.findIndex((_item) => this.compareItems(item, _item));\n        return this.removeItemByIndex(index);\n    }\n    /**\n     * \tRemove item in array by item id (using `getItemId` method).\n     *\t@public\n     *\t@param {Generic} itemId - Id of item you want to remove.\n     */\n    removeItemById(itemId) {\n        const index = this.data.findIndex((_item) => itemId === this.getItemId(_item));\n        return this.removeItemByIndex(index);\n    }\n    /**\n     * \tRemove item in array by index.\n     *\t@public\n     *\t@param {number} index - Index of item you want to remove.\n     */\n    removeItemByIndex(index) {\n        const items = this.data;\n        const removedItem = this.data[index];\n        items.splice(index, 1);\n        this.setNewValue(items);\n        return removedItem;\n    }\n    /**\n     * \tUpdate item in array by item identify param (using `compareItems` method).\n     *\t@public\n    *\t@param {Generic} itemToUpdate - item that will be update.\n    */\n    updateItem(itemToUpdate) {\n        const items = this.data;\n        const newItemToUpdate = { ...itemToUpdate };\n        const itemIndex = items.findIndex((_currentItem) => this.compareItems(_currentItem, newItemToUpdate));\n        items[itemIndex] = newItemToUpdate;\n        this.setNewValue(items);\n    }\n    /**\n     * \tUpdate item in array by index.\n     *\t@public\n     *\t@param {Generic} itemToUpdate - item that will be update.\n     *\t@param {Generic} index - index of item that need to update.\n     */\n    updateItemByIndex(itemToUpdate, index) {\n        const items = this.data;\n        items[index] = itemToUpdate;\n        this.setNewValue(items);\n    }\n    setNewValue(value) {\n        if (value) {\n            super.setNewValue([...value]);\n        }\n        else {\n            super.setNewValue(null);\n        }\n    }\n    catchError(error, actionName) {\n        if (error instanceof TypeError) {\n            throw new Error(`\\n${this.constructor.name} [${actionName}]: ` +\n                `Firstly set Array.\\n\\n${error.message}`);\n        }\n        super.catchError(error, actionName);\n    }\n    /**\n     *\tMust return identify param of item.\n     *\tMethod must be filled in child classes.\n     *\tUsed for compare two any items.\n     *  @protected\n     *\t@param {Generic} item - item of your state.\n     *\t@return {Generic} identify param of item.\n     */\n    getItemId(item) {\n        return item;\n    }\n    /**\n     * \tCompare two items via `getItemId`\n     *\t@private\n     *\t@param {Generic} itemToUpdate - item that will be update.\n     *\t@return {boolean} result of comparing two items via `getItemId`.\n     */\n    compareItems(firstItem, secondItem) {\n        return (this.getItemId(firstItem) === this.getItemId(secondItem));\n    }\n}\n__decorate([\n    ɵAction\n], ArrayState.prototype, \"unshiftItem\", null);\n__decorate([\n    ɵAction\n], ArrayState.prototype, \"shift\", null);\n__decorate([\n    ɵAction\n], ArrayState.prototype, \"pop\", null);\n__decorate([\n    ɵAction\n], ArrayState.prototype, \"concatWith\", null);\n__decorate([\n    ɵAction\n], ArrayState.prototype, \"pushItem\", null);\n__decorate([\n    ɵAction\n], ArrayState.prototype, \"insertItemByIndex\", null);\n__decorate([\n    ɵAction\n], ArrayState.prototype, \"removeItem\", null);\n__decorate([\n    ɵAction\n], ArrayState.prototype, \"removeItemById\", null);\n__decorate([\n    ɵAction\n], ArrayState.prototype, \"removeItemByIndex\", null);\n__decorate([\n    ɵAction\n], ArrayState.prototype, \"updateItem\", null);\n__decorate([\n    ɵAction\n], ArrayState.prototype, \"updateItemByIndex\", null);\n\n/**\n *\t@class\n *\t@classdes Object state class. Used for save state with Object type.\n */\nclass ObjectState extends BaseState {\n    /**\n     *  Updates state by merging new partial object with the existing one.\n     *  @public\n     *  @param {T | null} value - the value that should be set to update `BehaviorSubject`.\n     */\n    updateWithPartial(value) {\n        this.set({ ...this.data, ...value });\n    }\n    setNewValue(value) {\n        if (value) {\n            super.setNewValue({ ...value });\n        }\n        else {\n            super.setNewValue(null);\n        }\n    }\n    catchError(error, actionName) {\n        if (error instanceof TypeError) {\n            throw new Error(`\\n${this.constructor.name} [${actionName}]:` +\n                `Firstly set Object.\\n\\n${error.message}`);\n        }\n        super.catchError(error, actionName);\n    }\n}\n__decorate([\n    ɵAction\n], ObjectState.prototype, \"updateWithPartial\", null);\n\n/**\n *\t@class\n *\t@classdes Primitive state class. Used for save state with Primitive type (Like boolean, number or string).\n */\nclass PrimitiveState extends BaseState {\n}\n\n/**\n *\t@class\n *\t@classdes Record state class. Used for save state with Record type.\n */\nclass RecordState extends BaseState {\n    constructor() {\n        super(...arguments);\n        /**\n         *  Get `Observable` with all `keys` of your `Record` object state.\n         *  @public\n         */\n        this.keys$ = this.data$\n            .pipe(map(() => this.keys), shareReplay(1));\n        /**\n         *  Get `Observable` with all `values` of your `Record` object state.\n         *  @public\n         */\n        this.values$ = this.data$\n            .pipe(map(() => this.values), shareReplay(1));\n    }\n    /**\n     *  Get all `keys` of your `Record` object state.\n     *  @public\n     */\n    get keys() {\n        return (this.data) ? Object.keys(this.data) : [];\n    }\n    /**\n     *  Get all `values` of your `Record` object state.\n     *  @public\n     */\n    get values() {\n        return (this.data) ? Object.values(this.data) : [];\n    }\n    /**\n     * \tSet item to object in state.\n     *\t@public\n     *\t@param {TKey} key - Key to set into.\n     *\t@param {TValue} value - Value to set within `key`.\n     */\n    setItem(key, value) {\n        this.data[key] = value;\n        this.setNewValue(this.data);\n    }\n    /**\n     * \tRemove item from object in state.\n     *\t@public\n     *\t@param {TKey} key - Key to remove item within.\n     */\n    removeItem(key) {\n        delete this.data[key];\n        this.setNewValue(this.data);\n    }\n    /**\n     * \tRemove all items from object in state.\n     *\t@public\n     */\n    removeAllItems() {\n        this.set({});\n    }\n    setNewValue(value) {\n        if (value) {\n            super.setNewValue({ ...value });\n        }\n        else {\n            super.setNewValue(null);\n        }\n    }\n    catchError(error, actionName) {\n        if (error instanceof TypeError) {\n            throw new Error(`\\n${this.constructor.name} [${actionName}]: ` +\n                `Firstly set Object [Record].\\n\\n${error.message}`);\n        }\n        super.catchError(error, actionName);\n    }\n}\n__decorate([\n    ɵAction\n], RecordState.prototype, \"setItem\", null);\n__decorate([\n    ɵAction\n], RecordState.prototype, \"removeItem\", null);\n__decorate([\n    ɵAction\n], RecordState.prototype, \"removeAllItems\", null);\n\nclass NgxBaseStateDevtoolsModule {\n    constructor(config, metadataStorage) {\n        this.config = config;\n        this.metadataStorage = metadataStorage;\n        if (this.config.isEnabled) {\n            this.metadataStorage.set(ɵMetadataKeyEnum.DevtoolsEnabled, true);\n            this.metadataStorage.set(ɵMetadataKeyEnum.MetadataOperation, new ReplaySubject());\n        }\n    }\n}\nNgxBaseStateDevtoolsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"14.2.4\", ngImport: i0, type: NgxBaseStateDevtoolsModule, deps: [{ token: NGX_BASE_STATE_DEVTOOLS_CONFIG }, { token: ɵMetadataStorage }], target: i0.ɵɵFactoryTarget.NgModule });\nNgxBaseStateDevtoolsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"14.2.4\", ngImport: i0, type: NgxBaseStateDevtoolsModule });\nNgxBaseStateDevtoolsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"14.2.4\", ngImport: i0, type: NgxBaseStateDevtoolsModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"14.2.4\", ngImport: i0, type: NgxBaseStateDevtoolsModule, decorators: [{\n            type: NgModule,\n            args: [{}]\n        }], ctorParameters: function () { return [{ type: NgxBaseStateDevtoolsConfig, decorators: [{\n                    type: Inject,\n                    args: [NGX_BASE_STATE_DEVTOOLS_CONFIG]\n                }] }, { type: ɵMetadataStorage }]; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ArrayState, BaseState, NGX_BASE_STATE_DEVTOOLS_CONFIG, NgxBaseStateDevtoolsConfig, NgxBaseStateDevtoolsModule, NgxState, ObjectState, PrimitiveState, RecordState };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}