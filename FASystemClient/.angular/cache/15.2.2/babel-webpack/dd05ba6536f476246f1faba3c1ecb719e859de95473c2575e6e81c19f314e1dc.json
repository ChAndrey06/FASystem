{"ast":null,"code":"import { __decorate, __param } from \"tslib\";\nimport { Component, Inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { Loadable } from '@core/helpers';\nimport { TransactionTypes } from '@features/transactions';\nlet DetailsComponent = class DetailsComponent {\n  constructor(viewDestroyed$, formBuilder, bookingsService) {\n    this.viewDestroyed$ = viewDestroyed$;\n    this.formBuilder = formBuilder;\n    this.bookingsService = bookingsService;\n    this.accounts = new Loadable([], false);\n    this.formGroup = this.formBuilder.group({\n      typeId: [TransactionTypes.expense, Validators.required],\n      amount: [null, Validators.required],\n      description: [null, [Validators.required, Validators.maxLength(500)]],\n      categoryId: [null, [Validators.required]],\n      accountId: [null, [Validators.required]]\n    });\n  }\n  get isSigned() {\n    return Boolean(this.booking?.signature);\n  }\n  ngOnInit() {\n    this.updateBikes();\n    this.bikeNumeSubscribe();\n  }\n  ngOnChanges(changes) {\n    if (changes['booking']) {\n      this.formGroup.reset(this.booking);\n      const resetSignature = this.formGroup.get('resetSignature');\n      if (this.isSigned) resetSignature?.enable();else resetSignature?.disable();\n    }\n  }\n  onSubmit(form) {\n    if (form.resetSignature) form.signature = '';\n    this.saveEvent.emit(form);\n    console.log(form);\n  }\n  onBikeSelected(event) {\n    const bike = event.option.value;\n    this.formGroup.patchValue({\n      bikeId: bike.id,\n      bikeName: bike.name,\n      bikeNumber: bike.number\n    });\n  }\n  updateBikes(filter) {\n    this.bikes.isLoading = true;\n    this.bookingsService.searchBikes(filter ?? '').pipe(takeUntil(this.viewDestroyed$)).subscribe({\n      next: data => this.bikes.setData(data),\n      error: error => this.bikes.setError(error)\n    });\n  }\n  bikeNumeSubscribe() {\n    const bikeNumeFC = this.formGroup.get('bikeName');\n    bikeNumeFC && bikeNumeFC.valueChanges.pipe(takeUntil(this.viewDestroyed$)).subscribe(value => {\n      this.updateBikes(value);\n      console.log(this.formGroup.value, this.formGroup.valid);\n    });\n  }\n  onClearBikeNameClicked() {\n    this.formGroup.patchValue({\n      bikeName: ''\n    });\n  }\n};\nDetailsComponent = __decorate([Component({\n  selector: 'app-details',\n  standalone: true,\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\n  templateUrl: './details.component.html',\n  styleUrls: ['./details.component.scss']\n}), __param(0, Inject(DestroyService))], DetailsComponent);\nexport { DetailsComponent };","map":{"version":3,"mappings":"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","names":["Component","Inject","CommonModule","FormsModule","ReactiveFormsModule","Validators","Loadable","TransactionTypes","DetailsComponent","constructor","viewDestroyed$","formBuilder","bookingsService","group","typeId","expense","required","amount","description","maxLength","categoryId","accountId","isSigned","Boolean","booking","signature","ngOnInit","updateBikes","bikeNumeSubscribe","ngOnChanges","changes","formGroup","reset","resetSignature","get","enable","disable","onSubmit","form","saveEvent","emit","console","log","onBikeSelected","event","bike","option","value","patchValue","bikeId","id","bikeName","name","bikeNumber","number","filter","bikes","isLoading","searchBikes","pipe","takeUntil","subscribe","next","data","setData","error","setError","bikeNumeFC","valueChanges","valid","onClearBikeNameClicked","selector","standalone","imports","templateUrl","styleUrls","__param","DestroyService"],"sourceRoot":"","sources":["/home/eagold/MyFiles/FASystem/FASystemClient/src/app/pages/expenses/details/details.component.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\n\nimport { ControlConfigMap, Loadable } from '@core/helpers';\nimport { AccountInterface } from '@features/accounts';\nimport { TransactionCreateInterface, TransactionTypes } from '@features/transactions';\n\n@Component({\n  selector: 'app-details',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  templateUrl: './details.component.html',\n  styleUrls: ['./details.component.scss']\n})\nexport class DetailsComponent {\n  accounts = new Loadable<AccountInterface[]>([], false);\n\n  formGroup: FormGroup = this.formBuilder.group<ControlConfigMap<TransactionCreateInterface>>({\n    typeId: [TransactionTypes.expense, Validators.required],\n    amount: [null, Validators.required],\n    description: [null, [Validators.required, Validators.maxLength(500)]],\n    categoryId: [null, [Validators.required]],\n    accountId: [null, [Validators.required]]\n  });\n\n  constructor(\n    @Inject(DestroyService) private readonly viewDestroyed$: Observable<void>,\n    private readonly formBuilder: FormBuilder,\n    private readonly bookingsService: BookingsService,\n  ) { }\n\n  get isSigned() {\n    return Boolean(this.booking?.signature)\n  }\n\n  ngOnInit(): void {\n    this.updateBikes();\n    this.bikeNumeSubscribe();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes['booking']) {\n      this.formGroup.reset(this.booking);\n\n      const resetSignature = this.formGroup.get('resetSignature');\n      if (this.isSigned) resetSignature?.enable();\n      else resetSignature?.disable();\n    }\n  }\n\n  onSubmit(form: any) {\n    if (form.resetSignature) form.signature = '';\n\n    this.saveEvent.emit(form as BookingCreateInterface);\n    console.log(form as BookingCreateInterface);\n  }\n\n  onBikeSelected(event: MatAutocompleteSelectedEvent): void {\n    const bike = event.option.value;\n    this.formGroup.patchValue({\n      bikeId: bike.id,\n      bikeName: bike.name,\n      bikeNumber: bike.number\n    });\n  }\n\n  updateBikes(filter?: string) {\n    this.bikes.isLoading = true;\n    this.bookingsService.searchBikes(filter ?? '')\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe({\n        next: data => this.bikes.setData(data),\n        error: error => this.bikes.setError(error)\n      });\n  }\n\n  bikeNumeSubscribe(): void {\n    const bikeNumeFC = this.formGroup.get('bikeName');\n\n    bikeNumeFC && bikeNumeFC.valueChanges\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe(value => {\n        this.updateBikes(value);\n        console.log(this.formGroup.value, this.formGroup.valid);\n      });\n  }\n\n  onClearBikeNameClicked(): void {\n    this.formGroup.patchValue({ bikeName: '' });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}