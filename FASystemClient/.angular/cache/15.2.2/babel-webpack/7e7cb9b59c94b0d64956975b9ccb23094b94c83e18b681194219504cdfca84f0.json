{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatInputModule } from '@angular/material/input';\nimport { takeUntil } from 'rxjs';\nimport { DestroyService } from '@core/services';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@features/users\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@angular/material/form-field\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"rxjs\";\nfunction LoginComponent_mat_error_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" Login error \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class LoginComponent {\n  constructor(viewDestroyed$, authService, formBuilder, router, route) {\n    this.viewDestroyed$ = viewDestroyed$;\n    this.authService = authService;\n    this.formBuilder = formBuilder;\n    this.router = router;\n    this.route = route;\n    this.loginError = false;\n    this.formGroup = this.formBuilder.group({\n      login: ['', Validators.required],\n      password: ['', [Validators.required, Validators.minLength(8), Validators.maxLength(18)]]\n    });\n  }\n  onLoginSubmit(login) {\n    this.loginError = false;\n    this.authService.login(login).pipe(takeUntil(this.viewDestroyed$)).subscribe(success => {\n      if (success) {\n        const returnUrl = this.route.snapshot.queryParams['returnUrl'] || ['home'];\n        console.log(returnUrl);\n        this.router.navigate(returnUrl).then(() => window.location.reload());\n      } else {\n        this.loginError = true;\n      }\n    });\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(DestroyService), i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  standalone: true,\n  features: [i0.ɵɵProvidersFeature([DestroyService]), i0.ɵɵStandaloneFeature],\n  decls: 14,\n  vars: 3,\n  consts: [[1, \"container\"], [1, \"form\", 3, \"formGroup\", \"ngSubmit\"], [1, \"form-element\"], [\"matInput\", \"\", \"placeholder\", \"Login\", \"formControlName\", \"login\", \"autofocus\", \"\"], [\"matInput\", \"\", \"placeholder\", \"Password\", \"type\", \"password\", \"formControlName\", \"password\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 1, \"submit\", 3, \"disabled\"], [4, \"ngIf\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_1_listener() {\n        return ctx.onLoginSubmit(ctx.formGroup.value);\n      });\n      i0.ɵɵelementStart(2, \"mat-form-field\", 2)(3, \"mat-label\");\n      i0.ɵɵtext(4, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(5, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(6, \"mat-form-field\", 2)(7, \"mat-label\");\n      i0.ɵɵtext(8, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 2)(11, \"button\", 5);\n      i0.ɵɵtext(12, \" Login \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(13, LoginComponent_mat_error_13_Template, 2, 0, \"mat-error\", 6);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.formGroup);\n      i0.ɵɵadvance(10);\n      i0.ɵɵproperty(\"disabled\", !ctx.formGroup.valid);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginError);\n    }\n  },\n  dependencies: [CommonModule, i4.NgIf, FormsModule, i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, ReactiveFormsModule, i2.FormGroupDirective, i2.FormControlName, MatFormFieldModule, i5.MatFormField, i5.MatLabel, i5.MatError, MatButtonModule, i6.MatButton, MatInputModule, i7.MatInput],\n  styles: [\".container[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n\\n.form[_ngcontent-%COMP%] {\\n  max-width: 400px;\\n}\\n\\n.form-element[_ngcontent-%COMP%], form[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n\\n.submit[_ngcontent-%COMP%] {\\n  width: 100%;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvcGFnZXMvbG9naW4vbG9naW4uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFBO0VBQ0EsdUJBQUE7RUFDQSxtQkFBQTtBQUNGOztBQUVBO0VBQ0UsZ0JBQUE7QUFDRjs7QUFFQTtFQUNFLFdBQUE7QUFDRjs7QUFFQTtFQUNFLFdBQUE7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbIi5jb250YWluZXIge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbn1cblxuLmZvcm0ge1xuICBtYXgtd2lkdGg6IDQwMHB4O1xufVxuXG4uZm9ybS1lbGVtZW50LCBmb3JtIHtcbiAgd2lkdGg6IDEwMCU7XG59XG5cbi5zdWJtaXQge1xuICB3aWR0aDogMTAwJTtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,YAAY,QAAQ,iBAAiB;AAE9C,SAAiCC,WAAW,EAAEC,mBAAmB,EAAEC,UAAU,QAAQ,gBAAgB;AAErG,SAASC,kBAAkB,QAAQ,8BAA8B;AACjE,SAASC,eAAe,QAAQ,0BAA0B;AAC1D,SAASC,cAAc,QAAQ,yBAAyB;AAIxD,SAASC,SAAS,QAAQ,MAAM;AAChC,SAASC,cAAc,QAAQ,gBAAgB;;;;;;;;;;;;ICK3CC,iCAA8B;IAC5BA,6BACF;IAAAA,iBAAY;;;ADgBhB,OAAM,MAAOC,cAAc;EAOzBC,YAC2CC,cAAgC,EACxDC,WAAwB,EACxBC,WAAwB,EACxBC,MAAc,EACdC,KAAqB;IAJG,mBAAc,GAAdJ,cAAc;IACtC,gBAAW,GAAXC,WAAW;IACX,gBAAW,GAAXC,WAAW;IACX,WAAM,GAANC,MAAM;IACN,UAAK,GAALC,KAAK;IAXxB,eAAU,GAAY,KAAK;IAC3B,cAAS,GAAc,IAAI,CAACF,WAAW,CAACG,KAAK,CAAmC;MAC9EC,KAAK,EAAE,CAAC,EAAE,EAAEf,UAAU,CAACgB,QAAQ,CAAC;MAChCC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACjB,UAAU,CAACgB,QAAQ,EAAEhB,UAAU,CAACkB,SAAS,CAAC,CAAC,CAAC,EAAElB,UAAU,CAACmB,SAAS,CAAC,EAAE,CAAC,CAAC;KACxF,CAAC;EAQE;EAEJC,aAAa,CAACL,KAAqB;IACjC,IAAI,CAACM,UAAU,GAAG,KAAK;IACvB,IAAI,CAACX,WAAW,CAACK,KAAK,CAACA,KAAK,CAAC,CAC1BO,IAAI,CAAClB,SAAS,CAAC,IAAI,CAACK,cAAc,CAAC,CAAC,CACpCc,SAAS,CAACC,OAAO,IAAG;MACnB,IAAIA,OAAO,EAAE;QACX,MAAMC,SAAS,GAAG,IAAI,CAACZ,KAAK,CAACa,QAAQ,CAACC,WAAW,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC;QAC1EC,OAAO,CAACC,GAAG,CAACJ,SAAS,CAAC;QACtB,IAAI,CAACb,MAAM,CAACkB,QAAQ,CAACL,SAAS,CAAC,CAC5BM,IAAI,CAAC,MAAMC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE,CAAC;OACxC,MAAM;QACL,IAAI,CAACb,UAAU,GAAG,IAAI;;IAE1B,CAAC,CAAC;EACN;;AA7BWd,cAAc;mBAAdA,cAAc,uBAQfF,cAAc;AAAA;AARbE,cAAc;QAAdA,cAAc;EAAA4B;EAAAC;EAAAC,iCARd,CACThC,cAAc,CACf;EAAAiC;EAAAC;EAAAC;EAAAC;IAAA;MC7BHnC,8BAAuB;MACSA;QAAA,OAAYoC,sCAA8B;MAAA,EAAC;MACvEpC,yCAAqC;MACxBA,qBAAK;MAAAA,iBAAY;MAC5BA,2BAAsE;MACxEA,iBAAiB;MAEjBA,yCAAqC;MACxBA,wBAAQ;MAAAA,iBAAY;MAC/BA,2BAAkF;MACpFA,iBAAiB;MAEjBA,+BAA0B;MAEtBA,wBACF;MAAAA,iBAAS;MAEXA,6EAEY;MACdA,iBAAO;;;MAnBDA,eAAuB;MAAvBA,yCAAuB;MAY8CA,gBAA6B;MAA7BA,+CAA6B;MAI1FA,eAAgB;MAAhBA,qCAAgB;;;iBDE5BT,YAAY,WACZC,WAAW,0FACXC,mBAAmB,6CAEnBE,kBAAkB,6CAClBC,eAAe,gBACfC,cAAc;EAAAwC;AAAA","names":["CommonModule","FormsModule","ReactiveFormsModule","Validators","MatFormFieldModule","MatButtonModule","MatInputModule","takeUntil","DestroyService","i0","LoginComponent","constructor","viewDestroyed$","authService","formBuilder","router","route","group","login","required","password","minLength","maxLength","onLoginSubmit","loginError","pipe","subscribe","success","returnUrl","snapshot","queryParams","console","log","navigate","then","window","location","reload","selectors","standalone","features","decls","vars","consts","template","ctx","styles"],"sourceRoot":"","sources":["/home/eagold/MyFiles/FASystem/FASystemClient/src/app/pages/login/login.component.ts","/home/eagold/MyFiles/FASystem/FASystemClient/src/app/pages/login/login.component.html"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, FormGroup, FormsModule, ReactiveFormsModule, Validators } from '@angular/forms';\n\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatInputModule } from '@angular/material/input';\n\nimport { AuthService, LoginInterface } from '@features/users';\nimport { ControlConfigMap } from '@core/helpers';\nimport { takeUntil } from 'rxjs';\nimport { DestroyService } from '@core/services';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-login',\n  standalone: true,\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n\n    MatFormFieldModule,\n    MatButtonModule,\n    MatInputModule\n  ],\n  providers: [\n    DestroyService\n  ],\n  templateUrl: 'login.component.html',\n  styleUrls: [\n    'login.component.scss'\n  ]\n})\nexport class LoginComponent {\n  loginError: boolean = false;\n  formGroup: FormGroup = this.formBuilder.group<ControlConfigMap<LoginInterface>>({\n    login: ['', Validators.required],\n    password: ['', [Validators.required, Validators.minLength(8), Validators.maxLength(18)]]\n  });\n\n  constructor(\n    @Inject(DestroyService) private readonly viewDestroyed$: Observable<void>,\n    private readonly authService: AuthService,\n    private readonly formBuilder: FormBuilder,\n    private readonly router: Router,\n    private readonly route: ActivatedRoute\n  ) { }\n\n  onLoginSubmit(login: LoginInterface) {\n    this.loginError = false;\n    this.authService.login(login)\n      .pipe(takeUntil(this.viewDestroyed$))\n      .subscribe(success => {\n        if (success) {\n          const returnUrl = this.route.snapshot.queryParams['returnUrl'] || ['home'];\n          console.log(returnUrl);\n          this.router.navigate(returnUrl)\n            .then(() => window.location.reload());\n        } else {\n          this.loginError = true;\n        }\n      });\n  }\n}","<div class=\"container\">\n  <form [formGroup]=\"formGroup\" (ngSubmit)=\"onLoginSubmit(formGroup.value)\" class=\"form\">\n    <mat-form-field class=\"form-element\">\n      <mat-label>Login</mat-label>\n      <input matInput placeholder=\"Login\" formControlName=\"login\" autofocus>\n    </mat-form-field>\n  \n    <mat-form-field class=\"form-element\">\n      <mat-label>Password</mat-label>\n      <input matInput placeholder=\"Password\" type=\"password\" formControlName=\"password\">\n    </mat-form-field>\n    \n    <div class=\"form-element\">\n      <button mat-raised-button color=\"primary\" type=\"submit\" class=\"submit\" [disabled]=\"!formGroup.valid\">\n        Login\n      </button>\n    </div>\n    <mat-error *ngIf=\"loginError\">\n      Login error\n    </mat-error>\n  </form>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}