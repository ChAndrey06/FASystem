"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.replaceInText = void 0;
var ts = __importStar(require("typescript"));
var transforms_ts_1 = require("@ts-nameof/transforms-ts");
var printer = ts.createPrinter();
function replaceInText(fileName, fileText) {
    if (arguments.length === 1) {
        fileText = fileName;
        fileName = "/file.tsx";
    }
    var visitSourceFileContext = {
        interpolateExpressions: new Set()
    };
    var sourceFile = ts.createSourceFile(fileName, fileText, ts.ScriptTarget.Latest, false);
    var transformations = [];
    var transformerFactory = function (context) {
        return function (_) { return visitSourceFile(context); };
    };
    ts.transform(sourceFile, [transformerFactory]);
    transforms_ts_1.throwIfContextHasInterpolateExpressions(visitSourceFileContext, sourceFile);
    if (transformations.length === 0)
        return { replaced: false };
    return { fileText: getTransformedText(), replaced: true };
    function getTransformedText() {
        var finalText = "";
        var lastPos = 0;
        for (var _i = 0, transformations_1 = transformations; _i < transformations_1.length; _i++) {
            var transform = transformations_1[_i];
            finalText += fileText.substring(lastPos, transform.start);
            finalText += transform.text;
            lastPos = transform.end;
        }
        finalText += fileText.substring(lastPos);
        return finalText;
    }
    function visitSourceFile(context) {
        return visitNodeAndChildren(sourceFile);
        function visitNodeAndChildren(node) {
            if (node == null)
                return node;
            node = ts.visitEachChild(node, function (childNode) { return visitNodeAndChildren(childNode); }, context);
            var resultNode = transforms_ts_1.visitNode(node, sourceFile, visitSourceFileContext);
            var wasTransformed = resultNode !== node;
            if (wasTransformed)
                storeTransformation();
            return resultNode;
            function storeTransformation() {
                var nodeStart = node.getStart(sourceFile);
                var lastTransformation = transformations[transformations.length - 1];
                if (lastTransformation != null && lastTransformation.start > nodeStart)
                    transformations.pop();
                transformations.push({
                    start: nodeStart,
                    end: node.end,
                    text: printer.printNode(ts.EmitHint.Unspecified, resultNode, sourceFile)
                });
            }
        }
    }
}
exports.replaceInText = replaceInText;
//# sourceMappingURL=replaceInText.js.map