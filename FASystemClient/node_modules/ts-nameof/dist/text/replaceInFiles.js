"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.replaceInFiles = void 0;
var fs = __importStar(require("fs"));
var getFileNamesFromGlobs_1 = require("./getFileNamesFromGlobs");
var replaceInText_1 = require("./replaceInText");
function replaceInFiles(fileNames) {
    return getFileNamesFromGlobs_1.getFileNamesFromGlobs(fileNames).then(function (globbedFileNames) { return doReplaceInFiles(globbedFileNames); });
}
exports.replaceInFiles = replaceInFiles;
function doReplaceInFiles(fileNames) {
    var promises = [];
    fileNames.forEach(function (fileName) {
        promises.push(new Promise(function (resolve, reject) {
            fs.readFile(fileName, { encoding: "utf8" }, function (err, fileText) {
                if (err) {
                    reject(err);
                    return;
                }
                var result = replaceInText_1.replaceInText(fileName, fileText);
                if (result.replaced) {
                    fs.writeFile(fileName, result.fileText, function (writeErr) {
                        if (writeErr) {
                            reject(writeErr);
                            return;
                        }
                        resolve();
                    });
                }
                else {
                    resolve();
                }
            });
        }));
    });
    return Promise.all(promises);
}
//# sourceMappingURL=replaceInFiles.js.map