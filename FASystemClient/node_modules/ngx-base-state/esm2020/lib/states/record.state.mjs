import { __decorate } from "tslib";
import { map, shareReplay } from 'rxjs';
import { ÉµAction as Action } from '../decorators';
import { BaseState } from './base.state';
/**
 *	@class
 *	@classdes Record state class. Used for save state with Record type.
 */
export class RecordState extends BaseState {
    constructor() {
        super(...arguments);
        /**
         *  Get `Observable` with all `keys` of your `Record` object state.
         *  @public
         */
        this.keys$ = this.data$
            .pipe(map(() => this.keys), shareReplay(1));
        /**
         *  Get `Observable` with all `values` of your `Record` object state.
         *  @public
         */
        this.values$ = this.data$
            .pipe(map(() => this.values), shareReplay(1));
    }
    /**
     *  Get all `keys` of your `Record` object state.
     *  @public
     */
    get keys() {
        return (this.data) ? Object.keys(this.data) : [];
    }
    /**
     *  Get all `values` of your `Record` object state.
     *  @public
     */
    get values() {
        return (this.data) ? Object.values(this.data) : [];
    }
    /**
     * 	Set item to object in state.
     *	@public
     *	@param {TKey} key - Key to set into.
     *	@param {TValue} value - Value to set within `key`.
     */
    setItem(key, value) {
        this.data[key] = value;
        this.setNewValue(this.data);
    }
    /**
     * 	Remove item from object in state.
     *	@public
     *	@param {TKey} key - Key to remove item within.
     */
    removeItem(key) {
        delete this.data[key];
        this.setNewValue(this.data);
    }
    /**
     * 	Remove all items from object in state.
     *	@public
     */
    removeAllItems() {
        this.set({});
    }
    setNewValue(value) {
        if (value) {
            super.setNewValue({ ...value });
        }
        else {
            super.setNewValue(null);
        }
    }
    catchError(error, actionName) {
        if (error instanceof TypeError) {
            throw new Error(`\n${this.constructor.name} [${actionName}]: ` +
                `Firstly set Object [Record].\n\n${error.message}`);
        }
        super.catchError(error, actionName);
    }
}
__decorate([
    Action
], RecordState.prototype, "setItem", null);
__decorate([
    Action
], RecordState.prototype, "removeItem", null);
__decorate([
    Action
], RecordState.prototype, "removeAllItems", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVjb3JkLnN0YXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbGlicmFyeS9zcmMvbGliL3N0YXRlcy9yZWNvcmQuc3RhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxHQUFHLEVBQWMsV0FBVyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxPQUFPLElBQUksTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFekM7OztHQUdHO0FBQ0gsTUFBTSxPQUFnQixXQUNsQixTQUFRLFNBQStCO0lBRDNDOztRQWtCSTs7O1dBR0E7UUFDZ0IsVUFBSyxHQUF1QixJQUFJLENBQUMsS0FBSzthQUNqRCxJQUFJLENBQ0QsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFDcEIsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUNqQixDQUFDO1FBRU47OztXQUdBO1FBQ2dCLFlBQU8sR0FBeUIsSUFBSSxDQUFDLEtBQUs7YUFDckQsSUFBSSxDQUNELEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQ3RCLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FDakIsQ0FBQztJQXNEVixDQUFDO0lBeEZHOzs7T0FHQTtJQUNBLElBQVcsSUFBSTtRQUNYLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDL0QsQ0FBQztJQUVEOzs7T0FHQTtJQUNBLElBQVcsTUFBTTtRQUNiLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDdkQsQ0FBQztJQXNCRDs7Ozs7T0FLRztJQUVJLE9BQU8sQ0FBQyxHQUFTLEVBQUUsS0FBYTtRQUNuQyxJQUFJLENBQUMsSUFBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUV4QixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUVJLFVBQVUsQ0FBQyxHQUFTO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLElBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUV2QixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQ7OztPQUdHO0lBRUksY0FBYztRQUNqQixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQTBCLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRWtCLFdBQVcsQ0FBQyxLQUFrQztRQUM3RCxJQUFJLEtBQUssRUFBRTtZQUNQLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBRSxHQUFHLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDbkM7YUFBTTtZQUNILEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0I7SUFDTCxDQUFDO0lBRWtCLFVBQVUsQ0FBQyxLQUF3QixFQUFFLFVBQWtCO1FBQ3RFLElBQUksS0FBSyxZQUFZLFNBQVMsRUFBRTtZQUM1QixNQUFNLElBQUksS0FBSyxDQUNYLEtBQUssSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssVUFBVSxLQUFLO2dCQUM5QyxtQ0FBbUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUNyRCxDQUFDO1NBQ0w7UUFFRCxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztJQUN4QyxDQUFDO0NBQ0o7QUE3Q0c7SUFEQyxNQUFNOzBDQUtOO0FBUUQ7SUFEQyxNQUFNOzZDQUtOO0FBT0Q7SUFEQyxNQUFNO2lEQUdOIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWFwLCBPYnNlcnZhYmxlLCBzaGFyZVJlcGxheSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgybVBY3Rpb24gYXMgQWN0aW9uIH0gZnJvbSAnLi4vZGVjb3JhdG9ycyc7XG5pbXBvcnQgeyBCYXNlU3RhdGUgfSBmcm9tICcuL2Jhc2Uuc3RhdGUnO1xuXG4vKipcbiAqXHRAY2xhc3NcbiAqXHRAY2xhc3NkZXMgUmVjb3JkIHN0YXRlIGNsYXNzLiBVc2VkIGZvciBzYXZlIHN0YXRlIHdpdGggUmVjb3JkIHR5cGUuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBSZWNvcmRTdGF0ZTxUS2V5IGV4dGVuZHMgc3RyaW5nLCBUVmFsdWU+XG4gICAgZXh0ZW5kcyBCYXNlU3RhdGU8UmVjb3JkPFRLZXksIFRWYWx1ZT4+IHtcbiAgICAvKipcblx0ICogIEdldCBhbGwgYGtleXNgIG9mIHlvdXIgYFJlY29yZGAgb2JqZWN0IHN0YXRlLlxuICAgICAqICBAcHVibGljXG5cdCAqL1xuICAgIHB1YmxpYyBnZXQga2V5cygpOiBUS2V5W10ge1xuICAgICAgICByZXR1cm4gKHRoaXMuZGF0YSkgPyBPYmplY3Qua2V5cyh0aGlzLmRhdGEpIGFzIFRLZXlbXSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuXHQgKiAgR2V0IGFsbCBgdmFsdWVzYCBvZiB5b3VyIGBSZWNvcmRgIG9iamVjdCBzdGF0ZS5cbiAgICAgKiAgQHB1YmxpY1xuXHQgKi9cbiAgICBwdWJsaWMgZ2V0IHZhbHVlcygpOiBUVmFsdWVbXSB7XG4gICAgICAgIHJldHVybiAodGhpcy5kYXRhKSA/IE9iamVjdC52YWx1ZXModGhpcy5kYXRhKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuXHQgKiAgR2V0IGBPYnNlcnZhYmxlYCB3aXRoIGFsbCBga2V5c2Agb2YgeW91ciBgUmVjb3JkYCBvYmplY3Qgc3RhdGUuXG4gICAgICogIEBwdWJsaWNcblx0ICovXG4gICAgcHVibGljIHJlYWRvbmx5IGtleXMkOiBPYnNlcnZhYmxlPFRLZXlbXT4gPSB0aGlzLmRhdGEkXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgICAgbWFwKCgpID0+IHRoaXMua2V5cyksXG4gICAgICAgICAgICBzaGFyZVJlcGxheSgxKVxuICAgICAgICApO1xuXG4gICAgLyoqXG5cdCAqICBHZXQgYE9ic2VydmFibGVgIHdpdGggYWxsIGB2YWx1ZXNgIG9mIHlvdXIgYFJlY29yZGAgb2JqZWN0IHN0YXRlLlxuICAgICAqICBAcHVibGljXG5cdCAqL1xuICAgIHB1YmxpYyByZWFkb25seSB2YWx1ZXMkOiBPYnNlcnZhYmxlPFRWYWx1ZVtdPiA9IHRoaXMuZGF0YSRcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICBtYXAoKCkgPT4gdGhpcy52YWx1ZXMpLFxuICAgICAgICAgICAgc2hhcmVSZXBsYXkoMSlcbiAgICAgICAgKTtcblxuICAgIC8qKlxuICAgICAqIFx0U2V0IGl0ZW0gdG8gb2JqZWN0IGluIHN0YXRlLlxuICAgICAqXHRAcHVibGljXG4gICAgICpcdEBwYXJhbSB7VEtleX0ga2V5IC0gS2V5IHRvIHNldCBpbnRvLlxuICAgICAqXHRAcGFyYW0ge1RWYWx1ZX0gdmFsdWUgLSBWYWx1ZSB0byBzZXQgd2l0aGluIGBrZXlgLlxuICAgICAqL1xuICAgIEBBY3Rpb25cbiAgICBwdWJsaWMgc2V0SXRlbShrZXk6IFRLZXksIHZhbHVlOiBUVmFsdWUpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kYXRhIVtrZXldID0gdmFsdWU7XG5cbiAgICAgICAgdGhpcy5zZXROZXdWYWx1ZSh0aGlzLmRhdGEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFx0UmVtb3ZlIGl0ZW0gZnJvbSBvYmplY3QgaW4gc3RhdGUuXG4gICAgICpcdEBwdWJsaWNcbiAgICAgKlx0QHBhcmFtIHtUS2V5fSBrZXkgLSBLZXkgdG8gcmVtb3ZlIGl0ZW0gd2l0aGluLlxuICAgICAqL1xuICAgIEBBY3Rpb25cbiAgICBwdWJsaWMgcmVtb3ZlSXRlbShrZXk6IFRLZXkpOiB2b2lkIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuZGF0YSFba2V5XTtcblxuICAgICAgICB0aGlzLnNldE5ld1ZhbHVlKHRoaXMuZGF0YSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogXHRSZW1vdmUgYWxsIGl0ZW1zIGZyb20gb2JqZWN0IGluIHN0YXRlLlxuICAgICAqXHRAcHVibGljXG4gICAgICovXG4gICAgQEFjdGlvblxuICAgIHB1YmxpYyByZW1vdmVBbGxJdGVtcygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZXQoe30gYXMgUmVjb3JkPFRLZXksIFRWYWx1ZT4pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBzZXROZXdWYWx1ZSh2YWx1ZTogUmVjb3JkPFRLZXksIFRWYWx1ZT4gfCBudWxsKTogdm9pZCB7XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgc3VwZXIuc2V0TmV3VmFsdWUoeyAuLi52YWx1ZSB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVyLnNldE5ld1ZhbHVlKG51bGwpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIG92ZXJyaWRlIGNhdGNoRXJyb3IoZXJyb3I6IEVycm9yIHwgVHlwZUVycm9yLCBhY3Rpb25OYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKGVycm9yIGluc3RhbmNlb2YgVHlwZUVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgYFxcbiR7dGhpcy5jb25zdHJ1Y3Rvci5uYW1lfSBbJHthY3Rpb25OYW1lfV06IGAgK1xuICAgICAgICAgICAgICAgIGBGaXJzdGx5IHNldCBPYmplY3QgW1JlY29yZF0uXFxuXFxuJHtlcnJvci5tZXNzYWdlfWBcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlci5jYXRjaEVycm9yKGVycm9yLCBhY3Rpb25OYW1lKTtcbiAgICB9XG59XG4iXX0=