import { __decorate } from "tslib";
import { ÉµAction as Action } from '../decorators';
import { BaseState } from './base.state';
/**
 *	@class
 *	@abstract
 *	@classdes Array state class. Implementing base array functionality.
 */
export class ArrayState extends BaseState {
    /**
     * 	Return item by quired index.
     *	@public
     *	@param {Number} index - Quired index
     *  @deprecated use `this.data[index]` instead
     *	@return {Generic} quired item.
     */
    getByIndex(index) {
        const items = this.data;
        return items[index];
    }
    /**
     * 	Unshift item to array in state.
     *	@public
     *	@param {Generic} item - Item needs to unshift.
     */
    unshiftItem(item) {
        const items = this.data;
        items.unshift(item);
        this.setNewValue(items);
    }
    /**
     * 	Shift array in state.
     *	@public
     */
    shift() {
        const items = this.data;
        items.shift();
        this.setNewValue(items);
    }
    /**
     * 	Pop array in state.
     *	@public
     */
    pop() {
        const items = this.data;
        items.pop();
        this.setNewValue(items);
    }
    /**
     * 	Concat current state with another array.
     *	@param {T[]} array - Another array to concat with the current state.
     *	@public
     */
    concatWith(array) {
        const items = this.data;
        const newItems = items.concat(array);
        this.setNewValue(newItems);
    }
    /**
     * 	Push item to array in state.
     *	@public
     *	@param {Generic} item - Item needs to push
     */
    pushItem(item) {
        const items = this.data;
        items.push(item);
        this.setNewValue(items);
    }
    /**
     * 	Insert item in array by index.
     *	@public
     *	@param {number} index - Index where to insert new item.
     *	@param {Generic} item - Item need to insert.
     */
    insertItemByIndex(index, item) {
        const items = this.data;
        items.splice(index, 0, item);
        this.setNewValue(items);
    }
    /**
     * 	Remove item in array by item identify param (using `compareItems` method).
     *	@public
     *	@param {Generic} itemId - Id of item you want to remove.
     */
    removeItem(item) {
        const index = this.data.findIndex((_item) => this.compareItems(item, _item));
        return this.removeItemByIndex(index);
    }
    /**
     * 	Remove item in array by item id (using `getItemId` method).
     *	@public
     *	@param {Generic} itemId - Id of item you want to remove.
     */
    removeItemById(itemId) {
        const index = this.data.findIndex((_item) => itemId === this.getItemId(_item));
        return this.removeItemByIndex(index);
    }
    /**
     * 	Remove item in array by index.
     *	@public
     *	@param {number} index - Index of item you want to remove.
     */
    removeItemByIndex(index) {
        const items = this.data;
        const removedItem = this.data[index];
        items.splice(index, 1);
        this.setNewValue(items);
        return removedItem;
    }
    /**
     * 	Update item in array by item identify param (using `compareItems` method).
     *	@public
    *	@param {Generic} itemToUpdate - item that will be update.
    */
    updateItem(itemToUpdate) {
        const items = this.data;
        const newItemToUpdate = { ...itemToUpdate };
        const itemIndex = items.findIndex((_currentItem) => this.compareItems(_currentItem, newItemToUpdate));
        items[itemIndex] = newItemToUpdate;
        this.setNewValue(items);
    }
    /**
     * 	Update item in array by index.
     *	@public
     *	@param {Generic} itemToUpdate - item that will be update.
     *	@param {Generic} index - index of item that need to update.
     */
    updateItemByIndex(itemToUpdate, index) {
        const items = this.data;
        items[index] = itemToUpdate;
        this.setNewValue(items);
    }
    setNewValue(value) {
        if (value) {
            super.setNewValue([...value]);
        }
        else {
            super.setNewValue(null);
        }
    }
    catchError(error, actionName) {
        if (error instanceof TypeError) {
            throw new Error(`\n${this.constructor.name} [${actionName}]: ` +
                `Firstly set Array.\n\n${error.message}`);
        }
        super.catchError(error, actionName);
    }
    /**
     *	Must return identify param of item.
     *	Method must be filled in child classes.
     *	Used for compare two any items.
     *  @protected
     *	@param {Generic} item - item of your state.
     *	@return {Generic} identify param of item.
     */
    getItemId(item) {
        return item;
    }
    /**
     * 	Compare two items via `getItemId`
     *	@private
     *	@param {Generic} itemToUpdate - item that will be update.
     *	@return {boolean} result of comparing two items via `getItemId`.
     */
    compareItems(firstItem, secondItem) {
        return (this.getItemId(firstItem) === this.getItemId(secondItem));
    }
}
__decorate([
    Action
], ArrayState.prototype, "unshiftItem", null);
__decorate([
    Action
], ArrayState.prototype, "shift", null);
__decorate([
    Action
], ArrayState.prototype, "pop", null);
__decorate([
    Action
], ArrayState.prototype, "concatWith", null);
__decorate([
    Action
], ArrayState.prototype, "pushItem", null);
__decorate([
    Action
], ArrayState.prototype, "insertItemByIndex", null);
__decorate([
    Action
], ArrayState.prototype, "removeItem", null);
__decorate([
    Action
], ArrayState.prototype, "removeItemById", null);
__decorate([
    Action
], ArrayState.prototype, "removeItemByIndex", null);
__decorate([
    Action
], ArrayState.prototype, "updateItem", null);
__decorate([
    Action
], ArrayState.prototype, "updateItemByIndex", null);
//# sourceMappingURL=data:application/json;base64,