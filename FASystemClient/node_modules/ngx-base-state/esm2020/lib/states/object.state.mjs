import { __decorate } from "tslib";
import { ÉµAction as Action } from '../decorators';
import { BaseState } from './base.state';
/**
 *	@class
 *	@classdes Object state class. Used for save state with Object type.
 */
export class ObjectState extends BaseState {
    /**
     *  Updates state by merging new partial object with the existing one.
     *  @public
     *  @param {T | null} value - the value that should be set to update `BehaviorSubject`.
     */
    updateWithPartial(value) {
        this.set({ ...this.data, ...value });
    }
    setNewValue(value) {
        if (value) {
            super.setNewValue({ ...value });
        }
        else {
            super.setNewValue(null);
        }
    }
    catchError(error, actionName) {
        if (error instanceof TypeError) {
            throw new Error(`\n${this.constructor.name} [${actionName}]:` +
                `Firstly set Object.\n\n${error.message}`);
        }
        super.catchError(error, actionName);
    }
}
__decorate([
    Action
], ObjectState.prototype, "updateWithPartial", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JqZWN0LnN0YXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbGlicmFyeS9zcmMvbGliL3N0YXRlcy9vYmplY3Quc3RhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxPQUFPLElBQUksTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFekM7OztHQUdHO0FBQ0gsTUFBTSxPQUFnQixXQUFlLFNBQVEsU0FBWTtJQUNyRDs7OztPQUlHO0lBRUksaUJBQWlCLENBQUMsS0FBaUI7UUFDdEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUssRUFBRSxHQUFHLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVrQixXQUFXLENBQUMsS0FBZTtRQUMxQyxJQUFJLEtBQUssRUFBRTtZQUNQLEtBQUssQ0FBQyxXQUFXLENBQUMsRUFBRSxHQUFHLEtBQUssRUFBRSxDQUFDLENBQUM7U0FDbkM7YUFBTTtZQUNILEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0I7SUFDTCxDQUFDO0lBRWtCLFVBQVUsQ0FBQyxLQUF3QixFQUFFLFVBQWtCO1FBQ3RFLElBQUksS0FBSyxZQUFZLFNBQVMsRUFBRTtZQUM1QixNQUFNLElBQUksS0FBSyxDQUNYLEtBQUssSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssVUFBVSxJQUFJO2dCQUM3QywwQkFBMEIsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUM1QyxDQUFDO1NBQ0w7UUFFRCxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztJQUN4QyxDQUFDO0NBQ0o7QUF0Qkc7SUFEQyxNQUFNO29EQUdOIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgybVBY3Rpb24gYXMgQWN0aW9uIH0gZnJvbSAnLi4vZGVjb3JhdG9ycyc7XG5pbXBvcnQgeyBCYXNlU3RhdGUgfSBmcm9tICcuL2Jhc2Uuc3RhdGUnO1xuXG4vKipcbiAqXHRAY2xhc3NcbiAqXHRAY2xhc3NkZXMgT2JqZWN0IHN0YXRlIGNsYXNzLiBVc2VkIGZvciBzYXZlIHN0YXRlIHdpdGggT2JqZWN0IHR5cGUuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBPYmplY3RTdGF0ZTxUPiBleHRlbmRzIEJhc2VTdGF0ZTxUPiB7XG4gICAgLyoqXG4gICAgICogIFVwZGF0ZXMgc3RhdGUgYnkgbWVyZ2luZyBuZXcgcGFydGlhbCBvYmplY3Qgd2l0aCB0aGUgZXhpc3Rpbmcgb25lLlxuICAgICAqICBAcHVibGljXG4gICAgICogIEBwYXJhbSB7VCB8IG51bGx9IHZhbHVlIC0gdGhlIHZhbHVlIHRoYXQgc2hvdWxkIGJlIHNldCB0byB1cGRhdGUgYEJlaGF2aW9yU3ViamVjdGAuXG4gICAgICovXG4gICAgQEFjdGlvblxuICAgIHB1YmxpYyB1cGRhdGVXaXRoUGFydGlhbCh2YWx1ZTogUGFydGlhbDxUPik6IHZvaWQge1xuICAgICAgICB0aGlzLnNldCh7IC4uLnRoaXMuZGF0YSEsIC4uLnZhbHVlIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBvdmVycmlkZSBzZXROZXdWYWx1ZSh2YWx1ZTogVCB8IG51bGwpOiB2b2lkIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICBzdXBlci5zZXROZXdWYWx1ZSh7IC4uLnZhbHVlIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc3VwZXIuc2V0TmV3VmFsdWUobnVsbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgb3ZlcnJpZGUgY2F0Y2hFcnJvcihlcnJvcjogRXJyb3IgfCBUeXBlRXJyb3IsIGFjdGlvbk5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBpZiAoZXJyb3IgaW5zdGFuY2VvZiBUeXBlRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICBgXFxuJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9IFske2FjdGlvbk5hbWV9XTpgICtcbiAgICAgICAgICAgICAgICBgRmlyc3RseSBzZXQgT2JqZWN0LlxcblxcbiR7ZXJyb3IubWVzc2FnZX1gXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgc3VwZXIuY2F0Y2hFcnJvcihlcnJvciwgYWN0aW9uTmFtZSk7XG4gICAgfVxufVxuIl19