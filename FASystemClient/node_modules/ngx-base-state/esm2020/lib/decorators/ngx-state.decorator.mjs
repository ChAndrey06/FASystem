import { ɵNGX_STATE_DECORATOR_METADATA_FIELD } from '../constants';
import { patchedActionFunction } from '../functions';
const forbiddenMethodNamesToPatch = [
    'constructor',
    'ngOnDestroy'
];
export function NgxState() {
    return function InnerFunction(targetClass) {
        const prototype = targetClass.prototype;
        markTargetClassWithMetadata(prototype);
        Object.getOwnPropertyNames(prototype).forEach((fieldName) => {
            const isFieldNameForbidden = forbiddenMethodNamesToPatch.includes(fieldName);
            if (!isFieldNameForbidden && isFieldHaveTypeFunction(prototype, fieldName)) {
                markMethodOfStateAsAction(prototype, fieldName, prototype[fieldName]);
            }
        });
    };
}
function markTargetClassWithMetadata(stateClass) {
    stateClass[ɵNGX_STATE_DECORATOR_METADATA_FIELD] = true;
}
function markMethodOfStateAsAction(stateClass, fieldName, originalMethod) {
    stateClass[fieldName] = patchedActionFunction(fieldName, originalMethod);
}
function isFieldHaveTypeFunction(stateClass, fieldName) {
    return (!Object.getOwnPropertyDescriptor(stateClass, fieldName)?.get &&
        !Object.getOwnPropertyDescriptor(stateClass, fieldName)?.set &&
        (typeof stateClass[fieldName] === 'function'));
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXN0YXRlLmRlY29yYXRvci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2xpYnJhcnkvc3JjL2xpYi9kZWNvcmF0b3JzL25neC1zdGF0ZS5kZWNvcmF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLG1DQUFtQyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUVyRCxNQUFNLDJCQUEyQixHQUFHO0lBQ2hDLGFBQWE7SUFDYixhQUFhO0NBQ2hCLENBQUM7QUFFRixNQUFNLFVBQVUsUUFBUTtJQUNwQixPQUFPLFNBQVMsYUFBYSxDQUFDLFdBQWdCO1FBQzFDLE1BQU0sU0FBUyxHQUFHLFdBQVcsQ0FBQyxTQUFTLENBQUM7UUFFeEMsMkJBQTJCLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFdkMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQ3hELE1BQU0sb0JBQW9CLEdBQUcsMkJBQTJCLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRTdFLElBQUksQ0FBQyxvQkFBb0IsSUFBSSx1QkFBdUIsQ0FBQyxTQUFTLEVBQUUsU0FBUyxDQUFDLEVBQUU7Z0JBQ3hFLHlCQUF5QixDQUFDLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7YUFDekU7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQztBQUNOLENBQUM7QUFFRCxTQUFTLDJCQUEyQixDQUFDLFVBQWU7SUFDaEQsVUFBVSxDQUFDLG1DQUFtQyxDQUFDLEdBQUcsSUFBSSxDQUFDO0FBQzNELENBQUM7QUFFRCxTQUFTLHlCQUF5QixDQUM5QixVQUFlLEVBQ2YsU0FBaUIsRUFDakIsY0FBd0I7SUFFeEIsVUFBVSxDQUFDLFNBQVMsQ0FBQyxHQUFHLHFCQUFxQixDQUFDLFNBQVMsRUFBRSxjQUFjLENBQUMsQ0FBQztBQUM3RSxDQUFDO0FBRUQsU0FBUyx1QkFBdUIsQ0FBQyxVQUFlLEVBQUUsU0FBaUI7SUFDL0QsT0FBTyxDQUNILENBQUMsTUFBTSxDQUFDLHdCQUF3QixDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsRUFBRSxHQUFHO1FBQzVELENBQUMsTUFBTSxDQUFDLHdCQUF3QixDQUFDLFVBQVUsRUFBRSxTQUFTLENBQUMsRUFBRSxHQUFHO1FBQzVELENBQUMsT0FBTyxVQUFVLENBQUMsU0FBUyxDQUFDLEtBQUssVUFBVSxDQUFDLENBQ2hELENBQUM7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgybVOR1hfU1RBVEVfREVDT1JBVE9SX01FVEFEQVRBX0ZJRUxEIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcbmltcG9ydCB7IHBhdGNoZWRBY3Rpb25GdW5jdGlvbiB9IGZyb20gJy4uL2Z1bmN0aW9ucyc7XG5cbmNvbnN0IGZvcmJpZGRlbk1ldGhvZE5hbWVzVG9QYXRjaCA9IFtcbiAgICAnY29uc3RydWN0b3InLFxuICAgICduZ09uRGVzdHJveSdcbl07XG5cbmV4cG9ydCBmdW5jdGlvbiBOZ3hTdGF0ZSgpOiBhbnkge1xuICAgIHJldHVybiBmdW5jdGlvbiBJbm5lckZ1bmN0aW9uKHRhcmdldENsYXNzOiBhbnkpOiBhbnkge1xuICAgICAgICBjb25zdCBwcm90b3R5cGUgPSB0YXJnZXRDbGFzcy5wcm90b3R5cGU7XG5cbiAgICAgICAgbWFya1RhcmdldENsYXNzV2l0aE1ldGFkYXRhKHByb3RvdHlwZSk7XG5cbiAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocHJvdG90eXBlKS5mb3JFYWNoKChmaWVsZE5hbWUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGlzRmllbGROYW1lRm9yYmlkZGVuID0gZm9yYmlkZGVuTWV0aG9kTmFtZXNUb1BhdGNoLmluY2x1ZGVzKGZpZWxkTmFtZSk7XG5cbiAgICAgICAgICAgIGlmICghaXNGaWVsZE5hbWVGb3JiaWRkZW4gJiYgaXNGaWVsZEhhdmVUeXBlRnVuY3Rpb24ocHJvdG90eXBlLCBmaWVsZE5hbWUpKSB7XG4gICAgICAgICAgICAgICAgbWFya01ldGhvZE9mU3RhdGVBc0FjdGlvbihwcm90b3R5cGUsIGZpZWxkTmFtZSwgcHJvdG90eXBlW2ZpZWxkTmFtZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBtYXJrVGFyZ2V0Q2xhc3NXaXRoTWV0YWRhdGEoc3RhdGVDbGFzczogYW55KTogdm9pZCB7XG4gICAgc3RhdGVDbGFzc1vJtU5HWF9TVEFURV9ERUNPUkFUT1JfTUVUQURBVEFfRklFTERdID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gbWFya01ldGhvZE9mU3RhdGVBc0FjdGlvbihcbiAgICBzdGF0ZUNsYXNzOiBhbnksXG4gICAgZmllbGROYW1lOiBzdHJpbmcsXG4gICAgb3JpZ2luYWxNZXRob2Q6IEZ1bmN0aW9uXG4pOiB2b2lkIHtcbiAgICBzdGF0ZUNsYXNzW2ZpZWxkTmFtZV0gPSBwYXRjaGVkQWN0aW9uRnVuY3Rpb24oZmllbGROYW1lLCBvcmlnaW5hbE1ldGhvZCk7XG59XG5cbmZ1bmN0aW9uIGlzRmllbGRIYXZlVHlwZUZ1bmN0aW9uKHN0YXRlQ2xhc3M6IGFueSwgZmllbGROYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgICAhT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzdGF0ZUNsYXNzLCBmaWVsZE5hbWUpPy5nZXQgJiZcbiAgICAgICAgIU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc3RhdGVDbGFzcywgZmllbGROYW1lKT8uc2V0ICYmXG4gICAgICAgICh0eXBlb2Ygc3RhdGVDbGFzc1tmaWVsZE5hbWVdID09PSAnZnVuY3Rpb24nKVxuICAgICk7XG59XG4iXX0=