{"version":3,"file":"ngx-base-state.mjs","sources":["../../../projects/library/src/lib/classes/config.ts","../../../projects/library/src/lib/tokens/config.token.ts","../../../projects/library/src/lib/constants/wrapped-at-ngx-state-decorator.const.ts","../../../projects/library/src/lib/functions/patched-action.function.ts","../../../projects/library/src/lib/decorators/ngx-state.decorator.ts","../../../projects/library/src/lib/decorators/action.decorator.ts","../../../projects/library/src/lib/enums/metadata-key.enum.ts","../../../projects/library/src/lib/enums/metadata-operation-type.enum.ts","../../../projects/library/src/lib/helpers/metadata-storage.helper.ts","../../../projects/library/src/lib/helpers/stack-trace.helper.ts","../../../projects/library/src/lib/states/base.state.ts","../../../projects/library/src/lib/states/array.state.ts","../../../projects/library/src/lib/states/object.state.ts","../../../projects/library/src/lib/states/primitive.state.ts","../../../projects/library/src/lib/states/record.state.ts","../../../projects/library/src/lib/devtools.module.ts","../../../projects/library/src/ngx-base-state.ts"],"sourcesContent":["import { ɵNgxBaseStateConfigParams } from '../interfaces';\n\nexport class NgxBaseStateDevtoolsConfig implements ɵNgxBaseStateConfigParams {\n    public readonly isEnabled: boolean = false;\n\n    constructor(params: ɵNgxBaseStateConfigParams) {\n        Object.assign(this, params);\n    }\n}\n","import { InjectionToken } from '@angular/core';\nimport { NgxBaseStateDevtoolsConfig } from '../classes';\n\nexport const NGX_BASE_STATE_DEVTOOLS_CONFIG = new InjectionToken('NGX_BASE_STATE_DEVTOOLS_CONFIG', {\n    providedIn: 'root',\n    factory: () => new NgxBaseStateDevtoolsConfig({\n        isEnabled: false\n    })\n});\n","export const ɵNGX_STATE_DECORATOR_METADATA_FIELD = 'ɵNgxState';\n","const tryDoActionMethodName = 'tryDoAction';\nconst actionLikeInvokedMethodName = '_onActionLikeInvoked';\nconst actionLikeInvokeEndMethodName = '_onActionLikeInvokeEnd';\n\nexport function patchedActionFunction(actionName: string, actionFunction: Function): unknown {\n    return function innerFunction(this: typeof innerFunction, ...args: unknown[]): unknown {\n        return this[tryDoActionMethodName](actionName, () => {\n            this[actionLikeInvokedMethodName](actionName);\n\n            const originalMethodResult = actionFunction.apply(this, args);\n\n            this[actionLikeInvokeEndMethodName]();\n\n            return originalMethodResult;\n        });\n    };\n}\n","import { ɵNGX_STATE_DECORATOR_METADATA_FIELD } from '../constants';\nimport { patchedActionFunction } from '../functions';\n\nconst forbiddenMethodNamesToPatch = [\n    'constructor',\n    'ngOnDestroy'\n];\n\nexport function NgxState(): any {\n    return function InnerFunction(targetClass: any): any {\n        const prototype = targetClass.prototype;\n\n        markTargetClassWithMetadata(prototype);\n\n        Object.getOwnPropertyNames(prototype).forEach((fieldName) => {\n            const isFieldNameForbidden = forbiddenMethodNamesToPatch.includes(fieldName);\n\n            if (!isFieldNameForbidden && isFieldHaveTypeFunction(prototype, fieldName)) {\n                markMethodOfStateAsAction(prototype, fieldName, prototype[fieldName]);\n            }\n        });\n    };\n}\n\nfunction markTargetClassWithMetadata(stateClass: any): void {\n    stateClass[ɵNGX_STATE_DECORATOR_METADATA_FIELD] = true;\n}\n\nfunction markMethodOfStateAsAction(\n    stateClass: any,\n    fieldName: string,\n    originalMethod: Function\n): void {\n    stateClass[fieldName] = patchedActionFunction(fieldName, originalMethod);\n}\n\nfunction isFieldHaveTypeFunction(stateClass: any, fieldName: string): boolean {\n    return (\n        !Object.getOwnPropertyDescriptor(stateClass, fieldName)?.get &&\n        !Object.getOwnPropertyDescriptor(stateClass, fieldName)?.set &&\n        (typeof stateClass[fieldName] === 'function')\n    );\n}\n","import { patchedActionFunction } from '../functions';\n\nexport function ɵAction(targetClass: any, fieldName: string, descriptor: any): any {\n    const originalMethod = descriptor.value;\n\n    descriptor.value = patchedActionFunction(fieldName, originalMethod);\n}\n","export enum ɵMetadataKeyEnum {\n    DevtoolsEnabled = '__NGX_BASE_STATE_DEVTOOLS_ENABLED',\n    MetadataOperation = '__NGX_BASE_STATE_METADATA_OPERATION'\n}\n","export enum ɵMetadataOperationTypeEnum {\n    Init = 1,\n    Update,\n    Destroy\n}\n","import { Injectable } from '@angular/core';\nimport { ɵMetadataKeyEnum } from '../enums';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ɵMetadataStorage {\n    private get window(): any {\n        return window;\n    }\n\n    public get<R = unknown>(key: ɵMetadataKeyEnum): R {\n        return this.window[key];\n    }\n\n    public set<T>(key: ɵMetadataKeyEnum, data: T): void {\n        this.window[key] = data;\n    }\n}\n","export abstract class ɵStackTrace {\n    public static capture(): string[] {\n        // FIXME: Refactor and investigate\n        const stackTrace = new Error().stack!;\n        const rawMethods = stackTrace.split('at ');\n        const methods = rawMethods\n            .map((rawMethod) => rawMethod.slice(0, rawMethod.indexOf(' (')))\n            .filter((method) => !method.startsWith('http'));\n\n        return methods;\n    }\n}\n","import { Inject, inject, Injectable, InjectionToken, OnDestroy, Optional } from '@angular/core';\nimport { BehaviorSubject, Observable, ReplaySubject } from 'rxjs';\nimport { ɵNGX_STATE_DECORATOR_METADATA_FIELD } from '../constants';\nimport { ɵAction as Action } from '../decorators';\nimport { ɵMetadataKeyEnum, ɵMetadataOperationTypeEnum } from '../enums';\nimport { ɵMetadataStorage, ɵStackTrace } from '../helpers';\nimport { ɵInitialConfig, ɵMetadataOperation } from '../interfaces';\nimport { NGX_BASE_STATE_DEVTOOLS_CONFIG } from '../tokens';\n\nconst INITIAL_DATA = new InjectionToken('__NGX_BASE_STATE_INITIAL_DATA');\nconst INITIAL_CONFIG = new InjectionToken('__NGX_BASE_STATE_INITIAL_CONFIG');\nconst CLASS_ID_FIELD = '_ɵID';\n\n/**\n *\t@class\n *\t@classdes This is a base class that used for creating hight level state classes\n */\n@Injectable()\nexport abstract class BaseState<T> implements OnDestroy {\n    /**\n     * \tGet `Observable` with state data.\n     *  @public\n     *\t@return {Generic} Observable with the state data.\n     */\n    public get data$(): Observable<T | null> {\n        return this._data$.asObservable();\n    }\n\n    /**\n     * \tGet state data.\n     *  @public\n     *\t@return {Generic} State data.\n     */\n    public get data(): T | null {\n        return this._data$.value;\n    }\n\n    /**\n     * \tMain `BehaviorSubject` with state data.\n     *  @private\n     */\n    private readonly _data$: BehaviorSubject<T | null>;\n\n    private readonly _devtoolsConfig = inject(NGX_BASE_STATE_DEVTOOLS_CONFIG);\n    private readonly _metadataStorage = inject(ɵMetadataStorage);\n\n    private _currentlyInvokedAction: string | null = null;\n    private _stackTraceOfCurrentlyInvokedAction: string[] | null = null;\n\n    constructor(\n        /** Initial data should be passed via the `super` method call. */\n        @Inject(INITIAL_DATA) @Optional()\n        protected readonly initialData: T | null = null,\n        /** Initial config should be passed via the `super` method call. */\n        @Inject(INITIAL_CONFIG) @Optional()\n        private readonly initialConfig: ɵInitialConfig | null = null\n    ) {\n        this._data$ = new BehaviorSubject(this.initialData);\n\n        this.initClassIdIfAbsent();\n        this.showConsoleWarningIfClassHaveNotDecorator();\n        this.init();\n    }\n\n    /**\n     *  Base implementation of `ngOnDestroy`.\n     *  Don't forget to call `super.ngOnDestroy` in case of override.\n     *  @public\n     */\n    public ngOnDestroy(): void {\n        this.emitMetadataOperation(ɵMetadataOperationTypeEnum.Destroy);\n    }\n\n    /**\n     *  Set new value to state\n     *  @public\n     *\t@param {Generic} value - the value that should be set to update `BehaviorSubject`.\n     */\n    @Action\n    public set(value: T): void {\n        this.setNewValue(value);\n    }\n\n    /**\n     *  Clear state value. (Will be set `null`)\n     *  @public\n     */\n    @Action\n    public clear(): void {\n        this.setNewValue(null);\n    }\n\n    /**\n     *  Restore initial data from constructor.\n     *  @public\n     */\n    @Action\n    public restoreInitialData(): void {\n        this.setNewValue(this.initialData);\n    }\n\n    /**\n     *  Method for set data functionality. It may be expanded.\n     *  The idea is to process the creation of new instances of complex structures.\n     *  @protected\n     *\t@param {Generic | null} value - the value that should be set to update `BehaviorSubject`.\n     */\n    protected setNewValue(value: T | null): void {\n        this._data$.next(value);\n        this.emitMetadataOperation(ɵMetadataOperationTypeEnum.Update);\n    }\n\n    /**\n     * \tMethod used for try to work out any method\n     *  @protected\n     *\t@param {string} actionName - Action you try to fire. Used to show in Error text when something went wrong.\n     *\t@param {Function} actionFunc - Callback with logic. When something goes wrong - Error will be created.\n     *\t@return {Generic} result of the callback call.\n     */\n    protected tryDoAction<V>(actionName: string, actionFunc: () => any): V | undefined {\n        try {\n            return actionFunc();\n        } catch (error) {\n            this.catchError(error as Error, actionName);\n\n            return undefined;\n        }\n    }\n\n    /**\n     *  Method that\tprocessed error for user friendly error messages\n     *  @protected\n     *\t@param {Error} error - Error.\n     *\t@param {string} actionName - Name of the action where error happened.\n     */\n    protected catchError(error: Error, actionName: string): void {\n        throw new Error(`\\n${this.constructor.name} [${actionName}]: ${error.message}`);\n    }\n\n    @Action\n    private init(): void {\n        this.emitMetadataOperation(ɵMetadataOperationTypeEnum.Init);\n    }\n\n    // Using by decorators\n    private _onActionLikeInvoked(actionName: string): void {\n        if (this._devtoolsConfig.isEnabled && !this._currentlyInvokedAction) {\n            this._currentlyInvokedAction = actionName;\n            this._stackTraceOfCurrentlyInvokedAction = ɵStackTrace.capture();\n        }\n    }\n\n    // Using by decorators\n    private _onActionLikeInvokeEnd(): void {\n        if (this._devtoolsConfig.isEnabled) {\n            this._currentlyInvokedAction = null;\n            this._stackTraceOfCurrentlyInvokedAction = null;\n        }\n    }\n\n    private showConsoleWarningIfClassHaveNotDecorator(): void {\n        if (this._devtoolsConfig.isEnabled && !this[ɵNGX_STATE_DECORATOR_METADATA_FIELD]) {\n            console.warn(\n                `${this.constructor.name} class is missed @NgxState() decorator. ` +\n                `Some features of DevTools will work incorrectly!`\n            );\n        }\n    }\n\n    private initClassIdIfAbsent(): void {\n        if (!this.constructor[CLASS_ID_FIELD]) {\n            this.constructor[CLASS_ID_FIELD] = Math.random();\n        }\n    }\n\n    /**\n     *  Emits information about state changes into `ReplaySubject` at the `window`.\n     *  Extension use this information to visually represent current state and history of states changes.\n     *  @private\n     */\n    private emitMetadataOperation(type: ɵMetadataOperationTypeEnum): void {\n        if (this._devtoolsConfig.isEnabled) {\n            const operationEmitter$ = this._metadataStorage\n                .get<ReplaySubject<ɵMetadataOperation>>(ɵMetadataKeyEnum.MetadataOperation);\n\n            operationEmitter$.next({\n                type,\n                classId: this.constructor[CLASS_ID_FIELD],\n                className: this.constructor.name,\n                classContext: this.initialConfig?.context,\n                actionName: this._currentlyInvokedAction!,\n                date: new Date().toJSON(),\n                data: this.data,\n                stackTrace: this._stackTraceOfCurrentlyInvokedAction!\n            });\n        }\n    }\n}\n","import { ɵAction as Action } from '../decorators';\nimport { BaseState } from './base.state';\n\n/**\n *\t@class\n *\t@abstract\n *\t@classdes Array state class. Implementing base array functionality.\n */\nexport abstract class ArrayState<T> extends BaseState<T[]> {\n    /**\n     * \tReturn item by quired index.\n     *\t@public\n     *\t@param {Number} index - Quired index\n     *  @deprecated use `this.data[index]` instead\n     *\t@return {Generic} quired item.\n     */\n    public getByIndex(index: number): T | undefined {\n        const items = this.data;\n\n        return items![index];\n    }\n\n    /**\n     * \tUnshift item to array in state.\n     *\t@public\n     *\t@param {Generic} item - Item needs to unshift.\n     */\n    @Action\n    public unshiftItem(item: T): void {\n        const items = this.data;\n\n        items!.unshift(item);\n\n        this.setNewValue(items);\n    }\n\n    /**\n     * \tShift array in state.\n     *\t@public\n     */\n    @Action\n    public shift(): void {\n        const items = this.data;\n\n        items!.shift();\n\n        this.setNewValue(items);\n    }\n\n    /**\n     * \tPop array in state.\n     *\t@public\n     */\n    @Action\n    public pop(): void {\n        const items = this.data;\n\n        items!.pop();\n\n        this.setNewValue(items);\n    }\n\n    /**\n     * \tConcat current state with another array.\n     *\t@param {T[]} array - Another array to concat with the current state.\n     *\t@public\n     */\n    @Action\n    public concatWith(array: T[]): void {\n        const items = this.data;\n        const newItems = items!.concat(array);\n\n        this.setNewValue(newItems);\n    }\n\n    /**\n     * \tPush item to array in state.\n     *\t@public\n     *\t@param {Generic} item - Item needs to push\n     */\n    @Action\n    public pushItem(item: T): void {\n        const items = this.data;\n\n        items!.push(item);\n\n        this.setNewValue(items);\n    }\n\n    /**\n     * \tInsert item in array by index.\n     *\t@public\n     *\t@param {number} index - Index where to insert new item.\n     *\t@param {Generic} item - Item need to insert.\n     */\n    @Action\n    public insertItemByIndex(index: number, item: T): void {\n        const items = this.data;\n\n        items!.splice(index, 0, item);\n        this.setNewValue(items);\n    }\n\n    /**\n     * \tRemove item in array by item identify param (using `compareItems` method).\n     *\t@public\n     *\t@param {Generic} itemId - Id of item you want to remove.\n     */\n    @Action\n    public removeItem(item: T): T | undefined {\n        const index = this.data!.findIndex((_item) =>\n            this.compareItems(item, _item)\n        );\n\n        return this.removeItemByIndex(index);\n    }\n\n    /**\n     * \tRemove item in array by item id (using `getItemId` method).\n     *\t@public\n     *\t@param {Generic} itemId - Id of item you want to remove.\n     */\n    @Action\n    public removeItemById(itemId: unknown): T | undefined {\n        const index = this.data!.findIndex(\n            (_item) => itemId === this.getItemId(_item)\n        );\n\n        return this.removeItemByIndex(index);\n    }\n\n    /**\n     * \tRemove item in array by index.\n     *\t@public\n     *\t@param {number} index - Index of item you want to remove.\n     */\n    @Action\n    public removeItemByIndex(index: number): T | undefined {\n        const items = this.data;\n        const removedItem = this.data![index];\n\n        items!.splice(index, 1);\n\n        this.setNewValue(items);\n\n        return removedItem;\n    }\n\n    /**\n     * \tUpdate item in array by item identify param (using `compareItems` method).\n     *\t@public\n    *\t@param {Generic} itemToUpdate - item that will be update.\n    */\n    @Action\n    public updateItem(itemToUpdate: T): void {\n        const items = this.data;\n        const newItemToUpdate = { ...itemToUpdate };\n\n        const itemIndex = items!.findIndex((_currentItem) =>\n            this.compareItems(_currentItem, newItemToUpdate)\n        );\n\n        items![itemIndex] = newItemToUpdate;\n\n        this.setNewValue(items);\n    }\n\n    /**\n     * \tUpdate item in array by index.\n     *\t@public\n     *\t@param {Generic} itemToUpdate - item that will be update.\n     *\t@param {Generic} index - index of item that need to update.\n     */\n    @Action\n    public updateItemByIndex(itemToUpdate: T, index: number): void {\n        const items = this.data;\n\n        items![index] = itemToUpdate;\n\n        this.setNewValue(items);\n    }\n\n    protected override setNewValue(value: T[] | null): void {\n        if (value) {\n            super.setNewValue([...value]);\n        } else {\n            super.setNewValue(null);\n        }\n    }\n\n    protected override catchError(error: Error | TypeError, actionName: string): void {\n        if (error instanceof TypeError) {\n            throw new Error(\n                `\\n${this.constructor.name} [${actionName}]: ` +\n                `Firstly set Array.\\n\\n${error.message}`\n            );\n        }\n\n        super.catchError(error, actionName);\n    }\n\n    /**\n     *\tMust return identify param of item.\n     *\tMethod must be filled in child classes.\n     *\tUsed for compare two any items.\n     *  @protected\n     *\t@param {Generic} item - item of your state.\n     *\t@return {Generic} identify param of item.\n     */\n    protected getItemId(item: T): any {\n        return item;\n    }\n\n    /**\n     * \tCompare two items via `getItemId`\n     *\t@private\n     *\t@param {Generic} itemToUpdate - item that will be update.\n     *\t@return {boolean} result of comparing two items via `getItemId`.\n     */\n    private compareItems(firstItem: T, secondItem: T): boolean {\n        return (this.getItemId(firstItem) === this.getItemId(secondItem));\n    }\n}\n","import { ɵAction as Action } from '../decorators';\nimport { BaseState } from './base.state';\n\n/**\n *\t@class\n *\t@classdes Object state class. Used for save state with Object type.\n */\nexport abstract class ObjectState<T> extends BaseState<T> {\n    /**\n     *  Updates state by merging new partial object with the existing one.\n     *  @public\n     *  @param {T | null} value - the value that should be set to update `BehaviorSubject`.\n     */\n    @Action\n    public updateWithPartial(value: Partial<T>): void {\n        this.set({ ...this.data!, ...value });\n    }\n\n    protected override setNewValue(value: T | null): void {\n        if (value) {\n            super.setNewValue({ ...value });\n        } else {\n            super.setNewValue(null);\n        }\n    }\n\n    protected override catchError(error: Error | TypeError, actionName: string): void {\n        if (error instanceof TypeError) {\n            throw new Error(\n                `\\n${this.constructor.name} [${actionName}]:` +\n                `Firstly set Object.\\n\\n${error.message}`\n            );\n        }\n\n        super.catchError(error, actionName);\n    }\n}\n","import { BaseState } from './base.state';\n\n/**\n *\t@class\n *\t@classdes Primitive state class. Used for save state with Primitive type (Like boolean, number or string).\n */\nexport class PrimitiveState<T> extends BaseState<T> {}\n","import { map, Observable, shareReplay } from 'rxjs';\nimport { ɵAction as Action } from '../decorators';\nimport { BaseState } from './base.state';\n\n/**\n *\t@class\n *\t@classdes Record state class. Used for save state with Record type.\n */\nexport abstract class RecordState<TKey extends string, TValue>\n    extends BaseState<Record<TKey, TValue>> {\n    /**\n\t *  Get all `keys` of your `Record` object state.\n     *  @public\n\t */\n    public get keys(): TKey[] {\n        return (this.data) ? Object.keys(this.data) as TKey[] : [];\n    }\n\n    /**\n\t *  Get all `values` of your `Record` object state.\n     *  @public\n\t */\n    public get values(): TValue[] {\n        return (this.data) ? Object.values(this.data) : [];\n    }\n\n    /**\n\t *  Get `Observable` with all `keys` of your `Record` object state.\n     *  @public\n\t */\n    public readonly keys$: Observable<TKey[]> = this.data$\n        .pipe(\n            map(() => this.keys),\n            shareReplay(1)\n        );\n\n    /**\n\t *  Get `Observable` with all `values` of your `Record` object state.\n     *  @public\n\t */\n    public readonly values$: Observable<TValue[]> = this.data$\n        .pipe(\n            map(() => this.values),\n            shareReplay(1)\n        );\n\n    /**\n     * \tSet item to object in state.\n     *\t@public\n     *\t@param {TKey} key - Key to set into.\n     *\t@param {TValue} value - Value to set within `key`.\n     */\n    @Action\n    public setItem(key: TKey, value: TValue): void {\n        this.data![key] = value;\n\n        this.setNewValue(this.data);\n    }\n\n    /**\n     * \tRemove item from object in state.\n     *\t@public\n     *\t@param {TKey} key - Key to remove item within.\n     */\n    @Action\n    public removeItem(key: TKey): void {\n        delete this.data![key];\n\n        this.setNewValue(this.data);\n    }\n\n    /**\n     * \tRemove all items from object in state.\n     *\t@public\n     */\n    @Action\n    public removeAllItems(): void {\n        this.set({} as Record<TKey, TValue>);\n    }\n\n    protected override setNewValue(value: Record<TKey, TValue> | null): void {\n        if (value) {\n            super.setNewValue({ ...value });\n        } else {\n            super.setNewValue(null);\n        }\n    }\n\n    protected override catchError(error: Error | TypeError, actionName: string): void {\n        if (error instanceof TypeError) {\n            throw new Error(\n                `\\n${this.constructor.name} [${actionName}]: ` +\n                `Firstly set Object [Record].\\n\\n${error.message}`\n            );\n        }\n\n        super.catchError(error, actionName);\n    }\n}\n","import { Inject, NgModule } from '@angular/core';\nimport { ReplaySubject } from 'rxjs';\nimport { NgxBaseStateDevtoolsConfig } from './classes';\nimport { ɵMetadataKeyEnum } from './enums';\nimport { ɵMetadataStorage } from './helpers';\nimport { ɵMetadataOperation } from './interfaces';\nimport { NGX_BASE_STATE_DEVTOOLS_CONFIG } from './tokens';\n\n@NgModule({})\nexport class NgxBaseStateDevtoolsModule {\n    constructor(\n        @Inject(NGX_BASE_STATE_DEVTOOLS_CONFIG) private readonly config: NgxBaseStateDevtoolsConfig,\n        private readonly metadataStorage: ɵMetadataStorage\n    ) {\n        if (this.config.isEnabled) {\n            this.metadataStorage.set(ɵMetadataKeyEnum.DevtoolsEnabled, true);\n            this.metadataStorage.set(\n                ɵMetadataKeyEnum.MetadataOperation,\n                new ReplaySubject<ɵMetadataOperation>()\n            );\n        }\n    }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["Action","i1.ɵMetadataStorage"],"mappings":"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"}