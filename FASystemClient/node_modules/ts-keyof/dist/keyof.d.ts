export declare function keyof<O extends {}, K extends keyof O, R extends UnionToTuple<K> extends [K] ? K : unknown>(oneProperty: O): R;
/**
 * @see https://git.io/Jyvga
 */
declare type UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;
/**
 * @see https://git.io/Jyv2R
 */
declare type UnionToTuple<T> = UnionToIntersection<T extends any ? (t: T) => T : never> extends (_: any) => infer W ? [...UnionToTuple<Exclude<T, W>>, W] : [];
export {};
